%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: QuiznosSSS_ovalvert.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Scott Shirk
%%CreationDate: 8/28/09
%%BoundingBox: 0 0 480 330
%%HiResBoundingBox: 0 0 479.4107 330
%%CropBox: 0 0 479.4107 330
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 11302 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDD0FFA7CAC2%C89FC29FC198C198C198C198C199C29FC2A0C9C9CAFD63FFC9C9C2C2BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1C1C8C2CFFD5A%FFCAA0C198C198C198C198C198C198C198C198C198C198C198C198C198C1%98C198C198C198C198C19FC8C9FD53FFC9C2C1BBC198C1BBC198C1BBC198%C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BB%C199C8C9FD4DFFCA9FC198C198C198C198C198C198C198C198C198C198C1%98C198C198C198C198C198C198C198C198C198C198C198C198C198C199C2%A7FD48FFC9C2BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%C1C9FD43FFCFC899C198C198C198C198C198C198C198C198C198C198C198%C198C198C198C198C198C198C198C198C198C198C198C198C198C198C198%C198C198C198C1A0FD40FFC9C1BBC198C1BBC198C1BBC198C1BBC198C1BB%C198C1BBC1989F755151512D2D2D512D2D2D51517575C1BBC198C1BBC198%C1BBC198C1BBC198C1BBC198C1BBC199C9FD3CFFCA9FC198C198C198C198%C198C198C198C198C198C198C1989F502D262D2C2D262D2C2D262D2C2D26%2D2C2D2651749998C198C198C198C198C198C198C198C198C198C198C1C9%FD38FFCFC9BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC199512D%51517B757B757B51512D512D512D512D512D512D512D7B99C1BBC1BBC1BB%C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1C2FD36FFCAC198C198C198C198C198%C198C198C198C198C198C198C198C174C1989992996E9398C198C1747B51%2D2C2D2D2D2C2D2D2D2C2D519F98C198C198C198C198C198C198C198C198%C198C199CFFD33FFC9C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1%BBC198BB93936893699392BB99C198C1BBC198C1BB7B51512D2D2D512D2D%2D512D9F98C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C9FD31FFA0%C198C198C198C198C198C198C198C198C198C198C198C19293688D688D68%BB98C198C198C198C198C198C198C174512C2D262D2C2D262D2C7598C198%C198C198C198C198C198C198C198C198C198C2FD2FFFC2C1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBBB8D936893699393C1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BB7B2D512D512D512D512D9FBBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC8FD2DFFA0C198C198C198C198C198C198%C198C198C198C198C19893688D688D688D92C198C198C198C198C198C198%C198C198C198C198992C2D2D2D2C2D2D2D2C9F98C198C198C198C198C198%C198C198C198C198C198C2FD2BFFC2C198C1BBC198C1BBC198C1BBC198C1%BBC198C1BBC1989969936893699392C1BBC198C1BBC198C1BBC198C1BBC1%98C1BBC198C1BB9F2D512D2D2D512D2D51C1BBC198C1BBC198C1BBC198C1%BBC198C1BBC198C1BBC8FD29FFA0C198C198C198C198C198C198C198C198%C198C198C19899688D688D688D68C198C198C198C198C198C198C198C198%C198C198C198C19875262D2C2D262D2C5198C198C198C198C198C198C198%C198C198C198C198C198C9FD27FFCAC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC19393699368936999BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC199512D512D512D512DC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBCFFD26FFC198C198C198C198C198C198C1%98C198C198C198C198C1988D688D688D688D92C198C198C198C198C198C1%98C198C198C198C198C198C198C1502D2D2D2C2D2D2D98C198C198C198C1%98C198C198C198C198C198C198C198C199FD25FFC9BBC198C1BBC198C1BB%C198C1BBC198C1BBC198C1BBC198BB6993689369936893BBC198C1BBC198%C1BBC198C1BBC198C1BBC198C1BBC198C1BB512D512D2D2D5151C198C1BB%C198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC1C2FD24FF98C198C198%C198C198C198C198C198C198C198C198C198C1988D688D688D688D68BB98%C198C198C198C198C198C198C198C198C198C198C198C12C2D262D2C2D26%7598C198C198C198C198C198C198C198C198C198C198C198C198C1CAFD22%FFC2C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1939368%936993689393C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC175%512D512D512D57BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BB%C1BBC1BBC9FD22FFC198C198C198C198C198C198C198C198C198C198C198%C198C19899688D688D688D688D92C198C198C198C198C198C198C198C198%C198C198C174512D2D2C2D2D5198C198C198C198C198C198C198C198C198%C198C198C198C198C198C199FD21FFCFBBC198C1BBC198C1BBC198C1BBC1%98C1BBC198C1BBC198C1BBC19893699368936993689393C198C1BBC198C1%BBC198C1BBC198C1BBC198C199512D512D2D2D7599C198C1BBC198C1BBC1%98C1BBC198C1BBC198C1BBC198C1BBC198C1BBC1C9FD20FFA0C198C198C1%98C198C198C198C198C198C198C198C198C198C198C19893688D688D688D%688D689998C198C198C198C198C198C198C198C150512C2D262D509998C1%98C198C198C198C198C198C198C198C198C198C198C198C198C198C198C8%FD20FFC8BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC199936893699368936993689399C1BBC1BBC1BBC1BBC1BBC1997B2D51%2D512D7B99C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1C1FD20FF98C198C198C198C198C198C198C198C198C1%98C198C198C198C198C198C19893688D688D688D688D688D689998C198C1%98C198512C2D2D51507574C192C198C198C198C198C198C198C198C198C1%98C198C198C198C198C198C198C198C198C1FD20FFC198C1BBC198C1BBC1%98C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBBB6E9369936893%699368936993689393BB98C1BBC198C199BB929399B598C1BBC198C1BBC1%98C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBFD20FF%98C198C198C198C198C198C198C198C198C198C198C198C198C198C198C1%98C198C19893688D688D688D688D688D688D688D688D688D688D688D68C1%98C198C198C198C198C198C198C198C198C198C198C198C198C198C198C1%98C198C198C1FD20FFC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC19999939368936993689369936893%6993689369936899BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBFD20FF98C198C198C198C198C198C1%98C198C198C198C198C198C198C198C198C198C198C198C198C198C198BB%9899929992999293688D688D688D688D68BB98C198C198C198C198C198C1%98C198C198C198C198C198C198C198C198C198C198C198C1FD20FFC1BBC1%98C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1%BBC198C1BBC198C1BBC198C1BBC198C1BB936893699368936993689999C1%98C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1%BBC198FD20FF9FC198C198C198C198C198C198C198C198C198C198C198C1%98C198C198C198C198C198C198C198C198C198C198C198C198C19899688D%688D688D688D688D689392BB98C198C198C198C198C198C198C198C198C1%98C198C198C198C198C198C1FD20FFC9BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC199BBFD04936893699368939399BBC1BBC1BBC1BBC1BB%C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1C2FD20FFC9C198C198C198%C198C198C198C198C198C198C198C198C198C198515051519998C198C198%C198C198C198C198C198C198C198C198C198C198C198C198C198C198C198%C198C198C198C198C198C198C198C198C198C198C198C198C198C198C9FD%21FF99C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198512D2D%2D512D9F98C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1%BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC1%98C1BBC198C1FD22FFC898C198C198C198C198C198C198C198C198C198C1%98C1985126517499262D50992C5150C12C5174512C5198512C5150517451%5075505174C198755051509F989F7451507550C198C198C198C198C198C1%98C198C198C198C198C198C1A0FD22FFCAC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC12D5151C1BB7B2D5175512D51BB512D7B2D512D9F%2D512D5151572D512D512D51BB572D512D5151C12D512D51759FBBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBFD24FFA0C198C198C198C1%98C198C198C198C198C198C198C1982D2C7598C1502D2D992C2D51C12C2D%74512C2D98C1502D2D9974512D51502D2D752C2D74752C2D742D2C51749F%98C198C198C198C198C198C198C198C198C198C198C198C8FD25FF9FC1BB%C198C1BBC198C1BBC198C1BBC198C1BBC198C12D2D519F75512D51BB512D%7BBB2D2D9F752D2DC199512D51BBC15151759F2D51752D2D9F992D2D9F2D%2D2D5151C198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1FD26FF%CA98C198C198C198C198C198C198C198C198C198C198512C2D502D2C2D50%C1502D269F2C2D74752C2D98752C2D74C198512675742D269F2C2D749F2C%2D749F502D262D98C198C198C198C198C198C198C198C198C198C198C1A7%FD27FFC9BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC175512D512D51%2D5199512D512D512D9F75512DC12D512D57519F5151759F2D5199512D51%51512D9F2D512D5151C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%C2FD29FFC298C198C198C198C198C198C198C198C198C198C1502D2C2D51%2D2C5174512C512D2D747B2D2D742D2D2D2C2D50512C75982D2C9F98512C%2D2D7574512D2D2C9F98C198C198C198C198C198C198C198C198C198C1C1%FD2AFFCFC2BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C175%7551C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198%C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC1C1FD2C%FFCAC198C198C198C198C198C198C198C198C198C198C198C198C198C198%C198C198C198C198C198C198C198C198C198C198C198C198C198C198C198%C198C198C198C198C198C198C198C198C198C198C198C19FFD2FFFC8BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1C1C1BBC1C1C1BBC1C1C1BBC1C1C2%BBC1BBC1BBC1BBC1BBC8C1C1BBC1C1C2BBC1BBC1BBC1BBC1BBC1C1C1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1C2FD31FFC898C198C198C198C198%C198C198C198C19FCFC9C29FC9CFC8CACF98C198C9CAC1A0C199C1A0CAC9%C2C9C998C198CFCAC1CAC1C2C19FC9C1C29FCFC9C198C198C198C198C198%C198C198C198C1A0FD33FFC999C1BBC198C1BBC198C1BBC198C1BBC2C9C2%C9CAC2CFC9CF98C199C1C9C1C9CACAC8C8CFC8CFC9C898C1BBC1CAC1C1FF%C2C9BBC9CAC9FFC9C9C1BBC198C1BBC198C1BBC198C1BBC198C1C9FD36FF%9FC198C198C198C198C198C198C198CF9FC9CAC8FFC1C9C2988D98C8A0CF%98C8A7C9CAC8CAC1CAC1929398C9A0C9CAC9A0C1CACFA0CFC9CF9FC198C1%98C198C198C198C198C198C1CAFD38FFC9C1BBC1BBC1BBC1BBC1BBC1BBC1%C2C9FFC9C2CFC9C2C9C199C1C1FFCFC8CAC8FFC9C2C8C1C9C2C199C1C1FF%CAC9C9FFCACFC9CFFFC2C2C9BBC1BBC1BBC1BBC1BBC1BBC1C1CAFD3BFFCF%C898C198C198C198C198C19FFFA0C99FC8CAC1CAC998C198C9CAC1C2C199%C999C899C2CFC298C198CAC9C998C2A0C1C2C1A0C29FCFA0C198C198C198%C198C198C1A0FD40FFC2C1BBC198C1BBC198C1BBC198C1C1C198C1BBC198%C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC198C1BB%C198C1BBC198C1BBC199C9FD43FFCAC999C198C198C198C198C198C198C1%98C198C198C198C198C198C198C198C198C198C198C198C198C198C198C1%98C198C198C198C198C198C1C2FD48FFC9C8BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1BBC1C2C9FD4CFFCFC8C198C198C198C198C198C198C198C1%98C198C198C198C198C198C198C198C198C198C198C198C198C198C198C1%9FC9CAFD52FFC9C8C1C198C1BBC198C1BBC198C1BBC198C1BBC198C1BBC1%98C1BBC198C1BBC198C1BBC198C1BBC1C2C9FD59FFCAC9A0C298C198C198%C198C198C198C198C198C198C198C198C198C198C198C19FC8A0CFFD61FF%CACFC9C9C2C8C1C1BBC1BBC1BBC1BBC1BBC1BBC2C1C8C8C9C9FDFCFFFDFC%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDCFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-08-28T08:24:17-06:00</xmp:CreateDate>
         <xmp:ModifyDate>2009-08-28T08:24:17-06:00</xmp:ModifyDate>
         <xmp:MetadataDate>2009-08-28T08:24:17-06:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>176</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYqhZ9W0q3JFxewQkdfUlRf1nKZanHHnKI+Ibo6fJLlGR+BQEvnLy&#xA;vGSG1KA0/lbn0/1a5jy7T04/jDfHs7UH+AqP+PPKX/VxX/gJP+ach/K2m/n/AGH9TP8AkrUfzPu/&#xA;W7/HnlL/AKuK/wDASf8ANOP8rab+f9h/Uv8AJWo/mfd+tWi85eV5CAupQCv8zcOv+tTJx7T05/jD&#xA;CXZ2oH8BR8GraVcEC3vYJienpyo36jmRHU45cpRPxDRLT5I84yHwKKy5pdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdiqB1LXNI0xeV/dxwdwjGrn5IKsfuzHz6vFi+uQH47m/D&#xA;pcmX6IksR1P82NPjqmnWj3B/35KfTWvsByY/hmmz9vwG0I379ncYewZn65V7t2MX35keaLqojmS1&#xA;Q/swoK0/1n5N9xzVZe2dRPkeH3O0xdjaeHMcXvSK71bVLwn61eTT17SSMw+4nMDJnyT+qRPvLsMe&#xA;nxw+mIHwQmUtrsVdirsVdirsVRdpq2qWZH1W8mgp2jkZR9wOXY8+SH0yI9xasmnxz+qIPwT2x/Mj&#xA;zRa0EkyXSD9mZBWn+snFvvOZ+LtnUQ5ni97r8vY2nnyHD7mT6Z+bGnyUTUbR7c/78iPqLX3B4sPx&#xA;za4O34Haca927q83YMx9Er9+zLtN1zSNTXlYXcc/copo4+aGjD7s3ODV4sv0SB/Hc6fNpcmL64kI&#xA;7MhodirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqWa35k0jRYud9NRyKpAnxSN8l/idsxNVrcW&#xA;AXM793VytNosmc1AfHo831z8y9Zvi0Vh/oFudgV3lI93/Z/2P35zOq7by5NoeiP2/P8AU9LpexcU&#xA;N5+uX2fJiMksksjSSuXkY1Z2JJJ9yc0xJJsu4EQBQW4EuxV2Koa81Kws1rdTpF3Ck/Efko3OW48M&#xA;5/SLcbPrMWH65Afju5pNceeNKQkRRyzHxoFX8TX8Mzodl5DzIDqMvtHgj9IlL7Px8kIfP612sSR7&#xA;y0/40y3+Sf6X2ftcQ+0/+1/7L/jrh5/Wu9iQPaWv/GmP8k/0vs/ao9p/9r/2X/HUVB550tyBLFLE&#xA;fGgYfga/hlUuy8g5EFysftJgP1CUftTaz1nS7ygt7lHc9EJ4t/wLUOYeTTZIfUHa6ftDBm+iQJ7u&#xA;vyKNyhzHYq7FV0cskUiyROUkU1V1JBB9iMIJBsIMQRRZdof5l6zYlYr/AP0+3GxLbSgez/tf7L78&#xA;3Ol7by49p+uP2/P9bp9V2LinvD0S+z5PSNE8yaRrUXOxmq4FXgf4ZF+a/wARtnTaXW4s4uB37urz&#xA;Wp0WTAamPj0TPMtxXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWC+bvzGjsy9jo5WW6FVluvtJGfBOzN&#xA;+Hzzn+0e2RD0Yt5d/d7nf9n9jmfry7R7u95lcXNxczPPcSNLNIavI5LMT7k5y85mRsmy9PCAiKAo&#xA;KeQZOxV2KuwqkeqecNBseUbzmeXcGOD4iP8AZVCj78zcOgyz3qh5tgwSkGLW+s295celpehfWpzu&#xA;0k7tKT7tXYffm0nhlAXPJwjyFOHHsLTQ3kLPnv8AeyG00fWZOLXFppdshPxRpAXangTUD7s189Rj&#xA;HKWQ/wCcyOh0o5Y4/wClj+pNJfL+iyijWcQ/1F4f8RpmNHV5R/EXGn2Xppc4R+G33Jbd+R9LlBNu&#xA;8lu3YV5r9x3/ABzKx9p5BzALrs/s5hl9BMftH4+LHNT8rapYqZOAngG5kj3oPdeubLBrseTbkfN5&#xA;/WdjZ8IuuKPeP1JR0zMdSnek+bNRsiEmY3Nv3Rz8QH+S3X78wdRoIT3HpLudD23mw7S9cPPn8Czj&#xA;T9Rtb+2FxbPyQ7EHZlPgw8c0ObDLHKpPaaXV488OOB2+5E5U5LsVdiqpb3NxbTJPbyNFNGapIhKs&#xA;D7EZOEzE2DRYzgJCiLD0zyj+Y0V2UsdYZYrk0WK72VHPg/ZW9+nyzqOz+2RP0Zdpd/f7+55jtDsc&#xA;w9eLePd3M7zoHQOxV2KuxV2KuxV2KuxV2KuxV2KvOfzA87uHk0bTJKAVW8uFO9e8an/iR+jOZ7X7&#xA;UO+LGfef0frek7J7M5Zcg9w/T+p51nNPSOxV2KuxVp3REZ3IVFBZmOwAG5JwgWaCvMvM/nC61KV7&#xA;e1Yw2AJAA2aQeLe3tnS6PQRxi5bz+5zsWEDc80o0bS5dU1GGzjPH1DV368UG7HMrUZhigZFsnPhF&#xA;vWtM0uy021W2tIwiD7TftMf5mPc5yubNLJLik6+UjI2UXlLF2KuxV2KsX80eWopIpL+zQJKgLTRK&#xA;NnA6sB4/rzbaHWkEQly6PM9s9kRlE5cYqQ5jv8/f9/vYVm7eOTTy7qklhqUbcv3EpEcy9qE0r/se&#xA;uYuswDJA945Oz7K1hwZgf4ZbH8eT0nOYfRHYq7FXYq7FXov5f+d3Lx6NqclQaLZ3DHevaNj/AMRP&#xA;0Z0vZHah2xZD7j+j9Tzfa3ZnPLjHvH6f1vRs6Z5t2KuxV2KuxV2KuxV2KuxVjXnzzIdG0jhA3G+u&#xA;6xwEdVA+2/0A7e+artbW+DjqP1y5fpLtOytH42Sz9Mef6njJJJqdyepzintHYFdirsVdiqR+dZpI&#xA;vLV2Y9i3BGI/lZwD942zO7OiDmjbbhHqDynOodgyb8vZ4otf4uaGaF446/zVVv1Kc13asScW3QtG&#xA;oHpemZzTguxV2KuxV2Kuwq8nuRGLmURf3Ydgn+rXbOuhfCL5vlmYDjNcrK6xt5Li9ggjFXkdVH39&#xA;fowZZiMST0DPTYjkyRiOZL1bORfUHYq7FXYq7FXAkGo2I6HCr2byH5kOs6RwnblfWlI5yerA/Yf6&#xA;QN/fO17J1vjY6l9cef6C8X2ro/ByWPply/UyXNq6t2KuxV2KuxV2KuxV2KvF/P8Aqrah5luQDWK0&#xA;/wBHjH+p9v8A4eucP2tn8TOe6O3y/a9t2Tg8PAO+W/4+DHM1jsnYq7FXYq7FUPqNlFfWM9pL9iZC&#xA;pPgex+g75ZiyGEhIdExNG3j2paddadeSWlynGSM9ezDsy+xzrsWWOSIlHk7KMhIWFGGaWGVJomKS&#xA;xsGRx1BBqDk5RBFHkki3pnlrzhZ6nGkFyywX/QodlkPih/hnN6zQSxm47x+5wcmEx9zI81zS7FXY&#xA;q7FWM+ZfNEMMT2dk4kuHBWSVTUID1of5v1ZtNFoTI8U+X3vN9r9sxhE48RuR5nu/b9zD7SzuruUR&#xA;W0TSueyjp8z2zdZMkYC5GnksGnnllwwBJZz5c8tJpo+sTkPeMKbfZQHsPfxOaHWa3xfSPp+97Xsn&#xA;sgaf1z3yfcnua93jsVdirsVdirsVZH5A1VtP8y2wJpFd/wCjyD/X+x/w9M2fZOfw847pbfP9rre1&#xA;sHiYD3x3/Hwe0Z3DxLsVdirsVdirsVdirsVfPFxM008kzfaldnb5sa55tKVknvfRoR4QB3KeRZOx&#xA;V2KuxV2KuxVLtZ0HT9Xg9O6T41/upl2dD7Hw9jmRp9TPEbizhMx5PP8AV/JGs2BLwp9cg7PEDyA9&#xA;06/dXN/g7Rxz5+k+f63MhnifJj5DKxDAqw2IOxBzPbk80vznrlgAnqi5hHSOarUHs32vxzCzdn4s&#xA;m9UfJplgiWR2n5k2LAC7tJIm7mMhx+PA5rsnZEh9JBaTpj0KNl876FNCVhvjaymlHkgeSm/8q/1y&#xA;mPZ2UHePEPeA4+bTZTGoHhPfz+ywld3rOl3SlbnzDI8Z2MUVtJGCPeg3+nMvHgnD6cQvzkC6nN2L&#xA;qcu08pruAA/St0hPKt1fJa2kF1fSndmeiRqo2LGhU0FfDDnnqIx4pGMR9rHH7M4MYuVy95/VTMtP&#xA;t/QtEQwxQPT40h+xX22GabLPildk+92sMOPHtjFR91InKmTsVdirsVdirsVdiqpbzNDPHMv2onV1&#xA;+amuSjKiD3MZx4gR3vofPSXzl2KuxV2KuxV2KuxV2KvnieJoZ5IW+1GxRvmppnm0o0SH0aMrAPep&#xA;5Fk7FXYq7FXYq7FXYq7FULd6Xp14P9Kto5j/ADOoJHyPXLceacPpJDISI5JTP5E8tyklYGiJ/kkb&#xA;/jYtmXHtPMOt/BsGeSFb8udCJqJblR4B0p+KHLB2tl7o/b+tl+Zklev/AJftDCs2kc5uIpLC5Bc/&#xA;5Smij6MytL2pZrJt5s8eo/nMOlhlhkMcqNHIuzI4KkfMHNvGQIsOSDaO0HWZtI1BbuNRIOJSWM7c&#xA;kNCRXt0yjU6cZYcJY5IcQp6Np3nLQL1R/pAt5D1jn+Cn+yPw/jnP5ez8sOljycKWGQTmOWKVeUTq&#xA;6/zKQR+GYZiRzal2RV2KuxV2KuxV2KqkETTTxwr9qRgi/NjTJRjZAYylQJ7n0PnpL5y7FXYq7FXY&#xA;q7FXYq7FXi/n7S2sPM10QKRXR+sRnx9T7X/D1zhu1sHh55d0t/n+17bsrP4mAd8dvl+xjma12TsV&#xA;dirsVdiqQeYvMradItrbIJLphUlqkKD02HUnNjo9F4g4pbRdF2t2udORCAuf3ftS6TzH5j06SJtS&#xA;t1MMu4FACR3oVJofY5kjR4MgPAdw66Xa2s05BzRHCfx06+9kZ1nTFhhlkuEjWdQ8fMgEg5rPy2Sy&#xA;ALp6L+UMAjGRkAJCxa+XU9OhjjkluI0jmFYmLABht0+/BHBMkgA7M56zDACUpACXLzWzavpcL8Jb&#xA;qJHoDxLCtCKj8MMdPkkLESxya/BA1KcQfe3Pq2mW8rRT3Uccq05IzAEVFRghp8khYBIXLrsOOXDK&#xA;cRIebQ1nSmjaUXcRjQgM3IUBatB9NMJ02S64TaB2hgMTLjjQ80Pc6j5cnjBuZraaMniA/F9/ka5Z&#xA;DDmifSJBH8p6cC/Ej81GXy75UaH6w9rAsFOXqg8Eoe9QQMlHVZ74QTbmfmwI8fF6e+9kLb6N5HuZ&#xA;PTgjgeQmgQSNU/Ict8tnn1URZuvc04u1MeQ1GYJ96MS08s6JKJFWG0mZSASTzKk79STTbKTPPmFb&#xA;yCdTr8ePbJMBHw6lp85QQ3MbmQkIFYEkqKkU9hlEsM43YOzDHrMM64ZRN8t0TlTkuxV2KuxV2Ksj&#xA;8g6W1/5mtSRWK1P1iQ+Hp/Z/4embLsnB4mePdHf5ftdb2rn8PAe+W3z/AGPaM7l4l2KuxV2KuxV2&#xA;KuxV2KsY8/eWzrGk+rbryvrOrwgdXU/bT6aVHvmp7X0XjY7j9cfxTteydb4OSj9MvxbxvOKezdir&#xA;sVdirsVYJrDLF5yWSf8AuxLAxJ6cQF3+jOg0wvTUOdH9Lw+vIj2jcuXFD5bIjzhrNtcx/URDLHcQ&#xA;TcmMiqAVCsNiCTvUEZX2dppRPHYohyO3u0IZB4XDITjLr7j59UBqtoE8v6VO4PrMHSpJpwLM67f7&#xA;LL8GS80wOTg63BWlwyP1bj4WSPvVfMXH9DaHQ1/cv+pMjo/73J7/ANbb2rX5fB/VP+9UvNNvFFc2&#xA;siAhpreN5CSTUgce/suS0MyYyB6SLT2zijGcCOcoRJ+5H+dYdMhkT04v9PuD6ksnJjRRt9mtNz7d&#xA;sx+zZZJDc+gOf7Q48MCOEfvZbk2eX3b/AKFabQILbyoxnU/WVHrtuRRzQAEey7ZCOrMtRt9PJuyd&#xA;mRx6AmQ9f1fH9gSSHTbd/Lk+oGvrxTiMb7caL2/2WZ0sxGcQ6GLpYaSB0csv8QnXw2/W6+uJzoWm&#xA;wFj6VZmp2JD7fdXHFAeLM9dvuXU5ZHTYo/w+r70V5j06006PTpLT4JHjLOwYkll4kP8ASTlWjzSy&#xA;GYlytye1dJjwDEcexI3+zdvXrPUFvv0nJD69u6xuxIJQfAKq4Bqu+OkyQMPDBo7p7TwZRl8Yx4om&#xA;j5chse5PvKc+nXFrIbe2EEkUhZkJ5hS6gVRjuAQvTNf2hGcZDiNgj7u93nYeTDkgeCPCYy99WOh8&#xA;6T/Nc752KuxV2KuxV7J5B8tnR9J9W4XjfXlHmB6oo+wn0VqffO17I0Xg47l9cvxTxna2t8bJQ+mP&#xA;4tk+bZ1TsVdirsVdirsVdirsVdirzX8wPJLI8msabHWJqveW6jdT3kUeH83h1+XL9r9mUTlxjbqP&#xA;0vTdk9p2BiyHfof0PPs5x6J2KuxV2KpVrXl601UK7sYp0FFlUV28CO+Zmm1ksWw3Dq+0eysepon0&#xA;yHVK28kFrZ0e8MsoH7hmTiFPgfiY8T+GZQ7T9ViNDq6w+ztwIM7PTbl9p2VovLN7Nph0+/uFaOMh&#xA;rWRKlkIBFDUCq0PTIS1sBk44Dc826HY+WeHwssgQN4kcx+xD/wCAo+ADXrFhXf0xSnsOWWfyqf5v&#xA;2uP/AKGRW+Q/L9qO1bytHqDwMbgx+hEIgAoNQvfqMo0+uOMHa7NudrexRnMTxVwxrkpal5R+v30l&#xA;3JeMrORxXgDxA2AHxZLD2h4cBER+1q1fYXj5TkM+fly+1db+U2ijuEe+klE8Rioy/Zqwblux/lxn&#xA;r7IIiBRtOLsMxEgchPFGuXmD3+S+LytGmjS6Z9YJEsol9XjuKcdqV/ycjLXE5RkrkKbIdiiOnOHi&#xA;+qV3Xu8/Jt/Klq+kxWEkrFoWZo5wACCxqRSvTEa+QyGYHPosuxISwDETvEkiXvQ1v5KjE0b3d491&#xA;HFQJEV4ig6LUs23sMsn2maIjHhJcfF7PDiByTMwOlfZzOytqHlWW6u554r+SBbj+9iC1BFAKbMu2&#xA;3fIYdeIxAMQabdV2LLJklKOQx4+Yr9oR+jaNb6VbtFExd3PKSRtiSOm3gMx9TqZZZWXP7P7Phpoc&#xA;MdyeZTDMZz3Yq7FXYq9B/L/ySzvHrGpR0iWj2duw3Y9pGHh/L49fn0fZHZlkZcg26D9Lzva3adA4&#xA;sZ36n9D0rOoeZdirsVdirsVdirsVdirsVdirsVYD5u/LhbhnvtFUJMatLZ9FY9zGein26fLOd7R7&#xA;G4rni5/zf1fqeg7P7Y4ahl5d/wCt5rNBNBK0MyNFKho8bgqwPuDnMSiYmjsXpoyEhYNhZkWTsVTX&#xA;y1bW1zqqwzRLOzRy/V4HJVHmCExqxUg7t75l6OEZZKIvY0O81s4utnKOOwa3FnuF7pva+XbFpI76&#xA;WIrDLEky2RJoJJrowxRVPxFeIJPfMuGkiSJkbEXw+ZnwgOHPWSAMAdwa4vIR4iUbrGiaHYXGqLBZ&#xA;C4uraNZHtC8gSOFncGSM1DFgnpseoFTl+p02LHKYEblEct9hZ3Hw4T15lo0+py5BC5VGR57bmhsf&#xA;jxd3Rhfly70i98xxafO4ZYZY1u425IKP9mrU+ye5Ga7Bg9UDP6JF2+q444jKPOjTIptE06SVBeq+&#xA;m3t7P9WtrOBfUjjZCI3d+bcuLSVoAfvzIlpoE+r0SlKgBuB0JNm+bgx1MwPT64xjZJ2J6gCvJEWP&#xA;k+ziu4Vv2aRSLVZI1IX99c3Ri4AjqBEjNlmLs+IkOP8Ao/OUqr/Sglry9oSMTwf0vlGN/eadq+ja&#xA;Vp1pqQtrZbqeBo1uFaVma19VDTiycQ3GTYkj2wajT48cZ0OIir3+mx5c9/1Lp9RkyShxHhButvqo&#xA;/Zt+tjHla60nUdeS0dhIsM3o3Eb8419Qg8FZiB8Jam4zEwYKyQ4x6Zfa7HWccMRI50yKLy2LzTdY&#xA;1B7NrOW2kSOC3TmY1aNlFwCW5HoaipzJjo+PHkmY8JiRQ3r+k4MtZwTxwEuISBs9d/pdpflSG+8w&#xA;axZqr/VbE3CQ0qTzDmOEEgeO5+WHDoBkzZIC+GHFXvugufXnHhxy/ilw37qsoiw8racBYXgJn9eM&#xA;I1ncVVDdS27SQqHXhVWdenUbeOTxaKHplzscj/OMSY77cy15ddP1R5UeY/miQB29zErtla6lZIfq&#xA;6l2pACTw3+zVt9vfNTM3I7V5O2xioje/PvUsgzdiq+GCaeVYYUaWVzRI0BZifYDJRiZGhuWMpCIs&#xA;mg9K8o/lwtuyX2tKHmFGis+qqexkPRj7dPnnT9ndjcNTy8/5v6/1PM9odscVwxcu/wDUz7Oiefdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVSnXvK2j63HS8hpMBRLmP4ZF+nuPY5havQYs49Q37+rmaXXZM&#xA;B9J27ujzfXfy31vTy0tmPr9sO8YpKB7x71/2Nc5nVdjZce8fXHy5/J6XS9s4sm0vRL7PmxN0dGKO&#xA;pVlNGUihB9xmoIp2wN8kTpl3BaXsdxNB9YSM19MOYzX9llcVoVO/Q5ZhmISBIv7GvNjM4kA19qbz&#xA;+c725ltvXgj+r2939baNKqzgStKI2bf4V9Rgu3fMyXaMpEWBwiXF797r7TThx7NjEGibMeH3bVf2&#xA;BdL5vV7+a7+oqCYWgtFEjfulcScuR39TkZSSD3pSmMtfczLh6UN+V38+aI9n1AR4utnbny+XJILW&#xA;SGK5SWWFZkUgyRMSAyjtUb5gwkAQSLHc7CcSQQDRTy6856jLO0sccacSDaPIPVlg+BUJSQ0+JggJ&#xA;JHXcUOZuTtGZNgDy6mO1bH4fPcU4OPs6AFEnz6CW97j4/LZRXzXqPp6bE6o0emypMuxDSmJuSCRq&#xA;78akD55Aa6dQG3oIPvrlbM6CFzI/jBHuvnShZaytta30f1cPcXiNH6/NhxWQgsCu4b7NR4HK8Wo4&#xA;YyFby2v8c2zLp+KUTe0enuQNnJBBcrLLCJo61kjqV5ClPtDcHwOUwkAQSLDdkiTGgaKd3nnPUJr5&#xA;LqBFgCet+6JLhvXHFi9acjxAFfauZuTtCZlxDbn58+/4OFj7OhGPCd+Xly7vitu/OetXNWZ1jf6w&#xA;lyhiHFVaMswUL4cnLGu5PXBk7Ryy616gdvK/1px9nYo+fpI38/7Fsvmq7uriza+iWa1swfTtoyYh&#xA;Vv2ww5UcbUPt0wS10pGPGLjHoNvj70x0MYiXAalLqd/h7kr1G8a9v7m8ZBG1xK8pRegLsWp+OY2b&#xA;JxzMu825WHHwQEe4UoIjuwRFLMxoqgVJPsMrAtmTXNlmhflvreoFZbwfULY95BWUj2j2p/sqZt9L&#xA;2Nlyby9EfPn8nU6rtnFj2j65fZ83pGg+VtH0SOlnDWYij3MnxSN9PYewzptJoMWAekb9/V5rVa7J&#xA;nPqO3d0TbM1w3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYql2qeXtF1UH69aJK9KCWnGQfJ1o&#xA;345i59Hiy/XEH7/m5ODWZcX0SI+75MQ1L8prZqtpt60R7RTjmP8Ag1oR9xzTZ/Z8f5OXz/X+x3GH&#xA;t+Q+uN+5jN/+Xnmm0qRai5QftwMH/wCFPF/+FzVZeyNRD+Hi934t2mLtfTz68Pv/ABSRXNhfWrcb&#xA;q2lgI7SIyf8AEgMwJ4pQ+oEe9z4ZYT+kg+5D5W2OxV2KuxV2KuxVEW1hfXTcbW2lnJ7Roz/8RByy&#xA;GKU/pBPua55YQ+oge9PbD8vPNN3Qm1Fsh/bnYJ/wo5P/AMLmfi7I1E/4eH3/AItwMva+nh14vd+K&#xA;ZNpv5TWy0bUr1pT3igHAf8G1SfuGbXB7Pj/KS+X6/wBjq83b8j9Ea97L9L8vaLpQH1G0SJ6UMtOU&#xA;h+btVvxzc4NHixfRED7/AJunz6zLl+uRP3fJMcynGdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVcQCCCKg7EHFUDPoOh3FfX0+3kJ6s0SE/fSuY89HhlzhH5ByIavLHlKXzKBk8j&#xA;+VJDVtOjH+qXXr/qkZjnsrTn+Afa3jtPUD+MqP8Ayrzyf/1b/wDktP8A815D+R9N/N+2X62f8r6n&#xA;+d9kf1O/5V55P/6t/wDyWn/5rx/kfTfzftl+tf5X1P8AO+yP6laPyP5UjNV06M/6xdun+sTkx2Vp&#xA;x/APtYHtPUH+Mo6DQdDt6ehp9vGR0ZYkB++lcyIaPDHlCPyDRPV5Zc5S+ZRwAAAAoBsAMyHHdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CF7F11740720681191099C3B601C4548</stEvt:instanceID>
                  <stEvt:when>2008-04-17T14:19:07+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0080117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T12:18:29-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T12:59:33-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0BC3BD25102DDD1181B594070CEB88D9</stEvt:instanceID>
                  <stEvt:when>2008-05-28T17:02:32-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811BB1DBF8F242B6F84</stEvt:instanceID>
                  <stEvt:when>2008-06-09T15:05:10-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811BB1DBF8F242B6F84</stEvt:instanceID>
                  <stEvt:when>2008-06-09T15:05:47-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811ACAFB8DA80854E76</stEvt:instanceID>
                  <stEvt:when>2008-06-11T14:30:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811A613A6C79BD93613</stEvt:instanceID>
                  <stEvt:when>2009-08-28T08:24:17-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:94782b2b-b887-a548-af0c-54e93ec08a6c</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F117407206811ACAFB8DA80854E76</stRef:documentID>
            <stRef:originalDocumentID>uuid:5B20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:5B20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:FC7F117407206811A613A6C79BD93613</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FC7F117407206811A613A6C79BD93613</xmpMM:InstanceID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>8.500000</stDim:w>
            <stDim:h>11.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Red</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Green</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Magenta</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=90 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000004</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 Y=90 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.000001</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>30.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>30.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 Y=45 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>45.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>14.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=25 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 Y=35 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>35.000004</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 Y=50 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>5.000001</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=60 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 Y=65 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>55.000000</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>39.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 Y=65 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>30.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 Y=80 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 Y=90 K=35</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>89.999405</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>79.998795</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>69.999702</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>59.999104</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>39.999401</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>29.998802</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>19.999701</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>9.999103</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>4.998803</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Crosses Color Group</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=70 Y=80 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=50 Y=80 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=65 M=10 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>65.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=90 Y=10 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>10.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=85 Y=60 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>85.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -330 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 330 li
479.411 330 li
479.411 0 li
cp
clp
[1 0 0 1 0 0 ]ct
419.37 165 mo
419.37 224.814 338.933 273.303 239.705 273.303 cv
140.479 273.303 60.0425 224.814 60.0425 165 cv
60.0425 105.188 140.479 56.6968 239.705 56.6968 cv
338.933 56.6968 419.37 105.188 419.37 165 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.00390601 .5 .976563 0 cmyk
f
288.629 211.756 mo
288.593 211.756 li
286.163 211.756 284.926 209.619 284.926 204.625 cv
284.926 203.436 284.926 200.645 285.745 199.195 cv
286.384 198.047 287.424 197.393 288.629 197.393 cv
290.065 197.393 290.933 198.34 291.146 198.635 cv
291.953 199.596 292.361 201.537 292.361 204.537 cv
292.361 209.566 291.242 211.738 288.629 211.756 cv
cp
294.227 193.146 mo
292.413 192.455 290.292 192.311 288.808 192.311 cv
288.629 192.311 li
280.792 192.363 276.678 196.641 276.678 204.664 cv
276.678 208.156 277.34 210.75 278.785 212.85 cv
280.063 214.787 282.33 217.018 288.499 217.018 cv
288.629 217.018 li
296.47 216.969 300.453 212.783 300.453 204.564 cv
300.453 197.146 297.054 194.27 294.227 193.146 cv
.714844 .339844 1 .214844 cmyk
f
214.245 193.264 mo
214.155 193.701 213.203 197.43 213.129 197.885 cv
213.057 198.266 213.477 198.6 213.862 198.6 cv
216.168 198.6 216.255 198.635 216.255 200.951 cv
216.255 215.791 li
216.255 216.193 216.584 216.525 216.986 216.525 cv
224.003 216.525 li
224.423 216.525 224.712 216.213 224.712 215.791 cv
224.712 193.279 li
224.712 192.846 224.423 192.549 224.003 192.549 cv
224.003 192.549 215.36 192.549 214.956 192.549 cv
214.556 192.549 214.337 192.877 214.245 193.264 cv
f
187.417 192.549 mo
187.04 192.549 186.798 192.801 186.703 193.264 cv
186.632 193.717 186.377 195.166 185.574 197.885 cv
185.471 198.266 185.868 198.6 186.25 198.6 cv
188.571 198.6 188.643 198.689 188.643 200.951 cv
188.643 205.994 188.02 211.994 190.619 214.586 cv
192.04 216.193 193.998 217.018 196.392 217.018 cv
199.248 217.018 200.994 215.883 202.472 214.752 cv
202.472 215.23 202.458 215.791 202.458 215.791 cv
202.458 216.193 202.787 216.525 203.169 216.525 cv
209.749 216.525 li
210.152 216.525 210.461 216.193 210.461 215.791 cv
210.461 193.264 li
210.461 192.859 210.171 192.549 209.749 192.549 cv
203.097 192.549 li
202.713 192.549 202.382 192.846 202.382 193.244 cv
202.382 193.244 202.458 207.465 202.365 209.566 cv
202.365 209.568 200.444 210.838 199.442 210.838 cv
196.975 210.838 196.628 208.189 196.628 205.303 cv
196.645 193.264 li
196.645 192.877 196.335 192.549 195.936 192.549 cv
195.936 192.549 187.819 192.549 187.417 192.549 cv
f
260.069 194.629 mo
260.069 194.098 260.052 193.318 260.052 193.264 cv
260.052 192.877 259.744 192.549 259.34 192.549 cv
251.423 192.549 li
250.821 192.549 250.512 192.721 250.311 193.092 cv
250.132 193.498 248.3 197.316 248.167 197.539 cv
247.993 197.922 248.167 198.6 248.829 198.6 cv
248.889 198.6 249.032 198.6 249.195 198.6 cv
252.033 198.6 252.064 198.6 252.064 200.951 cv
252.033 215.83 li
252.033 216.213 252.356 216.541 252.741 216.541 cv
259.431 216.502 li
259.818 216.502 260.147 216.193 260.147 215.791 cv
260.147 215.752 260.147 203.021 260.124 199.906 cv
260.96 199.344 261.91 198.719 263.123 198.719 cv
263.744 198.719 264.241 198.908 264.605 199.314 cv
265.421 200.135 265.535 201.666 265.514 202.502 cv
265.495 203.553 265.535 215.83 265.535 215.83 cv
265.535 216.227 265.867 216.541 266.261 216.541 cv
266.321 216.541 272.475 216.502 272.881 216.502 cv
273.284 216.502 273.592 216.193 273.592 215.791 cv
273.576 203.166 li
273.534 199.17 273.5 196.971 272.351 195.068 cv
271.292 193.264 269.335 192.311 266.699 192.311 cv
264.18 192.311 262 193.498 260.069 194.629 cv
f
304.159 195.908 mo
303.703 196.553 302.939 197.922 302.939 199.906 cv
302.939 204.791 306.739 206.254 308.768 207.021 cv
308.783 207.021 309.828 207.443 310.42 207.643 cv
311.492 207.988 313.374 208.592 313.374 209.928 cv
313.374 210.873 312.385 211.844 310.196 211.844 cv
308.888 211.844 307.142 211.371 305.771 210.654 cv
305.132 210.332 304.801 210.049 304.292 209.656 cv
304.183 209.566 304.018 209.51 303.843 209.51 cv
303.667 209.51 303.488 209.572 303.338 209.729 cv
303.211 209.855 303.141 210.072 303.141 210.223 cv
303.155 210.383 302.939 213.803 302.883 214.354 cv
302.863 214.514 302.843 214.752 302.843 214.84 cv
302.843 215.121 302.939 215.398 303.269 215.51 cv
305.317 216.324 307.34 217.018 310.487 217.018 cv
318.798 217.018 321.015 213.223 321.43 209.928 cv
321.482 209.455 321.471 209.256 321.471 208.92 cv
321.471 203.951 317.853 202.547 315.617 201.682 cv
313.998 201.084 313.464 200.898 313.464 200.898 cv
311.947 200.393 310.965 199.967 310.965 198.998 cv
310.965 198.744 311.09 197.393 313.754 197.393 cv
316.201 197.393 317.793 198.426 318.763 199.037 cv
318.967 199.17 319.113 199.17 319.183 199.17 cv
319.508 199.17 319.805 198.928 319.859 198.574 cv
320.258 194.082 li
320.258 193.736 320.023 193.438 319.699 193.387 cv
319.656 193.369 319.531 193.334 319.402 193.299 cv
317.662 192.822 315.9 192.311 313.136 192.311 cv
310.34 192.311 306.381 192.693 304.159 195.908 cv
f
153.541 201.301 mo
153.541 215.082 163.042 217.143 168.177 217.143 cv
169.916 217.143 172.382 216.777 173.039 216.494 cv
173.789 216.141 173.513 215.488 173.33 215.299 cv
173.187 215.131 169.22 211.186 169.22 211.186 cv
169.092 211.059 168.948 210.971 168.743 210.971 cv
168.616 210.99 168.451 210.99 168.451 210.99 cv
167.116 210.99 165.234 210.549 163.992 208.504 cv
162.568 206.254 162.381 203.238 162.381 200.568 cv
162.381 192.984 165.382 190.809 168.325 190.809 cv
170.808 190.809 174.409 191.695 174.409 200.793 cv
174.409 202.09 174.333 203.553 174.207 204.537 cv
166.808 204.537 li
166.352 204.537 165.747 205.1 166.295 205.754 cv
166.295 205.754 178.562 218.021 178.738 218.209 cv
178.9 218.391 179.086 218.461 179.266 218.461 cv
187.348 218.461 li
187.731 218.461 188.061 218.164 188.061 217.752 cv
188.061 217.564 187.988 217.381 187.836 217.236 cv
181.063 210.455 li
180.913 210.289 li
180.969 210.141 li
182.467 207.514 183.179 204.332 183.179 200.512 cv
183.179 198.047 182.723 191.877 178.611 188.061 cv
176.292 185.898 172.619 184.649 168.545 184.649 cv
159.15 184.649 153.541 190.868 153.541 201.301 cv
f
246.266 192.549 mo
246.143 192.549 229.975 192.549 229.596 192.549 cv
229.19 192.549 228.991 192.801 228.861 193.279 cv
228.736 193.826 227.73 197.303 227.73 197.689 cv
227.73 198.082 228.057 198.396 228.445 198.396 cv
228.483 198.396 235.606 198.322 236.025 198.322 cv
235.568 199.234 227.457 215.488 227.457 215.488 cv
227.42 215.553 227.384 215.682 227.384 215.807 cv
227.368 216.193 227.695 216.525 228.091 216.525 cv
248.317 216.525 li
248.722 216.525 249.032 216.193 249.032 215.791 cv
249.052 211.41 li
249.052 211.004 248.734 210.701 248.338 210.701 cv
248.354 210.701 li
248.354 210.701 240.389 210.918 238.231 210.971 cv
238.601 210.223 241.357 204.559 242.417 202.473 cv
243.46 200.412 246.693 194.047 246.916 193.609 cv
247.167 193.041 246.693 192.549 246.266 192.549 cv
f
323.537 193.465 mo
324 193.465 li
324.233 193.465 324.498 193.514 324.498 193.814 cv
324.498 194.17 324.21 194.184 323.904 194.184 cv
323.537 194.184 li
323.537 193.465 li
cp
323.18 195.438 mo
323.537 195.438 li
323.537 194.469 li
323.915 194.467 li
324.52 195.438 li
324.896 195.438 li
324.258 194.443 li
324.585 194.406 324.849 194.238 324.849 193.826 cv
324.849 193.395 324.595 193.184 324.063 193.184 cv
323.18 193.184 li
323.18 195.438 li
322.34 194.305 mo
322.342 193.379 323.04 192.664 323.937 192.664 cv
324.836 192.664 325.525 193.379 325.525 194.305 cv
325.525 195.248 324.83 195.959 323.937 195.959 cv
323.04 195.959 322.34 195.246 322.34 194.305 cv
321.989 194.303 mo
321.989 195.408 322.876 196.248 323.937 196.248 cv
324.996 196.248 325.872 195.408 325.872 194.305 cv
325.872 193.211 324.996 192.379 323.938 192.383 cv
322.876 192.379 321.989 193.211 321.989 194.303 cv
f
308.84 180.23 mo
292.75 178.05 282.561 174.042 279.352 168.476 cv
278.399 166.835 278.139 165.354 278.516 164.079 cv
278.938 162.712 280.091 161.552 281.971 160.601 cv
282.147 160.545 282.467 160.209 282.467 159.708 cv
282.467 159.136 281.999 158.701 281.43 158.701 cv
281.214 158.701 281.018 158.721 280.807 158.752 cv
279.236 159.233 276.941 159.731 274.262 160.126 cv
266.599 161.313 258.477 161.672 250.211 161.171 cv
215.346 158.994 187.78 142.132 188.819 123.584 cv
189.172 117.278 192.922 111.182 199.374 106.452 cv
208.891 99.4653 218.17 97.8618 223.134 97.5977 cv
223.754 97.5654 224.114 97.0566 224.114 96.561 cv
224.114 96.0532 223.754 95.5762 223.103 95.5166 cv
216.231 95.0674 197.441 96.4048 182.225 103.543 cv
169.022 109.722 161.441 118.614 160.871 128.511 cv
160.335 138.535 166.97 148.349 179.603 156.174 cv
192.094 163.875 208.985 168.75 227.15 169.843 cv
233.125 170.236 239.103 170.178 244.919 169.667 cv
245.226 169.701 245.462 169.818 245.639 170.028 cv
252.206 180.612 274.476 184.919 308.725 182.271 cv
309.291 182.271 309.741 181.8 309.741 181.263 cv
309.708 180.546 309.141 180.252 308.84 180.23 cv
.15625 1 1 .0625 cmyk
f
295.382 96.4385 mo
282.884 88.6997 266.024 83.8628 247.859 82.7358 cv
245.428 82.5791 242.961 82.4937 240.579 82.4937 cv
218.256 82.3433 204.276 87.5747 194.526 92.2729 cv
194.199 92.4531 194.002 92.8379 194.002 93.1958 cv
194.002 93.7646 194.451 94.2349 195.002 94.2349 cv
195.333 94.1792 li
203.417 91.8369 208.833 91.6157 216.888 91.3262 cv
226.622 90.9717 234.583 92.2729 240.432 93.4658 cv
268.196 98.9878 287.023 113.623 286.183 128.996 cv
285.833 135.234 282.205 141.159 275.695 146.062 cv
266.719 152.898 257.557 154.655 251.489 154.95 cv
251.341 154.95 251.105 154.979 251.105 154.979 cv
250.574 155.045 250.189 155.483 250.189 155.992 cv
250.189 156.554 250.608 156.973 251.105 157.034 cv
251.253 157.053 251.341 157.053 251.459 157.053 cv
258.592 157.687 278.071 155.957 292.853 148.972 cv
306.025 142.785 313.576 133.934 314.106 124.056 cv
314.674 114.039 308.016 104.224 295.382 96.4385 cv
.714844 .339844 1 .214844 cmyk
f
285.836 156.899 mo
286.297 156.899 li
286.534 156.899 286.794 156.944 286.794 157.243 cv
286.794 157.599 286.511 157.613 286.203 157.613 cv
285.836 157.613 li
285.836 156.899 li
cp
285.486 158.868 mo
285.836 158.868 li
285.836 157.899 li
286.212 157.898 li
286.819 158.868 li
287.194 158.868 li
286.553 157.873 li
286.885 157.84 287.149 157.671 287.149 157.257 cv
287.149 156.825 286.891 156.616 286.362 156.616 cv
285.486 156.616 li
285.486 158.868 li
284.645 157.736 mo
284.647 156.809 285.338 156.096 286.238 156.096 cv
287.136 156.096 287.825 156.812 287.825 157.736 cv
287.825 158.678 287.129 159.391 286.238 159.391 cv
285.338 159.391 284.645 158.678 284.645 157.736 cv
284.292 157.732 mo
284.292 158.841 285.179 159.676 286.238 159.676 cv
287.292 159.676 288.172 158.841 288.172 157.736 cv
288.172 156.641 287.292 155.815 286.245 155.815 cv
285.179 155.815 284.292 156.641 284.292 157.732 cv
.046875 1 1 .00390601 cmyk
f
202.528 237.213 mo
202.662 237.703 202.727 238.115 202.727 238.445 cv
202.727 238.955 202.578 239.359 202.283 239.656 cv
201.904 240.033 201.336 240.201 200.581 240.146 cv
199.263 240.068 198.359 239.297 197.864 237.828 cv
197.831 237.713 197.813 237.6 197.813 237.484 cv
197.813 237.088 197.984 236.711 198.322 236.348 cv
198.659 235.984 199.001 235.82 199.346 235.855 cv
200.511 235.938 201.138 235.996 201.223 236.029 cv
201.929 236.193 202.365 236.59 202.528 237.213 cv
.15625 1 1 .0625 cmyk
f
261.377 237.336 mo
261.506 237.824 261.575 238.236 261.575 238.564 cv
261.575 239.076 261.42 239.48 261.126 239.777 cv
260.75 240.154 260.181 240.32 259.422 240.266 cv
258.109 240.189 257.204 239.418 256.71 237.949 cv
256.672 237.834 256.659 237.721 256.659 237.605 cv
256.659 237.209 256.827 236.832 257.164 236.469 cv
257.5 236.105 257.842 235.941 258.188 235.975 cv
259.359 236.059 259.984 236.117 260.065 236.148 cv
260.775 236.316 261.209 236.709 261.377 237.336 cv
f
166.359 231.449 mo
165.794 231.449 li
165.711 231.449 165.588 231.35 165.424 231.152 cv
165.26 230.957 165.072 230.752 164.859 230.539 cv
164.646 230.326 164.424 230.154 164.195 230.023 cv
163.965 229.891 163.744 229.9 163.531 230.047 cv
163.252 230.26 163.035 230.49 162.879 230.736 cv
162.723 230.982 162.609 231.244 162.536 231.521 cv
162.461 231.803 162.42 232.1 162.412 232.42 cv
162.404 232.742 162.4 233.072 162.4 233.416 cv
162.4 233.693 162.441 233.93 162.523 234.117 cv
162.604 234.307 162.704 234.516 162.818 234.746 cv
162.9 234.908 163.002 235.092 163.125 235.299 cv
163.249 235.502 163.396 235.752 163.568 236.049 cv
163.74 236.344 163.945 236.691 164.183 237.094 cv
164.42 237.496 164.703 237.967 165.032 238.508 cv
165.49 239.262 165.875 239.967 166.187 240.623 cv
166.499 241.279 166.655 241.885 166.655 242.443 cv
166.655 242.869 166.622 243.309 166.556 243.758 cv
166.491 244.209 166.368 244.646 166.187 245.074 cv
166.138 245.205 166.036 245.389 165.88 245.627 cv
165.723 245.863 165.507 246.131 165.228 246.428 cv
165.097 246.557 164.9 246.68 164.638 246.795 cv
164.375 246.91 164.105 246.967 163.827 246.967 cv
163.531 246.967 li
162.974 246.902 162.499 246.719 162.105 246.414 cv
161.711 246.111 161.391 245.779 161.145 245.418 cv
160.9 245.059 160.719 244.725 160.605 244.422 cv
160.49 244.119 160.432 243.934 160.432 243.867 cv
160.432 243.805 160.46 243.721 160.519 243.623 cv
160.576 243.523 160.65 243.436 160.74 243.352 cv
160.83 243.27 160.924 243.197 161.023 243.131 cv
161.121 243.066 161.21 243.033 161.293 243.033 cv
161.424 243.033 161.555 243.107 161.687 243.254 cv
161.818 243.4 161.949 243.578 162.08 243.783 cv
162.211 243.988 162.342 244.197 162.474 244.41 cv
162.604 244.623 162.752 244.791 162.917 244.914 cv
163.081 245.037 163.261 245.094 163.458 245.088 cv
163.654 245.078 163.867 244.959 164.097 244.73 cv
164.245 244.582 164.351 244.404 164.417 244.201 cv
164.482 243.996 164.523 243.787 164.54 243.574 cv
164.555 243.361 164.552 243.152 164.527 242.947 cv
164.502 242.742 164.465 242.557 164.417 242.393 cv
164.269 241.836 164.027 241.199 163.691 240.488 cv
163.355 239.775 162.834 238.926 162.129 237.941 cv
161.555 236.957 161.125 236.105 160.838 235.385 cv
160.551 234.662 160.383 234.016 160.333 233.441 cv
160.285 232.898 160.301 232.395 160.383 231.93 cv
160.464 231.461 160.571 231.016 160.703 230.588 cv
160.834 230.031 161.039 229.576 161.318 229.223 cv
161.596 228.871 161.958 228.58 162.4 228.352 cv
162.596 228.25 162.801 228.18 163.014 228.129 cv
163.227 228.078 163.4 228.055 163.531 228.055 cv
164.023 227.99 164.454 228.021 164.822 228.154 cv
165.191 228.285 165.502 228.453 165.757 228.658 cv
166.011 228.863 166.224 229.08 166.397 229.309 cv
166.569 229.539 166.704 229.711 166.802 229.826 cv
166.884 229.957 166.925 230.063 166.925 230.145 cv
166.925 230.316 li
166.925 230.596 166.867 230.822 166.752 230.994 cv
166.637 231.168 166.506 231.318 166.359 231.449 cv
cp
0 0 0 0 cmyk
f
177.131 230.662 mo
177.017 231.811 176.689 233.342 176.148 235.262 cv
175.41 237.836 174.984 239.393 174.869 239.934 cv
174.507 241.59 173.82 243.098 172.803 244.461 cv
172.164 245.328 171.425 245.754 170.589 245.738 cv
169.852 245.721 169.301 245.256 168.942 244.336 cv
168.319 242.795 168.007 240.984 168.007 238.9 cv
168.007 237.705 168.122 236.162 168.352 234.277 cv
168.334 234.441 168.327 233.932 168.327 232.752 cv
168.327 231.736 168.72 231.229 169.507 231.229 cv
169.671 231.229 169.847 231.273 170.036 231.363 cv
170.225 231.453 170.409 231.547 170.589 231.645 cv
170.605 232.482 170.582 233.711 170.516 235.336 cv
170.433 237.072 170.393 238.328 170.393 239.098 cv
170.393 239.918 170.417 240.664 170.466 241.336 cv
170.5 241.68 170.647 242.336 170.91 243.303 cv
171.598 242.533 172.138 241.508 172.533 240.229 cv
172.664 239.801 172.926 238.639 173.32 236.736 cv
173.63 235.295 173.983 234.162 174.376 233.342 cv
174.492 233.113 174.59 232.678 174.671 232.039 cv
174.754 231.4 174.852 230.957 174.967 230.711 cv
175.148 230.316 175.458 230.121 175.902 230.121 cv
176.475 230.121 176.886 230.301 177.131 230.662 cv
cp
f
183.993 232.139 mo
183.911 231.531 183.419 231.064 182.517 230.736 cv
182.386 230.688 182.181 230.58 181.903 230.416 cv
181.706 230.285 181.542 230.221 181.411 230.221 cv
181.345 230.221 181.271 230.236 181.189 230.268 cv
181.172 230.549 181.165 230.842 181.165 231.152 cv
181.165 231.58 181.197 232.301 181.263 233.318 cv
181.312 234.252 181.328 234.982 181.312 235.506 cv
181.426 235.506 181.598 235.42 181.829 235.248 cv
182.058 235.076 182.189 234.982 182.222 234.965 cv
182.713 234.736 183.149 234.352 183.526 233.811 cv
183.903 233.27 184.058 232.713 183.993 232.139 cv
cp
183.255 241.779 mo
183.288 241.598 183.304 241.426 183.304 241.262 cv
183.304 240.77 183.149 240.336 182.836 239.959 cv
182.001 239.549 181.467 239.346 181.239 239.346 cv
181.107 239.346 180.984 239.369 180.87 239.418 cv
180.886 239.582 180.894 239.762 180.894 239.959 cv
180.894 240.303 180.849 240.832 180.759 241.545 cv
180.668 242.258 180.624 242.795 180.624 243.156 cv
180.624 243.68 180.689 244.156 180.821 244.582 cv
181.017 244.354 181.325 244.111 181.743 243.857 cv
182.161 243.604 182.452 243.377 182.616 243.18 cv
182.911 242.836 183.124 242.369 183.255 241.779 cv
cp
186.305 233.367 mo
186.091 234.252 185.55 235.057 184.682 235.777 cv
183.845 236.367 183.009 236.949 182.173 237.523 cv
182.222 237.77 182.39 237.953 182.677 238.078 cv
182.963 238.201 183.238 238.318 183.5 238.434 cv
184.862 239.318 185.542 240.369 185.542 241.582 cv
185.542 242.516 185.223 243.377 184.583 244.164 cv
184.091 244.77 183.362 245.369 182.395 245.959 cv
181.608 246.418 180.821 246.877 180.034 247.336 cv
179.836 247.451 179.624 247.508 179.394 247.508 cv
178.853 247.508 178.475 247.287 178.262 246.846 cv
178.295 245.467 178.329 244.098 178.361 242.738 cv
178.393 241.098 178.484 239.746 178.631 238.68 cv
178.288 238.449 178.115 238.188 178.115 237.893 cv
178.115 237.744 178.176 237.609 178.299 237.486 cv
178.422 237.365 178.59 237.229 178.803 237.082 cv
179 234.59 179.041 232.293 178.927 230.195 cv
178.156 230.047 177.648 229.703 177.402 229.162 cv
177.385 229.096 177.415 228.998 177.488 228.867 cv
177.561 228.736 177.599 228.629 177.599 228.547 cv
177.975 228.268 178.393 228.129 178.853 228.129 cv
179.181 228.129 179.935 228.234 181.116 228.447 cv
181.721 228.547 182.353 228.768 183.009 229.111 cv
184.78 230.031 185.821 230.924 186.133 231.793 cv
186.346 232.416 186.403 232.939 186.305 233.367 cv
cp
f
193.388 231.449 mo
192.822 231.449 li
192.74 231.449 192.617 231.35 192.453 231.152 cv
192.289 230.957 192.1 230.752 191.887 230.539 cv
191.673 230.326 191.453 230.154 191.223 230.023 cv
190.994 229.891 190.772 229.9 190.559 230.047 cv
190.28 230.26 190.063 230.49 189.908 230.736 cv
189.751 230.982 189.636 231.244 189.563 231.521 cv
189.49 231.803 189.448 232.1 189.44 232.42 cv
189.432 232.742 189.428 233.072 189.428 233.416 cv
189.428 233.693 189.468 233.93 189.551 234.117 cv
189.632 234.307 189.731 234.516 189.846 234.746 cv
189.928 234.908 190.03 235.092 190.153 235.299 cv
190.276 235.502 190.424 235.752 190.596 236.049 cv
190.768 236.344 190.973 236.691 191.211 237.094 cv
191.449 237.496 191.731 237.967 192.059 238.508 cv
192.518 239.262 192.904 239.967 193.215 240.623 cv
193.527 241.279 193.683 241.885 193.683 242.443 cv
193.683 242.869 193.65 243.309 193.584 243.758 cv
193.519 244.209 193.396 244.646 193.215 245.074 cv
193.167 245.205 193.064 245.389 192.908 245.627 cv
192.752 245.863 192.535 246.131 192.256 246.428 cv
192.125 246.557 191.928 246.68 191.666 246.795 cv
191.404 246.91 191.133 246.967 190.854 246.967 cv
190.559 246.967 li
190.001 246.902 189.527 246.719 189.132 246.414 cv
188.739 246.111 188.419 245.779 188.173 245.418 cv
187.927 245.059 187.748 244.725 187.632 244.422 cv
187.518 244.119 187.46 243.934 187.46 243.867 cv
187.46 243.805 187.489 243.721 187.546 243.623 cv
187.603 243.523 187.677 243.436 187.768 243.352 cv
187.858 243.27 187.953 243.197 188.05 243.131 cv
188.149 243.066 188.239 243.033 188.321 243.033 cv
188.452 243.033 188.583 243.107 188.714 243.254 cv
188.845 243.4 188.976 243.578 189.108 243.783 cv
189.239 243.988 189.37 244.197 189.501 244.41 cv
189.632 244.623 189.78 244.791 189.945 244.914 cv
190.108 245.037 190.289 245.094 190.485 245.088 cv
190.682 245.078 190.895 244.959 191.125 244.73 cv
191.272 244.582 191.378 244.404 191.445 244.201 cv
191.509 243.996 191.551 243.787 191.567 243.574 cv
191.584 243.361 191.581 243.152 191.555 242.947 cv
191.531 242.742 191.494 242.557 191.445 242.393 cv
191.297 241.836 191.054 241.199 190.719 240.488 cv
190.382 239.775 189.862 238.926 189.158 237.941 cv
188.583 236.957 188.153 236.105 187.866 235.385 cv
187.58 234.662 187.411 234.016 187.362 233.441 cv
187.312 232.898 187.329 232.395 187.411 231.93 cv
187.494 231.461 187.599 231.016 187.731 230.588 cv
187.862 230.031 188.067 229.576 188.345 229.223 cv
188.624 228.871 188.985 228.58 189.428 228.352 cv
189.625 228.25 189.83 228.18 190.043 228.129 cv
190.255 228.078 190.428 228.055 190.559 228.055 cv
191.05 227.99 191.481 228.021 191.851 228.154 cv
192.219 228.285 192.531 228.453 192.785 228.658 cv
193.039 228.863 193.252 229.08 193.424 229.309 cv
193.596 229.539 193.732 229.711 193.831 229.826 cv
193.913 229.957 193.954 230.063 193.954 230.145 cv
193.954 230.316 li
193.954 230.596 193.896 230.822 193.782 230.994 cv
193.667 231.168 193.535 231.318 193.388 231.449 cv
cp
f
213.055 231.387 mo
212.489 231.387 li
212.407 231.387 212.285 231.287 212.12 231.092 cv
211.957 230.895 211.767 230.689 211.554 230.477 cv
211.341 230.264 211.12 230.092 210.89 229.961 cv
210.661 229.828 210.439 229.836 210.226 229.984 cv
209.947 230.199 209.731 230.428 209.575 230.674 cv
209.418 230.92 209.304 231.182 209.231 231.461 cv
209.157 231.74 209.116 232.039 209.108 232.357 cv
209.099 232.678 209.095 233.01 209.095 233.354 cv
209.095 233.633 209.136 233.867 209.218 234.055 cv
209.3 234.244 209.398 234.451 209.513 234.682 cv
209.595 234.846 209.698 235.031 209.821 235.234 cv
209.943 235.441 210.091 235.689 210.263 235.984 cv
210.435 236.281 210.64 236.629 210.878 237.029 cv
211.116 237.432 211.398 237.904 211.727 238.445 cv
212.186 239.199 212.571 239.904 212.882 240.559 cv
213.194 241.215 213.35 241.822 213.35 242.379 cv
213.35 242.807 213.317 243.246 213.251 243.697 cv
213.186 244.146 213.063 244.586 212.882 245.012 cv
212.833 245.143 212.731 245.328 212.575 245.564 cv
212.419 245.803 212.202 246.068 211.923 246.365 cv
211.792 246.494 211.595 246.619 211.333 246.732 cv
211.071 246.848 210.8 246.904 210.522 246.904 cv
210.226 246.904 li
209.668 246.84 209.193 246.654 208.799 246.352 cv
208.406 246.049 208.087 245.717 207.84 245.355 cv
207.595 244.994 207.414 244.664 207.3 244.359 cv
207.185 244.057 207.127 243.871 207.127 243.807 cv
207.127 243.742 207.156 243.658 207.213 243.561 cv
207.271 243.463 207.344 243.371 207.435 243.291 cv
207.524 243.209 207.619 243.135 207.717 243.068 cv
207.816 243.004 207.906 242.971 207.989 242.971 cv
208.12 242.971 208.25 243.043 208.382 243.191 cv
208.513 243.34 208.643 243.516 208.776 243.721 cv
208.907 243.924 209.038 244.135 209.168 244.348 cv
209.3 244.561 209.447 244.73 209.612 244.852 cv
209.775 244.975 209.956 245.033 210.153 245.023 cv
210.349 245.016 210.562 244.896 210.792 244.666 cv
210.94 244.52 211.046 244.344 211.112 244.137 cv
211.177 243.934 211.218 243.725 211.235 243.512 cv
211.25 243.297 211.247 243.09 211.222 242.883 cv
211.198 242.68 211.161 242.496 211.112 242.33 cv
210.964 241.773 210.722 241.139 210.386 240.426 cv
210.049 239.711 209.53 238.863 208.824 237.879 cv
208.25 236.896 207.82 236.045 207.533 235.322 cv
207.247 234.602 207.079 233.953 207.029 233.379 cv
206.98 232.838 206.996 232.334 207.079 231.867 cv
207.16 231.398 207.267 230.953 207.398 230.525 cv
207.529 229.969 207.734 229.514 208.012 229.16 cv
208.292 228.809 208.652 228.518 209.095 228.287 cv
209.292 228.189 209.497 228.115 209.709 228.066 cv
209.923 228.018 210.095 227.992 210.226 227.992 cv
210.718 227.928 211.149 227.959 211.518 228.09 cv
211.886 228.221 212.198 228.391 212.453 228.596 cv
212.706 228.801 212.919 229.018 213.091 229.246 cv
213.263 229.477 213.399 229.648 213.498 229.764 cv
213.58 229.895 213.621 230.002 213.621 230.084 cv
213.621 230.254 li
213.621 230.535 213.563 230.76 213.449 230.932 cv
213.333 231.104 213.202 231.256 213.055 231.387 cv
cp
f
222.054 233.428 mo
221.734 233.354 li
221.57 233.354 221.422 233.357 221.292 233.365 cv
221.16 233.375 221.074 233.379 221.034 233.379 cv
220.992 233.379 220.93 233.379 220.849 233.379 cv
220.767 233.379 220.676 233.395 220.578 233.428 cv
220.48 233.461 220.242 233.494 219.865 233.525 cv
219.521 233.641 219.32 233.705 219.262 233.723 cv
219.205 233.74 219.037 233.797 218.758 233.895 cv
218.528 234.01 218.389 234.088 218.34 234.129 cv
218.291 234.17 218.25 234.207 218.217 234.24 cv
218.184 234.273 218.134 234.305 218.07 234.338 cv
217.75 234.658 li
217.585 234.822 217.41 235.061 217.22 235.371 cv
217.033 235.682 216.848 236.018 216.667 236.379 cv
216.487 236.738 216.343 237.117 216.237 237.51 cv
216.13 237.904 216.078 238.248 216.078 238.543 cv
216.078 239.035 216.16 239.564 216.323 240.129 cv
216.487 240.695 216.742 241.143 217.085 241.469 cv
217.414 241.963 217.787 242.355 218.206 242.65 cv
218.623 242.945 218.921 243.094 219.103 243.094 cv
219.578 243.094 220.124 242.881 220.738 242.453 cv
221.352 242.027 221.906 241.486 222.398 240.83 cv
222.889 240.176 223.234 239.486 223.431 238.764 cv
223.627 238.043 223.726 237.438 223.726 236.945 cv
223.644 236.535 223.542 236.133 223.418 235.74 cv
223.296 235.346 223.161 234.988 223.012 234.67 cv
222.866 234.35 222.709 234.07 222.545 233.832 cv
222.382 233.596 222.217 233.461 222.054 233.428 cv
cp
220.037 244.643 mo
219.873 244.791 219.717 244.877 219.57 244.9 cv
219.422 244.924 219.275 244.938 219.127 244.938 cv
218.52 244.938 217.918 244.736 217.319 244.334 cv
216.72 243.934 216.119 243.428 215.511 242.822 cv
215.052 242.379 214.688 241.859 214.417 241.262 cv
214.147 240.664 214.011 239.986 214.011 239.23 cv
214.011 238.773 214.048 238.332 214.123 237.904 cv
214.196 237.479 214.298 237.053 214.429 236.625 cv
214.56 236.199 214.716 235.752 214.897 235.285 cv
215.077 234.816 215.282 234.322 215.511 233.797 cv
215.823 233.502 216.078 233.152 216.275 232.752 cv
216.471 232.35 216.716 232.002 217.012 231.707 cv
217.471 231.395 217.864 231.164 218.193 231.018 cv
218.52 230.869 218.833 230.797 219.127 230.797 cv
219.275 230.797 219.422 230.809 219.57 230.834 cv
219.717 230.857 219.873 230.945 220.037 231.092 cv
220.184 231.238 220.471 231.402 220.898 231.584 cv
221.324 231.766 221.84 232.002 222.448 232.297 cv
223.038 232.445 223.545 232.67 223.972 232.973 cv
224.398 233.275 224.685 233.656 224.833 234.115 cv
225.144 234.871 225.422 235.559 225.668 236.182 cv
225.916 236.805 226.038 237.422 226.038 238.025 cv
226.038 238.322 225.989 238.566 225.89 238.764 cv
225.792 238.961 225.743 239.215 225.743 239.527 cv
224.989 241.035 224.152 242.188 223.234 242.982 cv
222.316 243.777 221.25 244.33 220.037 244.643 cv
cp
f
236.515 230.6 mo
236.4 231.748 236.072 233.281 235.532 235.199 cv
234.793 237.771 234.367 239.33 234.252 239.871 cv
233.891 241.527 233.204 243.035 232.186 244.396 cv
231.546 245.266 230.809 245.691 229.972 245.676 cv
229.235 245.658 228.685 245.191 228.325 244.273 cv
227.702 242.734 227.39 240.922 227.39 238.838 cv
227.39 237.641 227.505 236.102 227.735 234.215 cv
227.718 234.379 227.709 233.871 227.709 232.689 cv
227.709 231.674 228.103 231.164 228.89 231.164 cv
229.054 231.164 229.23 231.209 229.419 231.301 cv
229.608 231.391 229.792 231.484 229.972 231.584 cv
229.989 232.418 229.964 233.648 229.899 235.273 cv
229.817 237.012 229.776 238.264 229.776 239.035 cv
229.776 239.855 229.801 240.602 229.849 241.273 cv
229.882 241.617 230.03 242.273 230.292 243.24 cv
230.981 242.471 231.522 241.445 231.916 240.168 cv
232.046 239.74 232.309 238.576 232.703 236.674 cv
233.014 235.23 233.367 234.1 233.76 233.281 cv
233.875 233.051 233.973 232.615 234.055 231.977 cv
234.137 231.336 234.237 230.895 234.351 230.646 cv
234.531 230.254 234.842 230.059 235.286 230.059 cv
235.859 230.059 236.27 230.238 236.515 230.6 cv
cp
f
242.639 233.6 mo
242.722 232.945 242.444 232.428 241.802 232.051 cv
241.769 232.051 241.179 231.813 240.032 231.336 cv
240.212 234.354 240.269 236.469 240.204 237.682 cv
241.664 236.307 242.476 234.945 242.639 233.6 cv
cp
244.239 235.492 mo
243.615 236.838 243.083 237.73 242.639 238.174 cv
241.951 238.863 241.573 239.24 241.507 239.305 cv
241.032 239.684 240.556 239.914 240.081 239.994 cv
240.015 240.322 239.983 240.709 239.983 241.15 cv
239.983 241.463 240.007 241.934 240.056 242.564 cv
240.106 243.195 240.13 243.658 240.13 243.955 cv
240.13 245.068 239.868 245.904 239.343 246.461 cv
238.655 246.094 li
238.376 245.945 238.22 245.766 238.187 245.553 cv
238.023 244.486 237.942 243.297 237.942 241.986 cv
237.942 241.117 237.991 239.822 238.089 238.102 cv
238.187 236.379 238.236 235.076 238.236 234.189 cv
238.236 232.91 238.163 231.74 238.015 230.674 cv
237.884 230.723 237.76 230.641 237.646 230.428 cv
237.532 230.215 237.433 230.092 237.351 230.059 cv
237.433 229.533 237.573 229.271 237.769 229.271 cv
238.015 229.189 238.523 229.205 239.293 229.32 cv
241.426 229.664 243.034 230.6 244.116 232.125 cv
244.46 232.615 244.631 233.174 244.631 233.797 cv
244.631 234.338 244.5 234.902 244.239 235.492 cv
cp
f
251.912 231.387 mo
251.347 231.387 li
251.263 231.387 251.141 231.287 250.977 231.092 cv
250.813 230.895 250.625 230.689 250.411 230.477 cv
250.198 230.264 249.977 230.092 249.747 229.961 cv
249.518 229.828 249.296 229.836 249.083 229.984 cv
248.805 230.199 248.587 230.428 248.431 230.674 cv
248.275 230.92 248.162 231.182 248.087 231.461 cv
248.015 231.74 247.972 232.039 247.964 232.357 cv
247.955 232.678 247.953 233.01 247.953 233.354 cv
247.953 233.633 247.993 233.867 248.076 234.055 cv
248.157 234.244 248.255 234.451 248.37 234.682 cv
248.452 234.846 248.556 235.031 248.678 235.234 cv
248.8 235.441 248.948 235.689 249.12 235.984 cv
249.292 236.281 249.498 236.629 249.736 237.029 cv
249.972 237.432 250.255 237.904 250.583 238.445 cv
251.042 239.199 251.428 239.904 251.74 240.559 cv
252.051 241.215 252.208 241.822 252.208 242.379 cv
252.208 242.807 252.173 243.246 252.109 243.697 cv
252.042 244.146 251.919 244.586 251.74 245.012 cv
251.691 245.143 251.587 245.328 251.433 245.564 cv
251.276 245.803 251.058 246.068 250.78 246.365 cv
250.649 246.494 250.452 246.619 250.19 246.732 cv
249.928 246.848 249.657 246.904 249.378 246.904 cv
249.083 246.904 li
248.527 246.84 248.051 246.654 247.656 246.352 cv
247.265 246.049 246.944 245.717 246.698 245.355 cv
246.451 244.994 246.272 244.664 246.157 244.359 cv
246.042 244.057 245.985 243.871 245.985 243.807 cv
245.985 243.742 246.014 243.658 246.071 243.561 cv
246.128 243.463 246.202 243.371 246.292 243.291 cv
246.382 243.209 246.475 243.135 246.576 243.068 cv
246.673 243.004 246.764 242.971 246.845 242.971 cv
246.976 242.971 247.108 243.043 247.239 243.191 cv
247.371 243.34 247.5 243.516 247.632 243.721 cv
247.763 243.924 247.894 244.135 248.026 244.348 cv
248.157 244.561 248.304 244.73 248.468 244.852 cv
248.632 244.975 248.814 245.033 249.009 245.023 cv
249.206 245.016 249.418 244.896 249.65 244.666 cv
249.796 244.52 249.904 244.344 249.969 244.137 cv
250.035 243.934 250.076 243.725 250.092 243.512 cv
250.108 243.297 250.104 243.09 250.081 242.883 cv
250.055 242.68 250.018 242.496 249.969 242.33 cv
249.823 241.773 249.58 241.139 249.244 240.426 cv
248.907 239.711 248.386 238.863 247.681 237.879 cv
247.108 236.896 246.677 236.045 246.39 235.322 cv
246.103 234.602 245.935 233.953 245.887 233.379 cv
245.837 232.838 245.853 232.334 245.935 231.867 cv
246.018 231.398 246.124 230.953 246.255 230.525 cv
246.385 229.969 246.591 229.514 246.871 229.16 cv
247.149 228.809 247.509 228.518 247.953 228.287 cv
248.149 228.189 248.354 228.115 248.567 228.066 cv
248.781 228.018 248.952 227.992 249.083 227.992 cv
249.576 227.928 250.005 227.959 250.375 228.09 cv
250.744 228.221 251.054 228.391 251.309 228.596 cv
251.564 228.801 251.777 229.018 251.95 229.246 cv
252.122 229.477 252.256 229.648 252.354 229.764 cv
252.436 229.895 252.477 230.002 252.477 230.084 cv
252.477 230.254 li
252.477 230.535 252.42 230.76 252.304 230.932 cv
252.191 231.104 252.06 231.256 251.912 231.387 cv
cp
f
272.487 231.383 mo
271.922 231.383 li
271.84 231.383 271.716 231.285 271.554 231.088 cv
271.389 230.893 271.2 230.688 270.987 230.473 cv
270.775 230.26 270.552 230.088 270.324 229.957 cv
270.093 229.826 269.873 229.834 269.66 229.982 cv
269.381 230.195 269.164 230.426 269.007 230.67 cv
268.851 230.916 268.738 231.18 268.663 231.457 cv
268.589 231.736 268.548 232.035 268.541 232.355 cv
268.532 232.676 268.528 233.008 268.528 233.352 cv
268.528 233.631 268.569 233.865 268.651 234.053 cv
268.734 234.24 268.831 234.449 268.946 234.678 cv
269.028 234.844 269.13 235.027 269.254 235.232 cv
269.376 235.438 269.524 235.688 269.696 235.982 cv
269.868 236.277 270.073 236.627 270.311 237.027 cv
270.549 237.43 270.831 237.902 271.16 238.443 cv
271.62 239.197 272.003 239.902 272.316 240.557 cv
272.627 241.213 272.783 241.82 272.783 242.377 cv
272.783 242.803 272.75 243.244 272.684 243.693 cv
272.619 244.143 272.496 244.582 272.316 245.01 cv
272.267 245.139 272.164 245.324 272.008 245.563 cv
271.853 245.799 271.635 246.066 271.357 246.361 cv
271.225 246.492 271.029 246.617 270.766 246.73 cv
270.503 246.846 270.232 246.902 269.954 246.902 cv
269.66 246.902 li
269.102 246.838 268.626 246.652 268.233 246.35 cv
267.839 246.045 267.519 245.713 267.274 245.354 cv
267.028 244.992 266.847 244.66 266.733 244.357 cv
266.617 244.055 266.56 243.869 266.56 243.805 cv
266.56 243.74 266.588 243.654 266.646 243.559 cv
266.704 243.459 266.778 243.369 266.869 243.287 cv
266.958 243.205 267.052 243.131 267.15 243.066 cv
267.25 243 267.338 242.967 267.421 242.967 cv
267.553 242.967 267.684 243.041 267.816 243.189 cv
267.946 243.336 268.076 243.514 268.207 243.719 cv
268.339 243.922 268.47 244.131 268.602 244.346 cv
268.734 244.557 268.88 244.727 269.044 244.85 cv
269.208 244.973 269.389 245.029 269.585 245.021 cv
269.783 245.012 269.995 244.895 270.225 244.664 cv
270.374 244.516 270.479 244.34 270.545 244.135 cv
270.61 243.93 270.652 243.723 270.667 243.508 cv
270.683 243.295 270.68 243.086 270.655 242.881 cv
270.631 242.678 270.594 242.492 270.545 242.328 cv
270.397 241.771 270.156 241.135 269.82 240.424 cv
269.483 239.709 268.961 238.859 268.257 237.877 cv
267.684 236.893 267.254 236.041 266.966 235.318 cv
266.679 234.598 266.511 233.951 266.462 233.375 cv
266.413 232.834 266.429 232.33 266.511 231.863 cv
266.592 231.395 266.699 230.949 266.831 230.523 cv
266.962 229.967 267.167 229.51 267.447 229.158 cv
267.725 228.807 268.085 228.514 268.528 228.285 cv
268.724 228.188 268.93 228.113 269.143 228.063 cv
269.356 228.014 269.529 227.99 269.66 227.99 cv
270.151 227.926 270.582 227.957 270.951 228.088 cv
271.321 228.219 271.63 228.387 271.885 228.592 cv
272.139 228.797 272.353 229.014 272.525 229.244 cv
272.698 229.475 272.833 229.646 272.931 229.76 cv
273.012 229.891 273.052 229.998 273.052 230.08 cv
273.052 230.252 li
273.052 230.531 272.997 230.756 272.881 230.93 cv
272.766 231.1 272.635 231.252 272.487 231.383 cv
cp
f
279.692 238.123 mo
279.644 237.516 279.537 236.836 279.374 236.082 cv
279.21 235.426 279.054 234.77 278.907 234.113 cv
278.415 235.475 277.987 236.836 277.626 238.195 cv
277.889 238.146 278.579 238.123 279.692 238.123 cv
cp
283.283 242.82 mo
283.383 243.082 283.432 243.311 283.432 243.508 cv
283.432 243.836 283.292 244.123 283.013 244.369 cv
282.735 244.615 282.546 244.73 282.447 244.713 cv
281.644 244.566 281.136 243.918 280.922 242.771 cv
280.694 241.525 280.422 240.484 280.112 239.648 cv
279.553 239.697 278.997 239.746 278.438 239.795 cv
277.799 239.877 277.298 240.074 276.938 240.387 cv
276.758 240.895 276.521 241.795 276.226 243.09 cv
275.946 244.287 275.676 245.197 275.414 245.82 cv
275.282 246.115 275.003 246.197 274.578 246.066 cv
274.036 245.885 273.75 245.641 273.716 245.328 cv
273.667 244.705 273.848 243.869 274.258 242.82 cv
274.75 241.623 275.02 240.77 275.069 240.262 cv
275.084 240.115 274.979 239.951 274.75 239.77 cv
274.52 239.59 274.406 239.451 274.406 239.354 cv
274.406 239.27 274.442 239.184 274.516 239.094 cv
274.589 239.004 274.762 238.93 275.033 238.873 cv
275.302 238.814 275.455 238.729 275.489 238.615 cv
275.783 237.795 276.25 236.27 276.89 234.041 cv
277.431 232.105 277.914 230.621 278.34 229.588 cv
278.438 229.357 278.644 229.244 278.955 229.244 cv
279.185 229.244 279.389 229.318 279.571 229.465 cv
280.03 229.859 280.325 230.449 280.456 231.236 cv
280.554 231.908 280.644 232.58 280.725 233.254 cv
281.546 237.123 282.399 240.311 283.283 242.82 cv
cp
f
291.253 241.154 mo
291.218 241.17 290.261 241.854 288.375 243.205 cv
287.276 243.996 286.3 244.58 285.449 244.959 cv
285.349 245.008 285.251 245.033 285.154 245.033 cv
284.923 245.033 284.71 244.885 284.513 244.59 cv
284.219 244.195 284.062 243.99 284.046 243.975 cv
284.012 242.529 284.104 240.518 284.316 237.939 cv
284.563 235.197 284.686 233.219 284.686 232.002 cv
284.686 231.166 284.653 230.377 284.588 229.639 cv
284.8 229.424 285.07 229.318 285.4 229.318 cv
286.022 229.318 286.382 229.547 286.482 230.006 cv
286.531 231.352 286.473 233.363 286.309 236.045 cv
286.145 238.725 286.079 240.738 286.113 242.082 cv
286.57 241.885 287.171 241.541 287.909 241.049 cv
288.711 240.492 289.293 240.125 289.653 239.943 cv
289.736 239.943 289.878 239.928 290.083 239.893 cv
290.29 239.861 290.44 239.844 290.54 239.844 cv
290.868 239.844 291.106 239.977 291.253 240.238 cv
291.45 240.602 291.45 240.908 291.253 241.154 cv
cp
f
297.229 238.123 mo
297.179 237.516 297.072 236.836 296.91 236.082 cv
296.744 235.426 296.588 234.77 296.442 234.113 cv
295.949 235.475 295.523 236.836 295.163 238.195 cv
295.424 238.146 296.114 238.123 297.229 238.123 cv
cp
300.82 242.82 mo
300.917 243.082 300.967 243.311 300.967 243.508 cv
300.967 243.836 300.828 244.123 300.548 244.369 cv
300.269 244.615 300.081 244.73 299.984 244.713 cv
299.179 244.566 298.672 243.918 298.459 242.771 cv
298.228 241.525 297.958 240.484 297.647 239.648 cv
297.088 239.697 296.531 239.746 295.974 239.795 cv
295.335 239.877 294.834 240.074 294.474 240.387 cv
294.292 240.895 294.055 241.795 293.76 243.09 cv
293.482 244.287 293.211 245.197 292.95 245.82 cv
292.819 246.115 292.54 246.197 292.114 246.066 cv
291.573 245.885 291.285 245.641 291.253 245.328 cv
291.203 244.705 291.383 243.869 291.793 242.82 cv
292.287 241.623 292.556 240.77 292.605 240.262 cv
292.622 240.115 292.515 239.951 292.287 239.77 cv
292.055 239.59 291.941 239.451 291.941 239.354 cv
291.941 239.27 291.977 239.184 292.051 239.094 cv
292.125 239.004 292.297 238.93 292.568 238.873 cv
292.838 238.814 292.99 238.729 293.023 238.615 cv
293.318 237.795 293.785 236.27 294.424 234.041 cv
294.965 232.105 295.45 230.621 295.876 229.588 cv
295.974 229.357 296.179 229.244 296.49 229.244 cv
296.72 229.244 296.925 229.318 297.105 229.465 cv
297.564 229.859 297.858 230.449 297.99 231.236 cv
298.089 231.908 298.179 232.58 298.262 233.254 cv
299.082 237.123 299.934 240.311 300.82 242.82 cv
cp
f
307.041 235.934 mo
306.894 234.9 306.016 233.992 304.41 233.203 cv
304.294 235.941 304.263 238.844 304.312 241.91 cv
306.164 240.059 307.09 238.295 307.09 236.621 cv
307.09 236.393 307.074 236.164 307.041 235.934 cv
cp
308.811 238.564 mo
308.649 238.943 308.492 239.318 308.344 239.697 cv
308.148 240.141 307.935 240.492 307.706 240.754 cv
307.197 241.395 306.689 242.023 306.181 242.646 cv
305.575 243.4 305.023 243.928 304.533 244.223 cv
304.37 244.418 304.188 244.623 303.992 244.836 cv
303.795 245.051 303.599 245.156 303.402 245.156 cv
303.303 245.156 303.189 245.133 303.058 245.082 cv
302.926 245.033 302.783 244.977 302.627 244.91 cv
302.47 244.844 302.36 244.738 302.294 244.592 cv
302.246 243.902 302.222 243.164 302.222 242.377 cv
302.222 241.574 302.253 240.377 302.319 238.787 cv
302.384 237.197 302.417 236 302.417 235.195 cv
302.417 234.129 302.376 233.154 302.294 232.27 cv
302.279 232.254 302.098 232.064 301.754 231.703 cv
301.54 231.49 301.433 231.293 301.433 231.113 cv
301.433 231.031 301.451 230.949 301.484 230.867 cv
301.565 230.67 301.747 230.557 302.025 230.523 cv
302.238 230.49 302.45 230.465 302.664 230.449 cv
304.042 230.744 305.484 231.516 306.993 232.762 cv
307.386 233.09 307.706 233.434 307.951 233.795 cv
308.739 234.959 309.132 236.049 309.132 237.066 cv
309.132 237.59 309.024 238.09 308.811 238.564 cv
cp
f
316.387 231.383 mo
315.821 231.383 li
315.739 231.383 315.617 231.285 315.452 231.088 cv
315.289 230.893 315.1 230.688 314.887 230.473 cv
314.674 230.26 314.452 230.088 314.223 229.957 cv
313.993 229.826 313.772 229.834 313.559 229.982 cv
313.279 230.195 313.063 230.426 312.907 230.67 cv
312.751 230.916 312.636 231.18 312.563 231.457 cv
312.489 231.736 312.447 232.035 312.439 232.355 cv
312.431 232.676 312.426 233.008 312.426 233.352 cv
312.426 233.631 312.468 233.865 312.55 234.053 cv
312.631 234.24 312.731 234.449 312.846 234.678 cv
312.927 234.844 313.03 235.027 313.152 235.232 cv
313.277 235.438 313.423 235.688 313.596 235.982 cv
313.768 236.277 313.971 236.627 314.209 237.027 cv
314.448 237.43 314.73 237.902 315.06 238.443 cv
315.517 239.197 315.903 239.902 316.214 240.557 cv
316.526 241.213 316.681 241.82 316.681 242.377 cv
316.681 242.803 316.65 243.244 316.584 243.693 cv
316.518 244.143 316.395 244.582 316.214 245.01 cv
316.166 245.139 316.063 245.324 315.908 245.563 cv
315.751 245.799 315.535 246.066 315.257 246.361 cv
315.125 246.492 314.928 246.617 314.665 246.73 cv
314.402 246.846 314.132 246.902 313.854 246.902 cv
313.559 246.902 li
313.001 246.838 312.526 246.652 312.132 246.35 cv
311.739 246.045 311.418 245.713 311.173 245.354 cv
310.928 244.992 310.747 244.66 310.632 244.357 cv
310.517 244.055 310.46 243.869 310.46 243.805 cv
310.46 243.74 310.488 243.654 310.545 243.559 cv
310.603 243.459 310.677 243.369 310.766 243.287 cv
310.857 243.205 310.953 243.131 311.049 243.066 cv
311.148 243 311.238 242.967 311.322 242.967 cv
311.453 242.967 311.582 243.041 311.713 243.189 cv
311.844 243.336 311.976 243.514 312.107 243.719 cv
312.24 243.922 312.371 244.131 312.502 244.346 cv
312.631 244.557 312.781 244.727 312.943 244.85 cv
313.108 244.973 313.288 245.029 313.486 245.021 cv
313.682 245.012 313.895 244.895 314.124 244.664 cv
314.271 244.516 314.377 244.34 314.443 244.135 cv
314.509 243.93 314.551 243.723 314.568 243.508 cv
314.583 243.295 314.58 243.086 314.554 242.881 cv
314.531 242.678 314.494 242.492 314.443 242.328 cv
314.296 241.771 314.055 241.135 313.718 240.424 cv
313.383 239.709 312.862 238.859 312.157 237.877 cv
311.582 236.893 311.151 236.041 310.866 235.318 cv
310.579 234.598 310.412 233.951 310.361 233.375 cv
310.312 232.834 310.328 232.33 310.412 231.863 cv
310.493 231.395 310.598 230.949 310.731 230.523 cv
310.862 229.967 311.066 229.51 311.345 229.158 cv
311.624 228.807 311.986 228.514 312.426 228.285 cv
312.624 228.188 312.829 228.113 313.042 228.063 cv
313.255 228.014 313.427 227.99 313.559 227.99 cv
314.051 227.926 314.481 227.957 314.85 228.088 cv
315.218 228.219 315.531 228.387 315.785 228.592 cv
316.039 228.797 316.25 229.014 316.423 229.244 cv
316.596 229.475 316.731 229.646 316.83 229.76 cv
316.912 229.891 316.953 229.998 316.953 230.08 cv
316.953 230.252 li
316.953 230.531 316.894 230.756 316.781 230.93 cv
316.666 231.1 316.534 231.252 316.387 231.383 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Scott Shirk) ()%%Title: (QuiznosSSS_ovalvert.eps)%%CreationDate: 8/28/09 4:42 PM%%Canvassize: 16383%AI9_DataStream%Gb",KpHfcmp[EA/g]M;qMqa/\C@A)UM4,/[,m'!hjN7;>n(PNtAp1Vu/hA?1Je'38feYF^c"SsbM+$'4f1P/YA(pcl-*G=/60@14%,faJUO!PE#jYO6r!Kn.B>sl+I-Z^1+91`.EYQo#rDHX$mY*ucL8]*$Hc"=tq=H2H84S.=+`=Iqu\73C[bt>tO'i.niic?Z5g6M-t%jbfJ8)HEOIk@#cTjFt3f]3Hd*[B'%6@jN`W.Q33/AB9ZUN!7,YHeQ,:.ot@Mo)o7T9=n36gr'Tc*I3-P[TYp$@"Pas%^5W?#XYTj%Dt`Lbq,hOC)FgcDeSaO9.2u=$C,DNU3sYd"?APYn5d(pHC;")`9Yr!9;j)0+e7F#NhqO5X,_=s_\-/naV7<NtoU<r]o4QbS[0!uj%Q>8(Qq*aI1.2OG2;N97Qq0tXj01d-RTBVWIG/\9&eB0A]&t=!sp!>1VQ'Jl;oZpTt8"1,.^jW'["f(U$[QsOeV2[T>M/-o3&B04j%gMB\=iWR;EZW=:_$-#Vi-H.iKMXsCs/o[<jaRMA*M_bXE(?YkWR?_F2FD)X"LLK4qX:ls(\)TsRZ!:M<YuC,")s*5593$d`oSF-@%e3"844Xd0mFK9!(Cs52U15G9W*1&cMV\9c95i6<G)*#VD>$Q^[J4^`EU6[Z?#.3qF-cC5QJ)]_M/^uKbr^7?j'a:4P*M5,*egcRP%.Z/IN'_/1Od]<1+p85M;"ecV65:Hq+.1/Bj8j:S@e9-GlFbJ0$%t!V'6KpNtiB)EVW([Dh1)]GHal&FX#%@(J]UI.s$MMd.nTmAp%qbW5#^(_YM,JAstfl^/N-1DeGO=#?E.&;\s9!9C,pl$mt&O%GqN"`QOdY,sA#q<`(*/X6CNf4\21X_8dfSVNES<TLbIY:&!n/5[*%H#.!]6-Ld=.2OG"n<s!GPZ-otmM%T@4(?KG`$"7c66UdPN$D1+;QAt=.PZ<>.&;nqQu[oS7JcKk59Y/KrqK/A`tj%l.&7BGW>)=t%:qkBRECQf-LcNp+-8UN$jZ5_*^+m>uasm%?3Q6p%91NUbU(HZ%@?<OIR7J@lVGu$F80:#?'\.,tO7Itt`Fjiil=('sfkg%PcI!N.%Fu(.N]#(f`0rLI,Fb-Y&-<&'2MB1e>SX8mV0kV,-Zr,TjMTnmdVu>k&qF<9</!F^(Pr[q8*?e5XW;aB/Sb@mdfP5P1(?:UZqc(1q%hRiW>]j2Xf/)?IGj0C0?`/&CGHb8'@\2&Hb]Q@E4PNOssLTf2Wo(J[ucn"N7rBoIrJ*nicM^;o%[^`O5:K?XlpQb_l)Z?aOCi7Ms%9;UhepQb`Se+C!D9)i@WCmMN>YOjK7US$@DqStUGe=NH%n<qFaIV,59/'oY7)+i+do>o6KcWTJ$;DY9\q!j<?k;*0%+<'QjkbMKT%E>]erV=IamFWTEJ)'PQrJG6tE5p#MkKAM-2S0D,;X:1IV_?6l)d$6_PYJ]Q<;h<5O=8]6eGK?$tYLjf(6Y;Le84=[$#/`RG6V!!0%<1$[\oF8tC_'S74%IulTOh8DC^h3ZF$.iKVGusGK#C(3@$W/54[-2d8Q?iBUAFZ;h.eB[AaocF;Na*/P_4&`?DETXo0Xh+E9[IQ+%_;531&fB:&\<]FmSJ="+/U\1%lT4S>C^Y8/%6PdEb-A1+RauWM.#_r8[QjiJcmPVqUFiK6\>SWopn+'/]'Y<O_mQTG<<`gcJ?J-M%WC/J@QEg*WhkeePQ)JBc!(X$+>%R$=mD4&4C*@&HmjOb>k="^t_5;8UY;$&4e?\^tR.o`'@+M0NW]\Z)#,r!oj+Y<#;`_$l4kpaH%oiBPtHE--5ZAKRYRml0DB%O\C"jD\a]g8L,1cJ*D6[4VR:/`3(d8\.=lH!12@sdM^oj_ltT(cDdqAap$LY$i*?3epgG^F\;6snis%6^@U2/J$@#X[,7Lend#N9WWojpRZOh=Au3,p-)gArP?ngBT5A.%uXZ)S.F6DhGFgRJKBdmX>bDIs5go\kPTYfp\p_el*OOXnT@+c%:L4q%=WA#jDZ;4i[o2(het^u@^D%CS4p+;[SWO/`m"7GT;\0'Eh$]q1(*7`4T*b(3UsWoBq`Rmritfse:^=nS'=XW0$,+nX0C-u!%Q$R_,+F+W=l`>qL(9+LG+<<R6JV2Trn#Oc$3E#Ca"kn$EG44,bSa))aHI(EP7Z\D2mir%]W;O@iQD!^Ca4<$/`]l4KiVt$idkVi]%k=A<:)g%X\p0@'JN$BK/\<jAIW/*m2ST4NLF*euHT$e7*p0M"q9?2IjnmT4KBqW0$+@!]$T^N5G.PY-[J"We5'td2bPmQYXf/fW\%\%>i%Z[gIsbC;Q3H_n+IOf%ub(+,`Z`uhIINo!GbYLh:l'qssM>g<0"-*`$lk^IUI?86rH2=tB05IMX7;@ChF#+sX#Qe,t%S%Cmq%TX:r'rg2cU,r:YOJ%`d6XM?r\cg&p#_&pp=9BHtW`U!1:f1A0L8Y+EbB`7S('KI4(@$Gp#M]V!&`.Q7Gf@0cUWoO-jLh"4&o460X%5V;qe9$on>/H"&5`p>*V)g%>Fp3'H"79#Y"b8b+<Z<_=1.9qVM%bi,;#B*C&i@+=]oZiZCY!f#c3M_B@^.PW(9^(]&_$@.VQLV5+%'3:IiQ"G`O#,ULN`(98uok*OjWOg\::-1keq;-/tq@op@L=4C'\Wo:GMpj-i_'O`F`bL!0#b%I.p1ICFl`.m0BcRAQ4*]h[d9L#(%1[>T@0C:;>n)llB%P\g:(Tu\3`lUcU-a!3ng(h:2HDK"k]#O[DI'csY9**78dAa#@-+kM,82o?D!),MF-.OL9RB7WkID'UpMO<Ec%[_"5L"B$_k9@SDS_u!hHG;BVV<Jno;d;9V0jlJ[YVn3G's0?9S7J0'e9AhG/&=$RWkOuW@CO:kD959p0HM.qA-A^uA<G1hXeJ=AR%bM8lZ2UD\<%X=nm?B$Y;9u`V,o(TP3cYN8BM5FqL:@:@th",c#&"L-'+1,]>28b3`$A#lJ01;uU,KqadI@VM,g-msRj!-YZ3pt7E%4IGR$-l_.VFRkm;IDLkm48Cc;OWJcRA0`2QfcruE3I4H39@bJV_)_&0!Fd=9d4()8++9sC+4u'0!FF@t9hQ(8b>ZWY"^uQN4@3C\%,s,YU,56rXo7VG*!AbV1:TW:O7_gtJa0_('+W/Nr[LQOhk9Nsd(#.+<;[Vn0_n@0n9L[4^AIPn\2SG>r!g/I;\RJ4e4r$>)OIUc-%f?k6TVoUnF=HVmM&8pBBXDet):JQ`LY9fuBfCKJ2Qq$>#2PI:I?JoMu`10ulPc]E:iKledPN\N$Eq/F`Zfg4UB.Ds5e:6GI8*:WC%3<>8:qAq!6^KL0tBoCo>rs5_Frp=N^k[%<4fUDM+bTkQ,Vl,MbJ^To'+SP)mqbp*t\e9+ZF5]$bh]kqa69_HS29*p3BpnIX73JM$%1pS0nF'7]oqjlKafI+BG\QT:M&CYh@X,<ggS*XhY8].Q1O7\n4Sm497>O=I7,>CAZ*E`AJY2RLafFbZgh47O!E+upm[HkH4#:h^%%.TuLX][4G]jH&ikq]BFT2&Dmm)r,Z#m;gBD)Wgg#c[kX%ULD1,7HdE/ZIf)hZfZnjW4Lf!CTdB[XB9VkYYL*R/&e]N7_SiK-P`Cg%1ub=e)>Ts''<W1f,Bmt5/]+/MlRAF.R'fi@)3]OAO%7t$O*=pKUZ[V]]$YCZ`=%u3EJF-nE^mO-8LqXg`uHJ&6g_BQ):Ug5%F@+6%WmM`r=TCL1#.QY:UM#NXV>St"l;-MNciaC$SXJ]L5nrX/p"l^5RoNO^4=qpMUK&pIbk'`:Q<ET4)KOl3>Ut@L&u4JrCK9]q/Yi+:%P>O9\R'!8KJNS,\PjcCAH;3;F;@f6F`R?]jjm@e".YG-7M9h?g*)ZV("A"'BW0p+b/f&U2^UOnPQXX<3CG@O'3F^Ofq%Nsf>$fH(%Gr[P>`Oq;qo3<o?bN6%?9J2l/jn,(/;fbQ+c:L#N-fk%BQd'/afk`R19kRC-4fcQ-C0&I!=XbjfhT9CboZUmPR7nr%!\H"!AsA7E%OYS,#5?p7AcD@l39KJ_>V=h3]<msZE:.o:U/Yr2!(JEjg\Ps?]nT67GdSg_MVNd=8P#>a]83nL*R;G^FJdY6;.BKH4WikQk/n)Fs%kB0PCCH3sSDD&&f+F)CFR]7g*X@\kZ#o^!eC0o/a=Z)tOeWd)7R]<B`OJ.Q3T^jS1jHZ6u<AI0M8L_6F.B9*jZ6C`l+t1+@`T4\%%PI#:!:<P(hQShp2'j6hK=d0)k8P+1V-UGs#V59EP9:DYKMBkiX,YE[,9:V@cF(/1oLhSRilCo%-<Da?>;%c;p&Fl5MGp,]+rNqY!%F?pR>5nRWn&k#"sG_+oHI#cOITBB.cc>1)8/%j)!]Z:ICcZ:fN"Nc3G\24F!j+(`:i;bSB`occ$qaQO&-goClcjBHY9RL*%bOCfB%f?Rl_]>/4HVVR#KgH0`VXoNi1lf^R^j(PH@#$6aUJ83gT@$\'4O&`fiC.D@S%X$ru0Vm3.4a6r2;=_@sK!<g`k=Ud^W4).>$nkM4%jqo+Dcs#OWXApl\Xa8R&*59)INZMFJgO*',+oJuY8'bm4[-6+Rj-SlJRL+NVE$>,tbSH`q8s3*V4YEd,<6>cb4+R5S-P`$c,T5N.%5,g!$(g$C+Wq&H.Ku8(mWQW!9jh'<+TnC8oj;YWd0;Gd!#U%U#RSC-1U/,0DB1lK&K!!tQ$O9iY-:LeZfdi`O-E-P0qYC&YI,'@`%5G7OJ>`'WC^YWr"&o%An"u#rfX)8:aquE0H-M"Rt4V,-D_Nl+.kfgrkI<[Cm<B:'%hgq\h'Ab*^?5$ia=>,SoLC<m">;/o($A/HB%:dd't+G!Jq0eO_/(pE4=iC.uk"bHf$%q>aM&U:MlfLA@;BHb\,?1VJtZ\'ro98[-(j1Lrt(!p6Q+rP2O-R8Tt%rMCs&dUA-/?#qZ%SCG?93uD@48P+O2:jcBM2D74pDbsXkr;VR[Cp\^N2RaK`TJg`G:0o[s8pjO$FQM',627:VUd(?8[>!QU6q7g%6%!*X^:o9\h(;qq%=MLLeY_AOECHak4g:Vhqq:W$S^$OfW*u.Y7i'eAkM(hi:fglZS1mgsWf,3.:]BR,[j@+p):JdMsc#-#GAdkD%(-j)i29o6l98Wf@%P_,@?W=[VDEN0X6n:l)h>U3'c"G%T84FTlV9jXO!Sj@3e86q.[UWqOPBE85b,3p2tk2dJu-)f)C\!*(`,OVnRTEUiVQ53"%'gdW\%<lG97""$rqFtfrm[i"5Z-T47l6P$fFlikcL61ZQeU9EL7)cV4ECj:;-VPmfN]ZM23iZM)$M6*$QoVoR<OFl3!\?N\5D4ZI!:^Lh+%p'alWDH"qqIG*'=>23GAl,=eOY5n4^)7j%`/7/O@laP$e&DJ3W<hTBL1_hA>ocm+!dA\Qp7A#A0(t0Tn"pmE-kh:$1TE@JNS1aE'%:.:q@(60%N\+C$I959Q2#SL/<Ig<1hrZK-PYrB<$$>I)2!D[tRbL+ZS2_euBr2SCRUK:!KP)V8E;6(R7ZP;Tu3CjZYnG)o3eqS[g%LcRMe-IMIK`:85<f6)%P.PE&i*>d%bW!gB]*V'`=ot]J-nKb'LB($9Sc-@.`)nTT-Rs?@@C.V/5<?+9$2c$I-c/:J`]9rmk8/i:8%[2Ti#T/PttD@`CR&0>BK!E:'RS.6ZcFk:/#HeKn4OMO4-jDk=S$.`D/AUuc2U+G$&][#hb!8rYS%jW82HN<:`V])[R\VR^'1)dpf%/'p,24G6_4bf,pp>7KAFRSB\Y`F?H*B!o]#QKI1b!4W@HJd%s#)C%Q\3@5mie4gMAAhXd>S*oc8&FDA]d[W4UYm-Y>i$`H.1r9KR%:L#Xh<>AW2-8X@8ea9P#rG>B$?W1LI;<IOr+T?kO2ioB8OIJd><G]X*Af##!DbWXaJG!ei$uD*o7[a$)dYPVi:a`!XA[&0Y.<0]6%#iJj\+N+@:pl!XqAQ!BQjEVBBct7imCuf\,eSIRVmUbFp]COI>N^10QN3Pj42,aB!1=i8h[P#,N4HcAD,pfd@_!X!T?.XD/<n&:5%Zc+%8%""-,)b+9=FHHM<XQ=[uU<S:c0r7o]RC7sP.^;HL;JDm/>Um$:M2%%BM@ctrQ)9E3R!?6HJ"JWePKAF*iLSoTVC5D\oVB@g%9QFN&Lea^RF;f:YRQ0f5MQ#3kj'eW[l?"_8+u(_p"KaeO1/+Q9FB+1]b9b`<8G3#pT(.\$J?%91#[Ac2g))Lg01lfQ1:1FugLuE\%<2_8e5i?lroL&lT:a)tK!u\]_NLIp,+Xj^??\ASM>nUh@cJ'%@@@O]F+tp65X\tjF9^r=;9R1oOnPE+?k)jbF(MG&6F4BQVi!4MH%=9\7tC,XV<W);r;AmS>O=AG_s#E?=^;A@>kD+Ho\G6VFl!%_d[0,7GSP%g[:4"a)<lo'u--.aG(_fE'C2e7rTW>.6eN<cK2?hA'R%?='lQ$;]r3Zrn/$hHj3p7QiX?N_Zmn0]%O8ISF2R%%(lnU.`uI#pQ#q/,lp\TdV:Ep0%Q"a>a43^ao,i<[;"V#LGH\`^&R_MF+)4%/+s>$(#Brr:t`?>Vhb``S%jc]jpV5u]T%K80cqkj+lXm7$lZo[blr--++lHQB,%t?dq.?ij@#jR&7J/SMPu[dfW`#egAI*ZRg34-%s,4_s)rfL**N^Xr+]Xf:n^,)e`+c!,JJ;tN*99GbA)9k$(+(qS<7Q!=BKU'0WV_9:NO]stN0g%8FG>>rF10_DgK\t)>A07#bo&dT%&VF[mfAhfpJS0tlJT^SB0A:IR?*`j5<*?L/5Z.'MWX;uWM\_Vf`lh%#<'mn/Gm7)U=@%U$BEnKSj%RlLg'AVBFAc-GFV:VeGRVS5%R16qn[N?hp2:7/D'TjsIPtDl3+V\="NH=ta&nq$+23ib#8R>uO;HBdHTi%!+\sC`Yd/h#efF]"<8qIMQa@ndB;aS)n[DO3m4eD'M%TZSJ=N'Q2@Bk.^C"KZdA_UM$e"cYPWB\(R+g&.`$,b[_:MbVZB#6W^af\4P'?sX_:4-"+*V+A$+"?X[k*iQYe(dqBQ*=P3-$s(ss%^E>/9<sc(?F9Q.S`_0lT9W'.lN_<9s5Ke5F!#CVEU<WrS_5]7P84%.HkVA[hce+&>=D-F;R86.OJQW=KUX:u[lA46E(kMddY\6]F%3$ng"e'njr%+bSVAP/l$C]JG0;O8^[4GsDTM0BLB*0jsF@]:1KLt##srN`@U:W0NR$CZN2YBuq%i2W:QPNFRGLn",[=%7<tL=$.K%VM_ia15+73;nt5O7Yis6[ZZ3*9EO]L@3QC"=g;C(Pt`UH1ou3sL_?6a=]Cpm,aGKX19TF]0tSYqi5HUOs(9<mmJq&YOg@UZAdSUW%5ga/o-o8I_LlMrV'6!1EhA[S4)eI(_o.p!YP(li&b[PLYOT8gQ_f,ibN/F#9OeHH`mLZEI/>\YSV_S5t8@H5t5c*eTB(/oj\?oZj%Of>u=n<+6]n;IKQUZmDaGs6:D^<'p?jk1]52MsCDfE+-O7C7<i2@u#b]gu6EiGB5/VHC,Q'/`:pBHDrqi[!9h_W[_rF2=LM@tr2L%JnlK/5obtH%qda<qoDl?'YU0lk`(#[>7ODX4O6=r86)Ff&dPf`!EQV9-r^>#iX-B9LD'5UQnIL3NqH5e5a;dUD[9oj=ABPIA^#Qg%&8`@(_F0^7CPl^O[k`br'CC<SOD1GdJE>l1'1G>:UFIBTgDW[$J_>_^<M].9Bi[Wjql#C9AOmXu'8`^"'CnNON6qbG5XSXg%P[[U%4OE&h8n0\3\TZ9#K5trgq13L<;[EaCK](dKBgB`_M?"$DkT(ALW6+RQ,D\gO]p6kO.;?Y0FF'4ml5$aOUKjOIU^bhD`Ma,<*aqa%%H$')eS5joZ?(j7Y8/P#RBnZ#U8&_/E7^<97!hO#ecSDdH)\IZJKFmMaY3IL;3UjQ1/5uQ4&oO87"F5iM.1K,u[ZlQsbKa`XOcb=X%@U;F4O,Ok@Ot[8d1nM],'NV($8+G8c$FI641f+p#-4\;a*!l\(N#MgR"iXtWEN3_t9ZukMJisuMHJ+mIV9UiT"NH',J;;QDUVKc7%BQQB?l8>Ko`,[D4K_7s\UW<I-AnFm!M*E;G+q(foO(shq2iG,2"MNE#V89<YgOYAQ$mF"/QB2*Jlnn#Z.):(*[4r5s'P+C`#?Od2%"c15,P!,.b$d86`1]ZTVa,kRQeZN.eq*OH=Z+?-g8i"Z/.&re#-Lb29Cd]RDFTW@aA`XRsUDY^AMDPXYqM?c0peg!a`f$Z78Tj&=%?*ju!Z:[b9'(4In[^+&!Sd17f8qJ^dMC):Zr8Ja8=J3\r'h,L#ZBOlNRU)6m5XJ5k,:KYA+_l1s'6kcVA3h5)]9/)QUOcfA0_Atg%>np3?SRl)qlqj_iXAN"dS(jsa2AJXPS$J$@!m5)l$686uKrV#+L0UuRQ#mdV5r5^KiYi2HDucJpF]^8ONHS:!U#bV?Nbq%6`9LVX%mMFO+,#tp!5UmgVYl!J6;7hW"!ZNh.0ENE-##Z2W!E_';X%te<I2N6.m@[`s"]Ha>2C(:+_?uF,#,%^a9+9DF>,nngYu+piP:ehk%:ruXTj+&$e",Wd]4M[\fUUUYg@Q0HeIQE#G"=bmeak6YF\lY)?!nSKDD(qpP]ekKL/DsR6U;nUEm@'[4(1T(IdWH>?0k5`tftk5a%Ci2P6^cUB]/&+!I4Q@46Dqs:PY7ktP.,u-qB4j18/r1X(9:OlY`t2`hJuA1?i^S>LIZ$tG7<M4>cmXaP;Pmkh9H+-_aX%nAc2dRD%<U!r,V4b]Joj96'TV[iSbn(%Y[9H5]S-F0g8\s4[Q;U$&cDh_Co<LhB'?l!\hM,Qe4Nk-T4?-#E6edNO=dGS&Ns(EcK_)4^.UBWV%<f.a?3+D('W.#)2Itp$#0g.]^(]Sjdn&Xs]aPO%6GU^TG#J^KhHf2G<agVB/De!&1ra96+`d/1G8YSo?Vs52Ti*jk8rao%J!qm[[%UW%aA[sP5u45>NUD[9+N)P\IL6n@"'4E1E3ol]'VVHY,TmT6XVNOf`\#7\D`+4<]P`I;q+g^Elr!5T`*%<MhO'@]dmT*WNuQ6Q"K%CiU!P0e`C.oJ4[g#W:!3bE:V%14VG7=WkX4Gn=Ab/G_*oW4bh=KDk0bhZN2MMS]:Nq7,_Ji8q_+D3pp"j;UO!#<r(%F7doVj`\@C%JRN$2c<FD%bF]:UNi\D#Dgb87oYP?jp7H)r#+(VUX[`-#h(kJ07U^EuN"1[';n5e@Qt-X6n`AS1bIrX+Xl&mg[DgcLcZ'7F!>i.a%&Xo+6n:LWr.W#OiA<n=0>.pVL%3mRb_S?tCRAO?Q;X5be8N-41;\YdohiVXK4k+TO':Fl1hLU^:mTlhjIkpHeW:Z<I*_./9$,X>8%.2M_S^$#.[U/LVK9H!Ys[`GcFoi[5=dBK"[<kEA/Y*cVk)3m@lCIGn@H/=+PW:VpjB"J]3pbVEK2_dm!N_7d6d5:G(o;)nJNG^^;%HG)=m2=%nTDAE%n/XOU,J]8dKN4r,:IGUJ\+Y%36G4iAt14B]uRC>g'$P\1WhZNmd6gq:MB#/7XH6_3tq*SsMb-aDgoX[2=I<-Dj%\(Zh9\P;NF&Y6!(W-S]CqVgU8@b&_XdBX[Ql#AetgSuE@fP$FpDY.3krrrNMGj.<aEn5VoYE#s&@AIV-m0tE`,EhFcj)"0KOmP:g%$j[Fq7om/\cM*&Whht`l)5hi!RI3L%X5e;?8<(SJh&E8=j)f57dQQgsVL&El1`GW8P42<]^-O.bqNNXMr\Q.g:I`J&ol"[<ND;B"%>pmaE5DnL6YI+2:_U2#0,"L&*<[hh`/DFgM,%h2<:@Ar3C`DbRZY\.><.L_V91P:B.CrY5]n]mP:.TJ&<I,0W22DDQG&(\Q4>b;`%qCQO;4"^>>6K&2%p^0L2GY52R<NO3_Y:#dY7't:T/(%"H2Y;4pr;eLp\lh.5pK8$%(D0&!#LdKJ*fQh=?8Mj`4C>"qcN>C*#Jt=Z%N(1ge2-WO%]%jkY^;JgiTN((QWEV7O'i_ab7k$B"i]6f2+PF(`!%GgV4td4pLuj,KC&-XJ`ZQX0\^igGMe)9RO#52MV0ZMS(F'V)%]rHf@m!B'AL(3/kkZspUnKuA^)2$"jiOMaGk7IlL^AZ`;aFs2bRs57%L,kWM(8DNe%Q,EWS]gUqpm,?4Q61,L^/Aj2hr=QI51=20%>>J8*'jX`;=l25#\anZiidmHR3skK)Ccn0-aUnl3"uRDC;&90Q!okLmY77-gifPD`_]9U55YAq#oScJbE0i[c]6>.9Wh^T2q7k!T%IH0dQ+Ef",4V9jqq4#P%)kQH\/7IK*Pbrl-_d:^s.7GWF4VhU>6:N9G/<q_ToQ(V>Qsq+?NV\i=Yo\CU:hoP%c.[q-B$nAV1ZZRB%_gN,:Cs7X^Qn<`V,HDp+L(3j!MIADPOXV0?\/g'3s5.-6_nPI^8!QHVm%_VA,8.Y.d6mp'>nk.hI,DOa6pC!$^5KiI8u9jZ)3;WD%G52'-:>HFg_h\4Zap7L=OgT#h4_nS#7`D^2,4EulSr?jtXIPapZT(KeTY'6R'6t@=&+?noG'A<m5Em`YlP61.<m=h6d&<"e1TD?I%<910o;94d-3;XN\HHZ3B7\uQdM]N`jn0,6)6gq\m]<1'HH`tMTN*84iK3r+PAEIB$m+hZ12=,*(EcsD6CEtY]UCuNSs!I<kgj!C4%<o:e[8"h!HQ-(3sL+;Xh@d+OBGkR<s*O>BV-FM_UA<4A3>?:A=cl2'.pX$.Ed5?j_^O83`=i9[ta2Od>?RbX%T=_'"14D`j#u#Te%BFJGB.K%qM4Y*feGH#Y\59^e0Up6]H4+,#HAf?fH0iBhX`C$[?SNOC!Ro@ll8K&[RI&0`O<W5"/jI?_KYhN$5:)EolB=n2s'ea-i%0(5$f(q"D7GdgnpNp;&VQF-0jQm'Z>MBCt79QWlrXnjb9$o90jh>nD8YV5kaEu65b-)4Ab)?5A#GNESh:;]K7F5H[ObSuEcEr7p9%a'f1Vi^828jobG1%s&^;3[LQ\>K=cm`lDMB`>SUZNl1AdQ/aP#f_f1P?6A;h9QWlrXWTHha'f2!XC5H\+6GOVF@o"K_AfrD0LNPR%1HMFZ#$>nu)NT**i@*P?E.E"[@k%=k;Y^"S-8GWhq"G>EVo_I/VN%S2].CMiaPC6hY=J]Akd[ST`Ng)dCXIpMBD2*a3Fdt*J43E9%b8)ZbnRIJ8[V00/2WPW*f78TqLc./)_f!gp<7J09)r%\Ip1t_ANU>EOSrN-jkh@o^VU""*]C6odX@4K85I?2)?8bZHNV[!g2N`h<%0:VL;3@Xu<<_b-an%6EM!B?%9=PiZ4K&6@<)-gF,I!UsMH8`P>8l(LFZ@!+fCA%I=r+OpPKo^[5No@b+bP8LiUN'KM50g>=>b%/>%R>\sm(#Hjo.U7dZZm4<;NT6tp5c%W(>GsrdEI7kRs5"2ahO(`lX^jV[CZXbaQ69kiBOqEfF.OF?ItO+sM4m,k:G:Q8nmg]IIStY,%>"7VTrjZ>jm,h^6SX<jcRe]2q@E?\tdAkd"-90H6G+Z`;HD[AXmmh`B/Ai_l63\TRe`jV?6.$na"F^/^6tAX\lpH%)Okq<gO%`*:%F&-+/`1\M'\pJ^O&+B(h(jah?k%ibr.(RWQs1X&&?(Pks>>J8*'g6I3chc#9g#@7A`f@e63!]TGmGu$eSNPPq-&8bT1>Ydo7G`8N%\XP22mGp3#i5XNn,I*e5N!jMO$f(#4L1\)P4B,P+j58c3D]s=%2Vpe"\'q)A(:*W4Kqe)Qno33l``pO%CCWPV?>HP<nBd3pCF6r:%$3hbg<3/CHgXA%7N<]aec3Lu+^TZ,UmZQ8?bucjEr+aWuf%"\`8Yd7_R.u&WhOLt1Au/u8MFq6Pr:ncnlUs[ZeSet241gK1DXUbN%qa`s(4"e+(7a[4LRFT?4C"?<.!]*n$>:r-DX$=d.`GDY7bgNNA0PZZ2QeJB;is)cVj-&3-,W@?tND":6^*La7O`t)is-9YP<hCJq%oBI9IIrf1",1C('i57f++&@rAX7p/J,QTtlL\>%%@^7g.4KtCA#c[_l.Q]NRAe@^_irbnBk<F-p-F/J;+s+7!e(o#2AS<<Xqkjp$%cmu&:42+'Qg8CB$Y1np$2Z9Tmf58NMS"9p#<bZ7'`\-84o$+[^1ToJklSde7c+%XIY1nn[h54Wt1d8hiMK'6nh_.<egWA=Y<hV_<%=+O^UNZ)!O`qRjT=)>c&hErOaN=Nu&cknZ-LAW)2d0U]]HY<h6dWXiFk(ik/P=iB.@[-c?nOLo<NpiMnXM/b's/BGuS`BTC%@cg6%<IQjmrc:n;1FfPKI,Cq'Y4!@$mJVUDFaVN75nJ:=aZm^,Vp:onP4`VgqaD<NEl4m(YseW^]*jQi'G1*>DrYcs^\JM"r54u"4sn?t%XR2X(:pT;<r/OOnmif.?_f!`#LPMb[_BmS`9*<l3=510->5lQqdf2c<n9V'_`(XQ@V"-F5$6p[TEG@CRW>R@0M5Vp"AG/5$k#"bU%rq7XI.6:2<b,#-!j4Vdt:=0\-8#@\\&G7)!e0'uDO)*VtXEBF>j1AucM]*h/#(4@`L,(Ar$uIDoI?^HqF@*u9N=e^2a$l!HFh?\.%`\:TeED^4Ne/6c2#,Yua@t:m;j2>c0'=3IK;/@,8,HDg_/3</<OY^gN2l<YNmiCJ7CJ"f3OUUb]8Y]3>.etidN-o92H_Y<;)s0fJ%X;.Mn2''BeSA:S9hC?!lIEK4Z\c>&5b*<"qaPlIVp(d&;kL=;7l7pr6T*(2;m4q:?iT&b\kX41l-lMjD5[%317r8^E!I\W`e`^1+%JD^?>p]nKJdf@[/I-[MujGe(`o^@G^j'*>u=)M=9Y7us'mDaRd!nM5\lA-PKhCA](]0i1"O7,a4D_B_j0=CB+#<Y4/!)95.IOmNC%_gQh^3ZUS;G0G*[GC@2F5Mi9A5/oKLb8[(%Qq[p`lJn/J\T(@!)XWu<j:b^8:_FkJHQP<))oMl>'>AJ'2bs.f$/_s49&kTnm1[4T%Z/mt()sN%EURk-UQmlD'qc&M1^>[<2+q&@[n\(Vq`YmYniu;WYUR^kr+#)^oJ>U`8pm1]9P4K,Laj=[K=-cj4C`(Q:lo=)Gl'1X(%rd_pPh[pt$n*bYB4'k<MI)^BCG]SKk^5ZbY6H45^pd:t'mK;u&D"IH$*CFV^*\%`BdU2rZ\ZZjhkLDP/ZKaoah"n]>5lJ(CqH\qa%j0kZ=rXAND^MlC'.r-8:7VsmA;%Z<3/cEd#D2,_X3nUGMEpq^-pNOi/,X_&2/p:LFI]%5[Yh6RK'Q=TZMl/p[%L+1k<,=h\"#eDI%j2!.4k=&mBLt(&@mIr4W-fS+8)6;>))?##Jc^U2Dp)@<NWJ1j/5$sp@-gfO7!+1>\i:\!m?]#CqGpr%G2G+-p?AuOANW59Em/aZX%*;DH/3YBGg\HS93q//Q3"[3>oD"dLG[hpW"-?ejnhTC;.;ZhOPZ,$\=8fgKLmum_]rYrQ2&8@@q,UVH#A#/OQn*mH56)i*,;n$N(%/#[PONoQsU]_"\`dPtJMLJ(Ka34B@I#f]LZnpL'[!iL#h3%gV[9BLj2Yg7_?4eb3g\,TW3A4$,4+7Kme%5f;WDWg%+6l]r.U-"e+%p[BniDT*$te,5;?LF_K;M,E]-F,lj<1`GK,;q2lG7n1M4F4^oVfQRg01c+4,1HH[HmQ4d@T+/F4*7WMt?0Bj_%_:mFSN?E<<uQiK%(AcWWiX!Wbha:e)']GhDMWb0A-@91ZgB<Rpiud/Y[tDiN]>r>rrR0K9@bF9B-;.>@L5L@KL/BYkI%7PC"het\U684,7Fsp34p&`R%f\P4=FD^_94>scX5:#+s4(J_<<%Q#o%%KNP\(\j2p__ka[.IepnZ`cg4s0KfI(W#olA]L=*oA#K=A?Ts75Okr.K]op_nM/8168.Z%I)+K=O,ri@Rq[,,[Z/]BMYsm%;-?55oUg1H#MX12S3E`-qYX_Zo&[kFPXpNtc7S'?\r9.QTIIf(Qd,p)Q\/9hI=9u@<a>#qnSEl[%abS?NU`/FUrs_-G*p_K@l5BV/0k]bF3atF=*W4K2TjcH>%hX7Z@X.PDQ!\)>p/8tI@^T'h5H20L,Q]"<6iQ-=&9;eD<N1puSNgA2%j0P2,+Ri-i&+oHhM:=0(h;rAtk@^Hl8]I(.,HGth6]g&e/CEUeq,jeF0>rn9A.4<$3r`L![jnZ91U@c#$!Y1,@dTP0MWXMKpok!A%IR)Ac\.h/dJ%ah#-#!7)(0_EiUaYh^S/7C%/;`n39G"EsEEWjBQ6j#^knhk32Ur'_a7/#M3]o5:&:&FB!Dql8%;&o*P*.69]&^4=%GhN4<iK>2$l)O$$o4$`<ieX>k7m!BgSbN3s5)XD7'XEj/cH#ZfFoNA+e=/19BPJVgH5,k^LaDK)1pq]H3,plMVhI@]\k8l!`F?H*%B!n/?C>o_(e/b7ZF"+!)BBS9HYFm1lE+fY&h:q5CPdh)Fh[@'W"V,'o#DqA>0+t\-_?N1fS#Tm)n0!Chbg:nE&Pp20R#Tf;fTBdH%5mAjl2D9'j`L#&><UiB;C7)8C\'$)_;h.Tu_r6$>)D-.UJsjn0j&eN\[pES@1j\8ZdY?ppnr$MQfi6))2rj-l]D3.*1ht%*fn^_/%8mn!4?]3Bk)5C(Y5LNNNL+E>tbAj,3f3?Al0pqiL)]"fe>Q\H-ifH&N61El#(CZ*9_%MC!XCj>^K*Tu!OphB_ra)1S-Rj>V%j,e@%R7SR/cJcTHLKOJ-`5@()`rA[5I,Lu:+a&@F5rOOCJ=B3Lml;r20#oV[k\<b@j)U[g6VNj,nAI,inR!s!#KOb9nd]15mSAo^R#a;A%!goS>%r*q2bPO0_=,hTXeScC^jWhR#7"eqcI[]Wg1.a=V[?C.APd?c*UKi^UJ@loa+P+^o#`5$'bKVeE"WXanK_(L,Hlc[K[*^E@%^"ngMdJF=46KP^cG?jcqp-?4>3\u[0/H-8gUgQ(cil(4Gr\J:#`DbY]_n1.E53j)N7=KahKRWIQ';Nqn%Pg,@Rm:_BItcU8<@bK#%XXJkr(^1d2J7A34&!#alV^l/7WX/soj,GiIElN*t(JQ^[e#XRV8g+W/6$9bJek1FMCbhANG;LLLlJ1g$FMsJds-Ub`U-L?`^OYXZ%9'>7O36$-@a+B;NJ+'d's'.s1]=Q,![pRdY<78Q+gT]s_[KuYI.VB?T_Bk1^*>T%m(]`9sQd2[NXQ;dZoc!fT"^+1`-YSBn<_sFV%;fMNr%sZYV<_+*N8Ou0S[<uR)^p5>gnNUsjjh=V;bYs[f`aJ#TVI:'^qY`5iV#D`_XJKGaT'_Z=2!RPuFQ8Mq^"PaH6Y>3>MTnVq%^CgI+g#K9_C:#Ln)imQS03@HSa!>l3+r3(j"qlJq'@dWaeTDBX,`IGef*u3d7`$NB`Iua)+E;EDj6[\1p8^-Y]g9J^DT4_A@ja\U%/[JO><lAl#O,[lO0g*(17dn]k3P=40T:$u1f\:jl<[q40K1gU4V<s"Oesn7\k=XmG_(P5k$Y_.LZK]%=%O%1@[1%B++4;=R3j]m0%o,JR]?Ip?tKsqIpDgVY;*5LeE##5!\/sM*P4t)C!k(f*?!XX[A+?6D<7[1M3KI6_P8Ihp;gaEl2mi]r,":mlO"jR>Bc'O[.0QJk+%l2srG5Tn!)8`[^4W_o?KOGp)jUS?#:Ue$&Z6Dq^Vd5SQ5ih'QMnj=YNE_4B(dl97tj98NC7/WQ2*!&G+FqNbc,,>ca\PPD`J90j@%3Y.@'lZLk_LQI*]T0.'lh#rBFA=$QXK:K!-I[PIhA1eE_Uae">Xuo*r1f<thK4=&<_L[pLW_(8HHqOKS'mrV$1MS4+ol+@@+XJe;%ABQK;1QfIF33"71\Rei:a[>T;;0J7e_KgDT1I-Y'6%KUQK`E@bOq1j?#54]?3M6jPD%or&9-"^G+%JbSK''mNFAU>3pp/T;](#8V%OkGm5]tgX"0,IH-=./DXfgORPo'16hFYHW@B_pSjlffdQ^h;!JFn!K8ejCr_%!qiWr)c>,0c+K2Sr^Kj60@4l7i3D?NqMUM:B[HU%NKP/4=RfY\Z2]><i':i;49bp)`$<7IN)J?-oGooeRu:l+^d5MC)NB<g[CbD-Z^HQuCmrVY?2pJeNC<epoaH0\YBT`7(53h-`?=s:%dHc;HU1C\4'Z01DPF;u2;E(-6#?(Xqe%3@P5F@%tWSLs^+&#/.!9B@SY\ja"%j?[80DWG;&F;hM(a"@Ci!8:/Yie*`Uu4gU-8-]8%o(?[PCohfN8WWWuH_G`oYe*S71JJ[n+&;6U;]JS,_3>Eolno>2"S0,:SH<t<FH'E[hI@fgR2KA$+"(bM#\C:'+Ec<=#WKG*[8ZY[%$?ca:X1!X@mrgApoDa2b_B&M+'HhcIRt.S?Cf_dqbSi&8\!,HWZBMZNZ*VsU=`fh7\j8,]c_aUjBKjll-XUZ?X]>[k;(:8s9Iee1%.b2^6g*F!EcD#SqibfM*U#N%pb6#<-"M7S2?h\/u*j9(m52IhlgD/$=RZg9/)J,3Eb_OaqgYqnpRd"h5V=#q1;2RG",XOPUl`_Gq%WJ5-6$5U>;*5"htc+4[Q\+fRTCkFCDl2l=5nBTcKd]I9ucmIA4&#ZX/<H+^qU!"^I0krq4k./A@cf(4.ab?<0nIbA2&+LIU%ls"8%DHd;cpAfY<f:$nJNCItHjA<lm=#3BoZd7S@#Eu%Rdti%BB%=ang3=K6Z&6k>^Rsj>=>7h2UmS?^lb6US!MXrEg-@[Dc.3IMU-F'4%keADB5NG59j%bHC8G&8=-pSKcmjlpc>3IJ$,;40BI:nO/nqugHbGr:[-2[H/E2@8V@1iYV=CP.XnR#W>kC%8bn<U##KN6`Rpbg"H%pmma;ZViE9\h+[$4UF]ZZW.Z.l]W4F2ol7?%.\h+Yb^PUM<F\`FT!\UaNsSQ--HL??`F5HCR_uhO/h)7./No!e0o?8jE7:@1&Z"g%7d#8>@[r*4N/W+a"VCcI\AsU",Pd'[?`L^7%"\.#ArhD=,)rK2hVJ-_PBq-]Wb0F&5rA53Gj'X5a&L0`4@IRL%kq:LZ7(K/>iL//%hO2E28staH@H-CG<A@Z(!1G12lO!JoKDa25\)NIUIS%K9*\9Pb%aF.";c=l/U\L5`F0sd"OXs%T(65a%URPjpfEP!(7F$\/EP#3U%7!iDfGXcT0f1P?u"7MK`(mI\`VGdT^MhT@:^(TrIf,*!]Nq^ZUUgZ1+`_SBs0`Pk+F/<p#\1^q+Xl'*j)hE,=OV$?WlgY(Pp=M8E%c1m,qB+ga5H>&VemAbq)2r3Af$5tL'_+fcTfq9b$ibmoH0+t.=;=p(ZrKkhar:!s66C[A"F`17)b^-nL%&lH,XLb<B=-Vi'Y30D.%a(PJc^`TnfRr*JOJK^*[<mdig=^G2`5QOdgS@)R!>l;EH&?M<m\RrjNjIfY^2fP;of_T;?l<%ume"Kkmf0O1+_>=JEjq0R\pR('=%,Qo52g[^lgc*o2<-H\ufJZOR+Fqj(986`g\mBg`'L;a\IT4XqS8-G(/!pueFWiP5Fa9Ge<90^[1$hPGbD3-jX;ALp4%fCDS[duVC%n&lVs4Ekfe5OQ?J+eICV"$s.RpBlQ]K.8jfoKe-^^1Gp@0E89EPH^k1cMCgJ-P/SrW)Pf`7i*.o0`tHsTAc6bjn_.0oQdSeC(1_g%UM3omHQJ==@tom*=LY^%m)aQuY[2IR)'3SIZgN$Q%p%JpP*ee>-orX=pJF?@?,GU7],<KL>u1!2NN<rnlbYg/TZ@$D1j[fe/fi-n%ZHUtEo$"]s]dn\b;Fe-B8XDct]+fW6Q9oLKN)CP\0^^_qQeUKQI.!)>_OYB<D?f>n>XrG)r[a_$NlV;0*6s4TfYBr?jV7rWbUa)b%.(<lnrp8o[$A-k_XFXuHQ5[XW>HsWu=s^&5(Wl8Zr5uYW/qOBY`P9Zh?QGbdRu@:T\3i[)0_L1n:p.$-1jCKP%q`B'$F^Z@HD<.9%#ZIJp[WZ`p>%dH6'@)f/X*Q1Y[jj,%2'5()V>1#XGd^KKBa3@[TX0-M3uIK"hLS6XO;F$%p(/>Z5=W):52<^SX>E'1%n<Wt8m74p%A5D9'(q[H+F.lFk(345m^2Q;`?qu7;Q/_6Rb"Z9$[:V(X!_`u2>#.K5X`9EPk@BdIip?bfO)\VNQt!t5LSOcDCF)UgT1B#lRdGGk%<R=pM2j4t`r"K9R?Uf[r';T5()Xb%Z#Z/pK[E/>W&"!]b:=*Zs=htTXk*#h^JL>7CKYkO-Ai;`q[MS5$HI<Vl"Ygs(0V/_D*!!'d%dHUh\lp3Z5.('<%Ilb18?GOM#5I>4F8-XW1)mpSGe_rSkhTNQ!9PG+MjR^,lfJHeIAsu<\_ns&MBONh=hPE,&T6^fF8u3:@WHp#a%i7&2r4a8R&H^(QB,f=YLBLRPiZ1X/b:@AMBE4pfPLO(T\9<3Vl]oZg_iOb-ml2V3Nd7\)Xr)bbdM]@;ar4QAFlnosfoL'9SiJcoI%\Q(M5XBl%+0TD*;.a/WZ-,XZ+i3B1$W$8#NhqsXd+nTk0<WchuUX/Q4p]/<iIJ_#I9[sG<;Mjf[7G"Vk@E#2>pY.T2%pr!-Q:YsN%&8hAB7n4>V/'TJj5\)JEJs;6&*XE2&H3ApJN=iffXpRW=Ze.%oI!rdKShHf0F5g:\]/LYQ*mAaO!a&/<q[`e\0bG"*)nqE=+10Wn%.&#R!U[d.3@iYU&_)_Y!#O;ZB?E=6-![!EhVO=iLUh84g("5^ShKZ8>]bW\dDlRJ:R_@5Q@McB4%noN]',2'93Xl]n-A*E_UR3Zm%A#SL(Gmb6Ji+R,7:KZR[nU[ANNBZ\K^"EgdRH0.1e6&gOmU\%W5caQgH;BYa'q>s?pXF-d/Oc_?mcbp'<@E<$7lE<dk<W`[c]+RZ%+bUEgHGrR#<2Jf&7Sg=8]1RWdbbB`4eoeXs\?T#*r-nA*DPbc.VTESk?QZQWXu,2VTRKC\8gE5tW^,DoX7;_JZfkL]r.72R>p=Ij%ed`">+>:`\OsB6plW9(;(tuqo-?X8*1j^e]n$HuiXpp_h'DqZMc.f#VTiJFV:V\7)mD!#2Q2:5#`.mer0Zfiq`j=9UD"f7[.HeCl%3\Z#PN?2jlb!&-6+-%gG0ID-U\G&j9S^=rEn&0d"["3F:7F66ddYUsQZOC2u,SgoG?+CB`h?*:Y+_b]P?,,5'gnF\;SHm(.^i@l?%:8aHXG+m_Z5Tu<`asf"bO1l\\ojf!#5OcgT\:HMnDW=G/8//dB!`"t%b03j7".0'i5mOS%YVFt)1[9=]XYUn0N!28/RA[4DWUpe2%gnWLHO#+[*AO&CgeEOtng$B<.1#r]OUL&0(P+LrfhS.$Q![6D<inG\OAj)ZfRb3'WmNk^%,P[24^5/Jlps\)q+V`FlC;FsjTKdps%IB3>u]P*`ZQ7@,/T<j5!OA?j.MaQP?[nA&fi#diT)?9A?f&BEa-`Wn<MgIf(1]q`mM9Toh`"$i6j"MD^$.&UeITu2a*L;-o'Zm/>%5c1Er4lY9ib.`]Jj"QnM[0DeO[k&MnBZA5+X3HH%N8Jl!"B5MGROW$X?$o!2G&(5YZZ(\nZdh;Y+DHX9&+9)OB"VDr`g\Y-UY,ef%]%AF_UFh1:ZpdI-/3L>@pGJ^Nl'4g9<3srPHL/HOQq<,.0(#5K#Kutd]Y?"e^S7G80asa+Wm!AVqlQb]qq);J1\:,J'?,bN=A[cg%<bPk]$]T0AkIBf`5N>j,E(df<_;TNs-!K4iGSEc\Rqf;76I)?'7m.7.Y-BAI>i]))F%!F>HgEMcI?ZGQYBr`uC>D9<+p70nPl-R(%?dDqGXTTMNIm,U;@O6XjZ3(DX:LJn7+;'ah2%V-hL.3(+A=VH%:-[3=Q?oFR1V:8fS2HENGZ!0WT)Q=*G-sN?C4'@C';pnXdT_^u%lI3mcD.5._YrFh/.3$Ck-fnebVbF4/?#4F!8t.=9he!A-)XX8fcO#A1JsW8^Nb`6VA02Vu:Ksm/an`'H`HlU+\M#MS&mMCA'+G/Q%f1J9qS/uLK8`k;q]Y77e-Bg6H>uMc.Y$jLORnp,a?aa1l+#doubL0k"C)o,S?Z/(ZCa`6LHrg)cQ2XXK\V_]=&)?#ii*`0VrB\+Z%rVA*Ga<WFV-hY?Ygha)UkARe0R`Xh]FtqCicYf'j@L9oQr-)8hfnZ%I2-nn8HsV(h5IE7Bl5/<tNpkHM,(K*f[C/):7E5FnS!i$O%>79:^^LVO]]+aETmDl-Sq9i6%ipbVL[:9OAa6Z,I=-QKn1JcHTl<5Y\:+rE((;DM=AS*Rc)7)K@EOe%$Zs#"!chOZUOF&s3U,2Dr%ZCs2!T>%LnDtclg8n)jRWNkrpSN8a&IR3np[T<-o`)o?/]tE#jeVZ05L%W@6A[VAO]r\6Wbm,uR..6X6cRZXa@PPLH]EG[B1T#IE%Ei#%AB%[1[nqZP;98dDnU7P=5"kO!9Xj$4ee5^B`Q^]+ah64uNL75Ab(Y133?WVpXW>dVZ7P+WDD(,!S.$CdVQ#^%q5&I*fkEI8s%2(qT-*.KbeQsDW$VXkH/?Q(n^Jer=H-j1f]i9ht:-1ZLn,JRj*>J&&F;t/"?mQ2F_\/'6RF['pT)]Q=V+hRQ[DNAkH^:%5AEHFi!%ko^Dp*N*Iq('$tq3=+EM#k51dB*`$?UeRFOBC?,,_6e)Paqs/00ic<o=NEZWn%[olA*-]n\\C+0gWA;hU^Bo:<pJaEnM!rS7$)ji%]t'_d5,BpCceg\9%Z@::qUG02fc<be,TAg=@+SHQiB10cr.JL<\V6$BeLN*m*''>+h=1l>C$G4qI]Lk@\r]r&Y;V5j1qDC<5^;mY%$Y`8Km:<&cE%g)dT;Z.;W*!MO@D+gncW9ft[jSApdl(:)j(p.<f%+T0245r\[G'H<m#\#umnE5C)\^k)!'Bn;/>kQ)e3;@+r9SNR%0(Ym/IEC;dC\(]8d9,JRPP%o\&]tT=)$eoq]02a!gY1*M4Kd34A9R^&C='@a"fe-.<;0>3\*:eXk$_'Gq#1(f5#\If'B9rQKC*bL%=hf!t<a#ao?d_#iWV$`@@L9ie4O.h/-VTomF:Bg\a??V0=l%_R_A2%c@V`S>H*?NAX3siM7oji'ejH=i/1YBcQbK$sF&T\4/let7%b&eA!o%>"_fAXUChNpA`l/O_,@j5/P*6`?1mRl$Zq=hShEd<'k:Bu-3fhkY$6gJaXZES-*F5#mA=CQ,ubC+Ha;9pgt7m_Z.=nrI]%DsOsno?/t[J1Qe>5n3GXf9l^pO6\U$ZV#Z&$[6@PJGG[se?c(KA8;/@]G=.b9K9Y5[oH8&O#%"o"lADtk,5NrWL6t_%lhbqn)bsg%#T7#kCF1S]q7bmh/Ub;2m.3'*hXfYn\#nFpTstS;4M??#rV=pZ`k!@WX/Y^0X]hT,4tRpl'*qLWmdKTqjk"PD*4^s64O2P,Gi<Tl%Ofn%j8X.b,GC?LFApI_:]"DBN:Nd5oq"rg(PW1hr.4<>f]$9a!R=d)=[fIu(YB/k)asOk_S(Vo;2IZuB*stTnn7*Ar@YStM+-lF"%i=rJuPMXRf)/MspTi,Z!Gu\1nSdBUJl8\uM".P8-fT:6Q8gD]F3t@ebkOT4hjWM=soN3C^Ls65lM;SB@^c3d#$Bdse7\l,-"`.Bh%K=S=M+Z`bZ-jNI=52%!o&^UF",^i_`.Nr<NAL.LLj<tg[O/o/g$dK&CSQXN+[(+!-kUG6,K'3b5/C>UHg'=&-N_RS;I.FURSP\Es%,XXRJDnA!I&q3u$"K>X%O\h:a4,5:HWV_hC=J0+k:^[CiE2[eWV,M"U/YUBlVj*@0_q;6^dYtu^5tpZJWNh,o_Y"Bo*M0A-LY26/%PB$J_Wu[DXEcK^%7q6pEh/Kcf!$`jh!D@"S_=5At*`P][/U>3'12KojHZ82J08/F0IH7.Zp-t,E,c!FnF"fHs!hgT<F!`"hSgbRB%G>-jjp,eM=b%:,E%/:@\p3V+cQ9'A;gkW+S^Y[p';ME<m>(2CmT4<`F`:b5@7%RC@Yt=gLZ'N.?($;u+\W_l(gu[]>k/ruRH,9k`%<7%$ZH/V#P0eo?[$b5*u:MRo8OKe)LPo0l+k.ZR^;sNY7K7$:=rj52d!'`aW,XI541i&.NF%_E%;KdQ]7In`e^,&]#[I]=+H#'mX%><#`Voj=i^\+E(Z,o('6DXp4Df_nuu8KDHl-Q'bRd8e`;(s"rs$M.3]#r^;`il,%mrO-p9h.t5a%iQQ:n(d9,p9.47::;mh83CfL%O3ND"qAgtuE8095:@=51SNHJh*&+s3\H<>=WY[VVIeMa-H+mNIq$LPOmNk6\D,H\ug,g/Z9nd$_D_gBg.$@%Um*DZkI.kV2?)INe%=^HNT-6=>ES`bPO)rFZgXCNJp95],fLU$$-)g<^WA:(PAPZ]F+:-Du0qm\Jl8LHJ42nhYPG!(t6>.Dj/QT*JsCg$T0jNBu`61'k]%2\?6Uk*<d)%UhRq.SaFBi.1+*XdgG#_NKf@%BAUZ!]\l45\Aups8M6>K;eccmUq'CdR*s1h1hNW^/c<u*R>%^YUpl=%XU5kpT5Z3%TfSKLdsaO+5$TXTK:U;#Kt1*AY!A/LU(>VMiOW<aIL]R`CB!p=IO^tj[D*(U]rKc6?X*H8r)H[R#CG^aP:`Hh\p@m7q!IB8lLa<<%17t*fYm[_?>LT,=gqH#3%efAWDN<LTEtH&JK3U0-h^2A>2R`)BQtG/"6%[5Wo^h#CK_?c(m[@Ft9$;)J=]h;800"XcDP^=7E9K]M%OP=-tC'S9s!H\;.R;&I=jB]@ijQXPDV=DDL.&^@Nqq%$n5!D^9a$*7hDjPp'>h0k2f#<;;A3_EE52-iH<4N6S!USJ$;mT2OXIk)A%Kir:&(o#C$h:;>uXjr>tUo-a1aHaltL\AiN<8k^(L'^m1>lNKD#h\Jp3S(aIJ.YH<Q+Zc$VD5^c=^\;^4'9GO.s`_'^"4nb.&lIt%]k!`/?+h:IE:lDH-KjPe.]`BHr'a`?\A"C"*\g!Imhti7Z[1(*G>Ema+I<OKYFSCZQ'SjZNda)P/ukR<k%bjH1^M75<.D0qg#^P\%>E#11k44^]q]5Lc[#s+gY1j`aC0a:f0;PYh)rS\_J]En;5&Q9cJCS;Wgqp_pi:0pPhOuDJT;Gr%Xd,rRo'4-<rSuJOkIc!eC9_L@%Y2@84`+,u&?7S*JCle%n+h:asdp#8&hj;lp=[,(miIit/+AH:6OPMQ0::eoTQ^*1)34d@1\N?s;PC4ii+(C)^U35*`a]kaJ\`-1l%Xs72W/!H$NB/$:\UtT';\kEhK[W!,L9AR[mc#,D)oQKN\D#%\>I&fD\`38;h/tVQe\teq0d$TH2#Z/6@jR6-AQ9-H/2I<C+jN!+Z%Qd)8h?9hZ$;qcZu1!/lh0%t.b@Yi&3T3diSZ^*f,EJ_FpfG30b*<1mE+"a<><UKn[jnXh?Z#Y6*[9D2XDUN>\PRBaVg8QqO$:I-[%8u;EODNHME=\euPPL#W=F/k<ZpiJrodPt\*V7a3VHs.Zpo2qA4/L('*lc%1W@F8Tr;eLfdQYtWHC1bWSLWurdI)8]<Q-\3QUWhhs%'-/R2Io4h?`NRtNin6n,\e81PK"mkF!9_1hk%FEH&+lE2q3E$(gHnScU?sJ3qk$asfuL'28R8;C1Ct%]kM;h&e;&Z>Qkh1-f<r.b%M*'5T[G:`OQb#EPVO2(OktgL<];b%9TPrdnme0/O88=7Br7l2OmaLd6Z,FfDK(q3'-qmG3P\"pf)>:kK;V>f)5`IJppanm"G,Fhu%e.%(e>J$NDNb'"7Z;WQTf]pe^>Tos/B90Xr4^A48dp+:,3W]C^V7EGV@_iAs+:B])DE`!@D:Gc)=&s(kFMJH"qK\sGQ^4d%06Yp]%8McJW[DP,a.'q$636Up]&YpL/bId2,/IT8N*nEB'>ZmSK']Fu<%^Eld'1_l/l]Y@as-bTd-=,Ln.V27QIF5Z>!LV,`Ps9_HFR:_=%_UeH/fs=SIh$[t:(QPR=f`ur/P.dJ@-hN&[NO=/6;O\rncjkI)l/Ph$b#)dH>BYLGD4-,n_Wgko50#n3k#YGnP>%WNZXES:bK>,p%[?4K&FZI'L<"`L1VfFNt]X^$i>FNe(mnRK1>5B&^g1's?3krYAmQfpBqu"D1+qH-h"np=I=?5Ab=GE<6B39/&G)do9C-fOEHWODX%s6cB$K[p"eDDe7TI63n?B29#`o81$]`oY?jg_/(C,^1io@1^(m""^a5QVu/-1+@J7Coo98k5o9^T]p;E(4QFZSCkNpVOg`7D#,>7%gUt9e6c+%&Meaqo+VK<Z]6#&SbP=G-R!U4a%`-KXPqZe+:K^K6oA7]jf1I?(cSE5+MXM8:^QMk&Pa.=fcF:Q*-amqMd$Nq(#Ino<%^B*S;I3P?jfqZJF=kPj[-BFeM4Bf@j/6_lF\O?\=+=R>j`)_S.2QiKpn^?9G;t_iVP^5t6RmMRHERIS>]6)9_[d0cFr9XEkmM.M)%e^JG8GbL9]^TTlKCf+"U+4Jb3m>!&eg=iO@YZ9ra(Ga1!\7V\?VoL0aoCdmbm82k5G.1XmK%in!!Q0eXs*g?^_]s]lQ*iF+fO=#P%.TkIWVU0F#\X:"<G*`!?'rJ0PElRk0a`MZ6g>eioNd7@[c(iT-l*=sZ^1/kC]'H()*Ql8?#]XMV"[_Y5,Nb,Fq>AX-q4+'pf?L\P%:.(l\RC4Ij-QprB%4l0J=%WGeEO(kc/Y0>UHaC&(g]lT2qaRQB;'ho5Xu3mS_.MP>6T!X?]H.2EY]^l<Qn"fd/Z);+n%_:+X1[%(%n$QBTmapj6NqHf/!WbouY]=i4hp-_d'rn3BU9g9e`N)VsB%gboELg#l,e3$@i#Fr,Afmo9;bCi?[@Y.6,aWqcP]%?[5oS!nFldf*%*;>($3oqR2eO0ZK,U4V[bZHoU[D/6[[[Sj22?3d6Y46e<3VReS]>&R]Ou:j/-XD:cR/ac$0)D7Ok2Y4%Z>tFW*ORj"eKMKWfu`-Z%DO0it1M4J<)5iRM67iU=$r4SqD_4+d0]1m`p(sk#/U(Pm?"G,>l#MRPEXWbj=cSiGG01RlNlWE1+BsqqVlskhq:*MeIH@]d[eusf%7=!kbZYV@+4D3j#b=-PJbaH!p&%aj"4@qf`@E"l%d5MplD(.K%[?,67[KsoK^8QbS43RG94%6S(:Ee_b=j#lBWC-0IKt6jIlIqCA%TQH.f#R9_0>q!5g2lJU@#<eVObB*JjY[aMpm%_U)g=H^22OA:;?)5cIKC?t&bM9E_AO[`=B@[Q5M`5@kpD'Ce(2!r[_"W:."33<+%k4c1UT?T/oD&YRkf6?oV`'uf2-\V)OE9oXE3Z.@_r05Vhh:[J.B+mu2r_&]Q`2]TLl"gb#Bhc,t.4rG0]i`K+pfY\-:X9f_HP6p[%QN@M!kEX5WLD4_7q8@iqdP804$p']Hrpj175$0`OUi[;Q^U?jb>/TWE@Cr)3hkp+^b\=6PnHcp(Y1T>YeW+jlJhA\DXlf'f03:2J%EQ0HgX:D`,+6S"5nL6\T]AAteAS6P)ZCS:-R`frej#DBa^7Oo`<kAQDA^@kKFQrOrdAIQU*p.+D'D\3!P86H9FS.)Nh-680]e`_n%T5qpJ`=ead\.U^ef';<Q$N:Oq[5D<fqaTCF]j5BN$5rLHZHa(nfZQoWb"A(I(HFO631F+->.qI;X0pabT=oN_&KosqYA>es_8'BI%P[OHTf7779.%8=TD]dKbj%.:KC&Lq,p<&Fg@HmWHOIK?E00duZ`[C`TWWBWti(^c1I&9$rFU$F?_L1l"bC*Qo&bdnRAEJ0Y$*'1#%mU+afA*#P`MuU9FI$`(W9ronV4(!YZ@Ki=`/(^@CbuV,`[FrZ;p3!e!g2e6`efjNh6[IqIeETM_h6:=qHY3"Rf_iJaJJ6F<L;5mk%Y\Pt6B[GKHGdq[#6iO5TNdSUc/MA(rJ@TQSpeHq%:00jH_Q!-e>Z__"$`u7](Yd7t;ePD#.*_F>F&c=E5?".#k/<h`M5B;O#\:^R%4g.T(*IZ<_(8&`gl2*hg@\LJU5-]A-3BOLa*=CTmqXlD-*^hr2.Q)qB+X!,"#'#+L&C[)HJYfJt+U;o+Y*+-sgUT*`]kB5\f'cOq%oqT4&ID*1bmAsS>o@=`B1=u<pL!+qe?Pi;!WV%H"T2KIu/E3SVL!8!C)9d;tKTSn68r<lM-Ofr7JI\-.`bMg[P:Z-BbL/Bs_o8^V%j]e(gXn=g$Q)8g^o<CAnj+_?P_:Vq<@:OXnRLi6TP'p(X2mmKoHWg:J+1EcIq`=&8oNUA<nCq[HUtb1:]WumR%%Qt`dh+S>NbR<@%Q1Fot,'_PDM:k@^:GdYN4lO.IPJYJT4)$8):>;:A4Br5]<.:8nB!-3kP=foR(=n/Z?qMg<[o+b3F]#=^"OYBRe,*>mP:BM'C5ods%O@cWo\bs@m\N;6#%-pU!4g?oin(e][-f*Vk$DHf$^2+LtP=\%VmrNrG?@aGQCMt3NZub&$S\5fR<qn\B<3j)7l$uF]PFg"BFA+1-%e[rCSWN4-_g:PAL;lpTdl'A$Aq+lCrUpliNcb_$bJ^@2_?2YO4le99OF6^k0$_HuI1UloFWHo+4l,%1HA](&QjPj7;q9:Qsa2*s3%f@O86kDfTkS]j<uT?aIRER:Md"IHm6abS6C9I69GLRGA<%;pO_qdo8mgK\L5S5lc7Up3<8K3M94S+`Z09=#WIhE6tPD>*,+4m.6W%ITb\@e0Q.`SaVq&Q=s%]R$Mc)/."#4>49tuK<JX@O@b]dosp=%%@]2t*R<R+A5\R=qe=l7=kWZ!3'%G;oR(dN%%VLt4;YQ$8^[*%%?^J:o]=H$+>+:`Q46FrB06=INP?uPa*^_;<IldOW:F;&I\nV,Sc!Bbhf7GA5&/,lUXgRi[8aC_e6'Hmp`b@*p[O59&%/tRs?#B"B%K-rh;aPG[DhV86/H?9"s9.!+-dS9%gCUoZ?RIlugh)$WT_35r=W)o%&:$e5]Ag,X[m4QpU);IcQ02.$mH@<Wkb142@8[Y=iabd-h%-*Ul5mE/)bU1rMaGP7j,i`sNuRJV#4b`bVPR>ol?5G\V?p\C'g::fXa$FAZt0^Oi:B(X[oSWbt6l#h@$f&f:(V%_aFYB+g6oJODL%2h[*Kk/G=CbQ?6?]<0NL&tp$ec*Y&UiQe5c-f*kXQT>Q6@U2$hSjrXbP1_4Hi[jf1T,J1!^4qhl*KrB".FVc&]/S+lBiG#9@XFQg%Q.'7KHRCE:HQd"A&#O?EplX:@R(ft/6Ea^fo$tpfX&%NrpI*cLg1C)roOb!gH@lX'(GZE&+/[b3<RLTRJpk'&XECX;V=lbA3TrL]%MC6"dha4M]_Yi*]n>f@)m>Srfmcu<1qF`R8lG5f(;[C-aJ,HP9?L?[<13G]^]\a%[XmJgNXBd[IeVBP/]qb&86CA"T&,bK\(WS/r%pWdP?f;Y%Y/j)'ZY?iOCQRBYRI`nmq1QDWDs.6`#5D<GBd5n8qKO0)@'[ioIeLlk^TCX#2@D)]<doAF#lCK,8Hk,=AU0,#l57$R<%4YaYID*IT,/p2DWL0i[L2CJ<>Nhn(U:NJ$0=61GT[m&,O?C>*d\@PKrD/S'/1Wd&M<Ol''^-/*/Y=hT(n][VVA[p14f8OQr^*bCT%[;Mn;q)b"5T![$1U@3JQ9PAjk$o9]E[&77uLA@Tp:J#BG:Fp,(1AGr[ni%qCUGfu\cT"QRbL`*qB%BbDCjQY;N\;I.QkF&)j'J"P%%EroV.q8<NX3EmNqmd05F`JD_HWY@ORp%GJhp6jrR`mYChig\sF5*(@-/<3+V@t_a151#!fAK5slS"rqJeRsrGJmut>"PS)3[qYQ%@b@J&n"eAljN*p,[A3B)B@>6#oTVEdM>j&;`=DTNo^>Vf?1CWMG>5AEn$G7_Y7%%fP3>,@;TK(dqS./#"^6;\hLnW2$uS\rP@F/+%3b^-rnc)NAX_STl?BZGSKMG-K$?oBQqn?c!VC;58C?fV]o$/#h>in\Y)?oQ;?*/D(IL)`)ol?Q!I,#N5I^8Xl[MESMq-2"MQ<d/X%qeR"XF64puCuj=[gUKqLDfr/VjmppDUAM;pT.LfEA0#M"c1a0^F),o2`*"k6L;*9D#Jjk:hu9&J_e%nJB$iJ1p@K<7K`/9&B\=&\%&=?2M`0Poa&@YuD5TSB&0RN'G-Sq62T$Ft\ZX#@KG(?nYbI3bmmsCOI9aOY13.Zfu$u"DeN&rk6\';15Js0n5".b;g+O'5pM$/)j%KtQth8O5m1lan0.Gu;.gc[b:%/daD(S>VCu;%=j&#A\V6:@Ipe3^26<dptXm^6sgSqI0bt6Lkg?5pjA<ao:k#Ep0"%FY&>8$skT5%0Isa4/>AanZ\Z](*eX"Sko]`JTjgmKSM=o&BctZ@oucH[WFg!sHPr@FJUE72k)6@`J'<0]rC,W0c1b="Zi$\5Y1rU(k5;)H$oL2Q%I]An7[bL:,cp?@*^hIP0JpDQu?Q*D_%`)d4[n*--hXS!]hH_d/KUV;4<CuIqJYZRI%SiJEM\4sec-*t45?;^k:YWJfJV[hQ3iMUq%0b7:H8TNONI[:qs_(:r(5Qh6n(sj9ok<=6;lRYE,Sq!B%#37s\6c??6kD`7n3s5dlkC4df\8X,"A1al=c1,I&.I%$H`^_%#BIL`A%cS!OkpUW0O;:f+B<<p7dR/Gb-.Ea/hnUb,dVlpK"9o:R2!6[?kgCFoEE6Kh/Hiel1L$3F1!;[ZcfW?+5V[c<?]Eg*km6JlR[dT\o%6uI!VlXICT$L8IaS+.LOFGls%h(K+nC3lJZAh4PZQm0J-/hf[L?X'4A.@(f=^>$_mS\_)!TXA.\p=ng3AfY'Xj6_CqCND/Y=!"!e%pd>GQ!2]18NeoBSLaGF/np:QVrF15J"D`jcJ].W[gHMUJ6W$SWK>GiK&b(BP)/1e>6Q$Rk[_lkkG256:)2(P!<;4EQ]5.=5Nqk9\%J9]WCFdVW4UFU>$D)>T;*W,P;!2#gTA2#R-%<Tr`qX`0(+$8TkY_-"gCNK'MXig;!QVW5[b&fkV99MBHATH`""uGec\T9no*B!Y3%@`qO7Cc!0Agp`4R*#S*c(kocudU,Zec/'mU#9pT'GGEU,$:I4V,IVt?:\lVh%jEi#?3kOJO#pITr]3;>:,aKtLQ%b04i0qb53XM0%_n04(q:kr`KG69d&tJ.t_ZZEhO9MrE47%bL#!m"hPm5$B/TJngZkC(.E`<.FlPb;Pq0k;O1D*_1MoKjGXO+_Rd2C'<[D!`p\>a]F%2j>fHic@''D:^Q<cGB`34s;pHkl-b_<BojkX'X#-^;NCf*g.fMZNa[o5%ZfJSFd@Wl-IQP"hoc!pm655f%n*P"Bml)X[:I:QE\tD%P3p2b=%Tiq6;lY28+7ZnEW;1QOQK\:[e'eWPO.8=KYsbM%4=g66tNRhGK[0<Dh&nA#_X=@;Pd#id:Lke;a]h6YsbcF?$-Z:GH_%F%mXo???gI#3"X3OWjGjjEP<F*<=)"W16KtUqB.+48&7/&;D/t;;)S*N<)+kFV3uX.lHkO-_M-=6t2_W[K%ZTu=@KSX-rJjGDFmEW#%FKRQ:rUkQqFaf@#GssU%^>J2L_?c#FH>#A'No0*7`W0g],ii&LR7Cc2?(W<hXM`SB`Nm:M%S,-s%s_Yf8rLa?iF^W!p\Y4n"`7,$%+`u7[1cY[5,R:AqGLQKc4NQ:QG=<`p6,I#<p"#dN/'TW^lE*%u!/iKi?\1][9Dn<,"d)u,QPYQBN^&XG$laOhS<!3=/!,eNA<ZF0%bU*iUcJX/tanGlAoBd)!k!]1FK/4da=If%SS/H?@orm^9AB<`Y=JGgNN8SSm0HiIG*a_GLJS."+,I,Z1I]g?Y]ND(#CHg'e=g[=4%k6>5qM\]D<aT,hZ?N/HK?+:Z0AZp_Sn=>4)[qN%&4%M?`lReR3.^q(5^L5GSC-`VPi3a*U$uXJ(C):u^5IY;cb+J.9P&Yg7"tc]b%SR%cI=<].3n2[18X&fMmh)Yt);5D/es*78YH+IbNf_23^YfsjEbe/UuTnnh6#1iTi.qgZd$N+:D('_C@(s'e<&trq2Q)>`%MtrOs%d_8EQ2$"%TXlE5VR"ach::/A3F;.W.JT:\e#Qu"k,baYYH1*tXJ($PiGr]7kJIM62C=UfM!dtFn?22)VZnD;KI.'p1A+H_s`u3dt%X/OQ":[K@U)dWsfhtO:iia@6Whg]tZnqD^B0pLDM-*;&<L?&2'I.%rlnV+1@@Uu!Zpc`@*-[Q:?-`T,lm0ec)q=aC"hU(EnmlL3"%aXkg8=,nN!rV?K\^$0\T8('8B"hFpm@-45ab01d.)$L)#b[eL_"uE3Obre/8f72Xms)RRaaN?P)UX&,3hB24WC0CsEA`XchNl[&:%/<uJ&n5Kq9R&UNVs#OX]nu4aZ5kOI&_c;*7@t+F0fW(i2ldpfr4WA0"A&]9^GASYrQ"_"2>g(M]kBobkF=YZ"K?Y:*Ws.F'@pPP7%,Db`THb@?%e(3aT*jN(0g0D_%>X0uCQQEl4$I>3%>ao3ka.?:h:#uG3lfGVKTl":L;e%c.gTr<$4uVO5s)MU^*?LA'A'K$D`Y8h*%<q?'"+WmdB2W_/-RL-]n*O0&Pqh7)=i/ZH2\5XZqdI$&K\a]L:M3`ju!OLn%]fC?6j.5?<:H`rGjl#B]mMYTXY"[!2PKGJXkKr<g%Ci9O6=N8_%F6I4Kd#f]Z+bst#8!uY%2-Y%A*4jf@FEt=Q.QMUW1[#$Hh[2AcZSUeLfn(a8d*9k/Ruo;4<"@aN$p%u.Xs&R<p2c[,%]lFV=SqB,GTM(TiME,db1[(cuc-N(&!0Uu*R,'s;4\=D"Ne*go#rDj0=eJD$4h[3F"1M&WQ7oX/Ag?a`%"!8)qjlXb=ObgsjRQ.$%0=Q%+N:6<s?t8*coZN*-Frf_&-5h;LO^t]PIs)pXF.s(QI'X`\NPeq9I.[*VbFDd]Ht/bK^#rts8`*de92dSfkBO.AF_Oar*6,9`%dbI1%k/nMTUrW0[QU(4l.4C#1a!QC(Q?O9DEuMA?fZO2n8#HmB*nnVca_jHkjKae3mc:n?X*T^NfkjpFAnWL896QeBT?[p+ADHau%9JFQ'1nA96>T(^s(h<t,f%:Oc<UPk!]WAikbC!QRB>)r(b37rdS7_K/FOMCt9;S"2p[.\YZOZ0Qp2RAb`Nk[k[b#X[cZ/`_rB03h%M=9;n#b'R>`9QVe[;0Lm=JdO,kCLlX],&]Pq_8T`^I0.#bB`n:LB^MSl)ACGP@/"'dX*_<8'en41p'[m-DbBN?ba,gpk;QJYHJF!%QkS(id6,/:lb&aT=driU:.Jf0b7OX+7m<e]VC^3Kr#NQIN"$f//'cf&1ss8IflONKc.LD5>?uRMkk#GMFDVFg59Z5+0jSs`cZcR\%Q&b^saaVFdq/Tt>9PNG@:IBt$To$ObB-mQQHfjS,[XbWL/A=-ahOA9g)gg$P(rn&mUPX8m;;sX7WZ$elb3`tuSeq"[MlAOsNs/G:%juXG=B"Fe#Pr?U;gU$9[jiD;_8TS2\jN.GI/pXb-a1Rk78"TOb#KhP_o(N<b4H#.lgWBJ#?d?>@_,M%ABhj98*j.:^,O5.oBtb++%m/!G(^-D'bos'"L0B_2[Sn9pA+PQQP]q+1tfGHCjVJh#34YhXB%J#WkVlF=`+#CJb4O!DnfSk+HMfrem3dlHTgoN,ffBsK8q0s\:%BcS7_hrp2*&Z$7#iPQ%JA2M:b-U$Y^RF0?]G[rRVs0pNA19lC?1XI.8UnR1r,I8b%E-73Mda5ur1=J!VkN1n&V*$LHrVXD^OIid\%EXl">idmT6P8Al?iMqoIW%?iiQ0%8?nO8[RGQ.T`6OR^bff=n]Dla2cJ9<knkNI5^3cShGNm5E4/s:st:B5_o?][N2h7L$^qUckQ%_Sg9,H$OO*K4aj%<1-gs+C8tu?<rjX3[7RJ^(^.YbT^'?l-4=nR8CTOHY\aq[\0;"SG-a5V"Nfdi@F60eBQ9o>JC*hIe)GETqH=R%=Ecsa$@*C[jMT5/W3.cq%USH9:Z)<ME"a^Q:/0a%Im2Wf%;"uJ?$AKfGhl6=Lg,'egtX@[CWV>N7'%/S>4+$cDVQ"s(=kbugZk4"%&9)F&7)l*YR)j!QjW^)5#G2dK7*[mkhqknDeUT4Q,Z`5\B03$RXo<q>/<WLY[2%*0fZkBj\b7-`AmjQ[F#5/o9m;E\`B.^Vfh=[o%+8p4h&*!EKQT5F.FpP!lHQG@QjV[^58"!FeeRKF8Rord(&g*Th$m0n(oGGm#`\HAofo$M&g3Tb"Z^p3<c]ih<fZmY5+YRad-H5,U%1VG('P\OCN@+KZt!me!'2Y9V&<GO^GC9J-Ua_.pf43]X];atNtds_<AfpJZP(>`+^lAM:+09AT5?q0F>T3a/01749j\!E!&VdJ#=%Oc">5OcbNKZ.1X.dE4L*;UNd!AY@(;i^pXD*g#VT;jR\+*C$[,5<OZ2=$D@KWGn'sfXb#?M!(CekZLD*gr+><HRdhMrKb>=Rr,bj%@99Un$CB?e@PZ_g,o(<L=5goU$9-X&[\/'BBU3+pZ\#i=nuTd-[o9Q3Mc>?Ol=4%n3G-[55VFr/(@ik+i'9bAdjs0)WPe'O1;%FB%+j3?)ZsX/P<d!9?asW%Yr[[T(S&b-cSk^km1G0Zk4$#Yio]I%"`grRj4^A.rEI%!'gT0cb]Qeo$d-DcT[_'EnSo*@HGPfO:c0n.I%kMO!t^3RY4__46go(Bl=C\>Bu[P!PGD/ES4]R`]]rqL<hkfEX0Qdt+Qbf-$8FTs?fF-N7icT>q2S@P2/Y@4`k0<]9lSi`RNO+t+k%Nr44me$KNFs6/FCA@L0[;a4H%hn(]q_sYUJJ,fLWg.217n^4D8]Bl<Q\QEK>I`oBCj2l3<iS0oF1Z;FCfMBP"-+fG;Z&]C`j87rU%ZjaSCd%N,cO/LHih4Dj53r:Tm_sZ!eHW*0*o?QdYf@)pp48V4U3tJ6=oZGE+=/Sg^iK*DnkL2V@B:*,J<K.5a8'RZJT:]9U\R-[H%-XMMCPQ'gl67r&o\)fUbSNHKI7J*H[8a!O3]H7rgZ[Be$5]2>qm)b;DQ9gJnp<TA^PM.f7TfVU!R=:4IQNasb`PlG2C*#?W*mR-S%f6,pq2sK%Y#rP]un1Mts8T#t1glonh6R:i*6aA'"'"GZ$QcRFioe!nMk$0)hFaTD@I@GH6aJ.^aJ(MKQP<SH,Og/))/)25Upj'E]%48g@tWGpHX0;+g%l.o,nh>[=+b@]3tZ30GGcLkbt/Qa*,`GE+W5/Hd\Z?eFbUg1M0Aj/u9VOQY)T8^-a-(Ad+/UD"VefS*FRr2,&%F"2k0,F`SC&p_T8\k-n1,V.K49fFMf0":T,P>*tbQYo**cP"oQPC2b@"8hr#kpEMb4hYXUVOOC:jOhlQACF8qV41A"IYDUL]j5r2%BY((Jhe]kqb3?p.F_B/t>/(AWW"lZ'`g`EDVsqF+l)*^2lcl;2I)]4/VAj;c4=7e>Cq>&>f[AGp1NTYKQ;':u[sHl`FH[W!?WhG.%h5"`+(^>EuflWG1_pE^87lK1naN0gUl/p0UF_&rqRZ(Pl?WT/A]M,L$ACF8qV42cQhs(F(l.uC[gb6*8l)*^SGjW2?Er9g8"V[NB%bW5$BanMF)h.<qmqs*lskrYV%lb9Q?\ot@24FKG>FK'QNB5)mL6r)lL`F?Y80M#$-P4^r>;e'*:PSG`g]A,(o[BD2k`aYj3\or@"%QR2e`VK/%Ao/,L]jXD_o;J^"YSM,Ki2J*Q3_qjK9(RrbEbba("AmKMfnhkVoSZ;ooo)2g72t_@))[kaW/U5OrZqRXA''U/58Bf($%pD;Yf[T6HOI9u!#R@.B]Ks%tUlVYU=XF/9`l7fOt\m,!!43;o?F4&fQ_5#=8ekkPPS\JOW?GshS/8hNuU@e7NYB'(nQR<:1m.!O=%kL:mj/uY7t4e/uGO[]T9H):gqTgZI\&Bu0c1CU163#9dmN*htR4'VhTL=r![qA\k``GX=c?TrRR4J)mJ;l>Y$;Ji@HnXcej5O:22%COh.sRq`ESHsnj2ChbSOCgf/"ChtgopM=4nH/Dd\+'/u,i'tO#jhQ$3(Mm`X]3QelOs.I:=N:_Y.sj&)-Y<_3cXga!$ROA!])uM)%Z1a6>HP:2pppe&<J7raN(E%:T`SN5ab];AoFXliSR``28^!=JkT@b+274-kt"SGG]Hl@`cpY3<fA>Z0Fa3/62H^iabZ*##Siu`/7%%hUIBp?sYW;>%<[)_PH$=e1XTAt_8PBP.cS!i2AeDl]1)ljuplE4?lgp&5#L$qj$6O.Vq]$m.$^aKUa2IcVO:/AH5Z*I%B?L(h?;%qn9Ib\JssKANm89$uMd(%<lTu.;s)fd:,&rXdW%MDTZ2^(s]YMDO?ct8:JX/DRc0Yh^e-)>Q0Ah7B;k%qe>`Ag8A;(2.rBN\o;+q%Ci$hSZa#=\,BqW(0<o[_o.d?35=0hXmh=0DQ`G2HG4ra2pXG!a4);t$r4Q4V(7X((oN^%R,c6QHAL;Y-hD4ooPEM=(W$iM$WBJ;k%bcs/9Z%-3)mX8:nNG4M#VP@drNE`-F'O)iBBfO0o^=0fqZn>;+R*H[U-prE[fq(t#R:D/Fb!hJ\Nh62/Y'f]iY'd`Y'%8Z?&aiDa%+_d9A$m03omg<(j`tZDt`=a7VOujf;OlO#1RU/u&p<0a#dOfUt,H#Rn55&Z<V5YLjqR37@f1/b4;_>2j]_o4fFcUT]b1k]aNb`f%%'+AB%XQTC>Y-CV-B0FS`EE*M\(1O20r&n!WOR[M]m(LU2b,n=+^\rHRd-bh%C`L!5ro>0qc@5WeA0$02HCNT9gCKoo^TNTgqrtBl%*kHMNhm*/;8A_uarbh__5sF)DO`-!r4M%)qWeU8PS_8>[BM(JDn``Vi?[r!%VB#0fYr',Q`3e=7qU"3`md\&h-/h"XqU%9gT=-tr%WFIN_*dW3`l:6nAIlVg2m2i^rrC9d5=$OO16^<(AR%!a9B_-:pO.[H8E]eg;r0-l=5.Y_:'0La,g`R'p`H^fX5.rn(]fkJPoq<W0%k2j@)+7+5Ah")C*]m@2[rm@cj%R$EU;;V3$?5o\@Ndp]hXEt(g4IH,q.p).W&!1)eZ\S)F;s>Z(_YeE5m,i9[V`a.NMQ+q`q3AqV%-dGt%TZ*+-5(12oMods@7t+_-9YhY?p'cZ<edOc_&p+Mu-KCnVj,=0ODD@UkS6S<;a0s<S-T96BOA&GAg'b$Og*Q+Hl(-O3,dh?8%@ahf/h983@m[TbL(A/qYSdhfj\o`::Ar.W)@i5R+XK9%=b*+>dV9M;>at.B\[\(Qk?H\?^H**3Q\+D81;nB=@V)<^.(7t/p:g+f.%Ap%k"T6Rn!7;b++Vks@FK8gm]='(ub4#%.M?eKd=b5P(kf_4tA8mfp7_*5K:Y2YG%:*3`B_VkRL82K)FMahu`?!4!:D4d$%Ve"Ss%P2.I?XI#r&rTqZj4j1_mR`GP8[0Z/q>&dL4`TC;THY^UF0RtMIa+g7L#pIk9gIp@H0V-*tYK]OcYs$B@p)E[jKY(s]Qk?Cpf@LIX%2X]b#n$:u%HrI^.rlZ>__7TF,o(pFl]:Y+TI5jAL\6L62T)1'>\<^uT-IYjQ<o$Yr%^I^HjhJIB3m2_0<uW6'.>-o$ZoU:V9;Vd)%41mg.B3sb97Om?/.ui_n?QXQCI<C"5cGH&ZlsA_/\'-DNfXtF1NfIc(c=h#fWiS*gF)uUB+65+r\`/Rm]h`:?);F[WV_kh0?$MNU%W&(m./AO\q!#Me*1+be.TcCickk#%a!#Nl\h!7aB-4=e?*5K5(iUU-%Mrk#fCVB0f^qj'>@:>2V@$f%<>VlZs1Ud<7^j\I[o8R1=%eZr>.Mrk!d)gPdnJ5a%d-O2>d=%[u9Nb\5[q%g`-D3[ciZEa<D0BLsK<VWb&auAcY[e3nJ-TNEX'pR6%jkDaM5q?4;V0mXY8,dF3%auB9JjE4eO\'Y)=X'Ef6HPOo,H>9@"MWU`>:VYFup"E6WXeRf(K(o*n<#]T6Hi:7DXe@Z&[!Vb;_^Y!I?GG1&qX(=Ae:`2IAp]4Y%>N3i`lSj+\c)_A^O*gifn)SWHlSfb#OuuerhWm*RPA<l&h3kbKD&c^$Tf_pR^Y(sno3L_[?GAcrp>"rBNuL>2hWm+I5a)bZqmk<s%@QNMMWof48befdR'5Ko&j'KLRQ+p3jI)UI2AdZ+$9!L8/lSmQM]Mo'7)>F!P2K^CAT_EH0hkW*NrogJ-+5[uWhNth*Dg!Z#o<71\%^Y&XQNJ6+i-1QCG,B^cqqFsdDZWmD!gDPk`me%M\L;iX_^Hp,IV:/A#FKaTW][sRHlSn]A^U02+][q'[i&]%P?0P\15(@@r?6$"e%[I8J@AksO,fJVIM2rgufHfrt%+5_q.XXniAhjj#n(;>iJV0i/=.hduiZIp4Eme*'3pFmD#]=[FCI^:nW<'4:']meF@pk-8B`;Se9%/YLBn,]VZqS9M0om!/+57Blf=rJ%XADCt;N5/-,D)Un08>Jou&\,*4U+5\869_58Cm)<]jG89"[7d=a_q@+G!HZ&M?N1nejoh28^%ZgJQ6q-LhhC<i&,[e.7^ZZ#M@\S@>blaNUlDo$f!(<Ci._nCN*DtR?25/)GViJqp$^%_Bj58cYseM$gB9)&2LFX?4[qG"#2[d:\V%Zf,2";Jb7bqTT4*NVSh4IBVO]FieOoRp?hJnU(6.n$a:^f^_$u;s_XAme,l`f;)XLp5L+5]@Uu`NlZ)<=m]P1fnuJ*YH-RH2`i0`%-1]4Qq@*ZiI]M?II;Ik7<l9:_VCOs,_p#)j[G\`I$gB>qhs6W4jPBm^N9o7IkB$4-I^=aGbUh&I-,b\rhjbf1*m`9^DV^qDp_^1b%oi<OlNlfF7SaP4&%D3cU>9)uVgLG[(k1nY9GojWnVY!g-"qktKWLoPeo@@fMk4@`N'&EA<gpcS'gOiA)r-%SjPFI>cc%ka+GmO4F%#7pi`meWkAp@7)'X!aOQqtg#qm;qarlL*FlEU<=Qj$tbN\Pug\F7\Cb00_)>#G8_TmG^ok?T8\P?`sA*qlMMq_j>S.SnoB\_T9K,%J)>]7\hX&-0^N';Ip]eamf*%6J,EXQq=`\5c1'i2Z/'mMrq#,hJ,,_/mbPSHm`bQ8++Dp,J*c3^kKT><?S?f.D]\iJk4td-h6F$R%OafO)If9&&[tgRM:JZ2\kh0TdkILKarciC$FRn+=K@QGE%o3,hNa=-B0AX-;D#`hODoL9'kIY*9rnSUlqQ9_fqR8i<lBgDFb9sbt%VWGLTB/`Wd3H@4;:R:_JcfWht:I!gD\aGR?<q#,nKDa/)*q)5[0#"pg)$Y5p!YY6!rqO)fEoQ)4S_kbg(+1=:p\W9=(O,Z4e?Ld(%n^rbp]=/;6G^Su8iK%>)[stRYRidFB^HVE2RA@T#Ep1=]V`t!I^oRG5OZA7'05f[ZGGI42qjR6Xm8$*7rU\\3M*nngPpO]Jrmkn!%Of_?HLNE-NXWJKP/jJ4LIE2dQ\,NsbpL/Jklh+$i2S]:ggP*mjYCG6n%_]K&jj+>&=e)p]kH;OKnF5\]C\>N1Z(2,,XBE(to2p;/%?%Z+r8'`gcZ?,Lc7s4@>-g]oP2u`aHq8k,t*aZ`[EPT'@O-$_q9$I-QiR(_1:;uAi@mD8$s"9gd1Q7@J:ZX>-NoQ'T+60QL$"j-*%L3*<7r:TD*EgT3aUD/(G2%m>ep>Yf.p6Fq;2E#oa3-k>LOWW>uY$JeKSiZ`A_j+<l^3%?V\`Pk5MU)0#T%GNBg%tH$bqf:Wm)eT)%0+Mokh)Jkng,e'iWOh`srd"CYp!*IHmdMlJ0%qCbQ0Ah*FP<mh4jhaT015/7h)^i"$/a<WY/XB^BAu<!l-kh5oC;+LDuW30GkGsr%?etPT#NN"s0D'*GV[Fj"[SPkE'@H[5]qh6+E5<<;Y)SWj/'cu<>FS0E4;C*M-$#R2pY"m>GI[P>4oY;rD>sOT3u?efGOjh*6ba\Z%?VeZPN'7rFO*:A6q7H[Lhf8MYa/:S/^A.Ba1N,Gu]taO3(&q(L,@t@lI<[,@D'rISeP6pmq/L2Od>]A$2f&6MD"dXBm@CDn\p`Q$%m_-fq?_9K[S3N&'@;5W'?IeMBlM18>LNGaDHK!<u]SKqjhW`J%]QK[t?8qDtqjY1a?Tp$`QTNf[a.Jrfk3:]Lq5cX/?*E8!]mSf*%Vq7M7kT[dRb8*lP&WOOhgsgQ*4Xo`qBDoPk)5Z07\[9E6]lr)$SfMq!\"=alEhiL.pFf#rQD%R=b&uCIIreK\i_)@)PgRglo.>j*%mlqmVrp*:.nFYkj#7tX:%j&I?ri4uFgq31Q_f#cUIJJ6uIu(jGFKZ4HqYfB\K."AQqO.`*F([^'`,>R5JKIO)Z,gd(^peJ_5Z:#;%nK0-Cc#!E)&$48pD!ZaJ\FY2VH,8IVh#OU!m24:E5!XgR46bH*q%T>`e`G7U:1>c:d3NUMRS!^.%9/UJb07$F33KO%aEf2&CZ0SJ%]+WlFp1!(prYY)tGnc>7Z"%F*F.D2CNg3\;Sb^fL(O2*OP2-"&Y#C"?2o+?iN,gQFH)nIQgTR6,1&bZ"GZh]#L<:oDcGd82T&dIk%BeP`QT8d7+h`T/O.'J(`ZT4n:%HH\;k93&Q07/*5l<bCCU6Se@TABDm$.3P-mS@8t=0"kZf)D6"ooY<%j255"%dckHna$!8Z6l_=%4Z+-9nb1c:k9lo9hYdofli*Q=!dEq=6]ot!&2!52a45)1'S.YR^Y\7F\?iZ$++koCrHp1].fKsX#XDuBpX%.ll(-I$f1n).m+a!d%2bCtaES$fYisR-n=(*o(Z-hTJk*,4a4/;g6(#s+Ag-nt5?66iX1bqjV2<ll*[jIj]Z49D4/p%?qgQQUrpHe`9&bR]g\,-(%S%0#h%P9]C6l1g7%WT$4Rp=JN+J*t>hSD9,HjaOf>BlDZ0bAlX&\`VI)ebZ9fAZtUnZ>:NMT<(!OqDHat:Lo[YjK!Wq(#_]IE.%!AlXu^j%ktO>F9J2MXGa;,kp#Za-Z;/9sHkOFOn,@e(bLe*,R=Z6ihX%/U4aCDCGq:C"WL'CZZUsigC\B$4@6+/2LBg%\?BH]3HKih@IL7un%oK-LM5%&AVDX8GMqaid2^HMBQ9u4^bqZ$d]d=Ba7GWK[lc"uCek=,,S>lDc=4RLa@IslS@[;UT)@kZ`XbAU#oWAp2,9tXbO2/YYW%4LV/)`ajEJYbuD(T5lJpc,0OTHLCLp\%0C9EB%anr7731K*FL[SCE<RQGr[Kf:T.$7j%RSMJKskHBg_hkio#;gs^YjMXA0]%D<7\%5HMB8=:T\c4gt69WBO#0A+'r2\AoY<>^;AnqD=K1:2OBTO1kHPJ"&Wn22o!XVfI0Gc('W75PDW4&k;E=oC2oE@4#UZiR,j5S1g(8%1Rm$f16mbL-`bV,SU]X3pYjquN@j^4AeQ89X>5ae^t44g?rn5cO.R3OK:Mlh]m+qgd(DPAhk'NN*'F)Um2pTU0401R,kAZ]ioTTp%7Ji`jIr@!sY-b0;"7Nt+at6tLr4\C8Jo3RqM-bYak7R`q(?YA_-fJsAHe$s?']/e;Tr$&eRq\9:pYt[tVdc2=4o6X`JU?Y?F'=-m%c&_Sj)h-Vmcrml%2#VM)?\-<6XkOLVl^#QY.K+C)6rS>p?JJ5'];P)pK?on.rq+7T&AE.smj9gU]C.Ds"*ij:DN!qQI$O\M3rd+(%AiKZsF(i8$8Ui,n?b(LI$\iZm7/$E+qo<$sj#9cqIsC!\Va$,"&(07I:iI2nCT"Z#c+7&8Q$_or?2T!R(#&O3?G8FVM7Fl&<5(EK%SC&?slM"(`/\a>p(5Bi"9c?C\X7Opt4*S'b=*O)==dSs.Y!)fb<LXJ"a%q'77e][@5,IieI_f*76+Y.n9CGAh:0bI1l<cW>Dd5O%%8+4f!`QYcFY`HnKHS/==YAO<NSn@R`n*HPZ.E5sQL$uJ]mp>tYEVnnX+$U88qo[sN[gS.um/=`M?U(,fd/EV#R7hETT2!/`o1dpq%Iu5<l>"P(LCa#,:kGE+o5@`G$s#Q149&$q,dM_]a5IpEMB+rg\?U!!0f>l<Kp&#Q6^uKNW*Z#,u*?JiT%ghCu[f/C4q&_6(408Fr%GQ.d`MqIp]cboeS>lA$i\[qQcc>>CT)\06KD%:C=rUG@2l`IAjIe3#h#>T.6ZE\]FH<K,)q"iJ5fA580]Dpd_bF`,>posYcqggO.%2D>'7Fo?V*0(6ONoQp8I.<02`M3FR]:8s:)%lXug?ZJCas/Wd.mb4AHB4"pC=7PKZjr1!g3ps/AKhjNH?2-p>4a:MH]Q*GjgOK4<%YM17I,k*cJhF0BsM*mVR^L$bVjlGklIu^(;q?Xt8QWLn+I_6](D&g*2/Y#,7e[J=,rI)$KUUbC'r2KJWX4-446EFl4g!-%m'*=Pb%I(jSOLG--+#>ZATE'YJX-h$tToAI_lURRI\^<*LYB;[d>4?Er!Cd3De#P.R9DXe0mm?OU+]K+#'Q$V-@rA<Ng'$2P^NAgS_:=1fp%l(;5ga5_JrNdeh;*nO0PY@ildf&K+UK^'T3`4t`4q6$V[*g&VdP^EFs#W)->VRS8Y[4kN$A<IM[Ij`Ii#FPjcqCdPjqKUB,O_J7$%UGLmqF!F@gm7@As_C[AO>ac@1g,QD+i6nFJ&qGr,%5(?^/]Fur3Ogo&bm:d`B5hRJJ7\i;[>O0>!h*SFXWi(SJ<n"H3^rZd!DT/u%f&4uPcr+nZX=^q=.C>n%NAUp,-A@`g!4:&0d\P6Q"J"$\>ac@18oBkJg]-iR5F)X/IJ[aUp#aB17/G^Me[%Acd`7H,m7[,S<*9%>%0M4)F:c(BX"G^CXk0CoLc]>go\.nYqA:<aT[o@06S2F6?42ZO=UDDcKG5fTjo3se.*4:\WKLL*NEdnK<[<Zk,?^kIrChFVUm3'!H%5=]Q3h:^[>hG/&ddSW(fLstge73a[R_D0hUNuhrMO?pk`l#E&dU+ZDt?S_%)N4M^WT.*S80Dj'D;t-'[q9LfH@9b!hk.jeEB?!36%Cn9<%AUhe6.d(t1>9s7HeMG67mN9ciIJ(J!bYH6nI!*'Q\"CVG]H<3\eK%QnYMLb%qOCO8rTa?=RQQka"IP+u,Lq3B:N'T)D5-^D%$'ef*G=H$RTF>W6okjer=iPqtj4B(7Cc%_JNmq]bG]]HJ/qI0W\X"UaqrZ;.&\m<X[BBI>pY#(dD8!'\Dd@\H*bm'2;++n8Y=Oho%=WZDT>[r\s^&(7U?@Dk?RB=!qpOE2(n#a(DNR&F0?2XJq(_E%*S9QCXp\:eEaTZh5p$T27I:)E4b,b_#RU4hccm;TYFS/Eu61I4a%L0gR5Au<0EM"@COQ%$ElT6+dS^'S6\LgBiEr[9[D[>_0;nq-8XZ0dIijJN#`o%f3R1C#Zsp>$[+>4:LE@sM/rU-'@r9TQ48YFdjn%-g^Q)"IOQ2m\CliBA^Yas7]<uIno_:2`&iO7p.QFc.1a5e(5I!If[<U3GC[RGc]BYV0hMo+f?7ZGgn,[;8Iu>qcF@*jQ*pg7Im5Q%S9[o*5(/CD6[>^,pc$fhHL_MR0'0(7,KZX-6Trbnm[#0gPFlV3>hf,Ph8RtJ^VEU,FS.D5JRA6TXSJ>iFIG!RpPIW*6[sF0[.UP"%65*HQHiWI+q=]<`D>Y$Uk4Q$-Ic]VUgbZBYj@H*EZ2=L?B06`s?eTr"muKO`rj2KEUHB\!(%FNdgN3\CW]a14&:Y"Zm_%=7`b,gH%`t.Nagc4kPoA\BjQiI$LqnG@DI.?ko#L7klnFrLNf.S4*F$Q=F*hWDm^p2O]id#o4rolDtER/,*T5PDK0#moSr87;>Mk;p8rHb:;%-iW[@r8F8=qVMDS_!_N"r)F_]NJHt?"Rej?.t-bg0e,N;*r)s:LQO)Kf9:@j.C=qrhOI!W?N%D("+<P'DJ_dViOYaI:lOC5N4Pkr%[>TH[\)COUWnT-Gn7@EZQ7d>+d9HsPb/G`ViC?nH\c]+67u_HIs2V#fmh=[17MSKhf=$N8<jDCAjn`R%-%5.17SdgtW3*=0eki=#%a9CINbQtC1;MU4\O2IF>40kuJm5QOBI`/(o*2fS]j!-`_LN=JbLatEaK_B<$Kl.TP*Cno9UTX*R(DiN"buO+,gPeH8)NLmOA(.)-%^8N6pO34KeHHK99c](!C<B]aJL@b):Zo@<ZM3I>M;:ieOCYd'uBZ^TTS>!B/iimc-3GLX:Q`<ngj5IQg\K\2hMgM-Kn>Ei8<CL'\%27*qX`5N0ceLl%#a05=l%]+?D_Du_nNS:\_.!`jm(->ih,7G*I[UP.h;sEK1VTpS\p1S4mE_gI$RE`8&,M-<Qj'Q!6_k%1TEYWSj%Z<jo5.fRA_LpYTq4Y?@YPjs*&*i$8j*%G=9Vj_)U?!6?TfXWJ>j(>YZY%FX'Vn/!DC@nYK'fBS\T"6gJL@U5ZCC4Eh:cMhPW@G'S%;X2WOXQn4a"n,kWE/=@gC->m?CpGTQ;LJB].6_qQ'mF"2Eu5,q6MsHkeg]Tn2XMo1n0Y%9Tu_RQMsk(uU[\m#b)(-bRbT^<>9!Ur%3,sEmmc=-k`uP\5gQZ^G6&VYB-I)@h5#C58PqHu\PpIm9`a.0Z5=hqkA;kAqAIt<5Q;RNUK$oY$(<^6Qp_nTt>F.JfIg?LL8`uru%`:o0BG%bZdVq']>n]\YlBlU>3\GJP=mHEO8![r%q(-(#;6!Nkq<NbV$mn%;B:91tIAR2.7a0+J;m6b\?d4h7g>_Mi3%7`=ZCu795%9i2qp]:]:#9JNQ:Y0!8l]=&#0&cRPYe`'9V,OtLh1t#(N\G!_p"idgJY`W5OdYf2<MJ';7*JC_7[F]uE(U=@SV:`h57(Q3[Z;hkI%<&ps?2B:C,%KSsugUTB&.?W,%A[YOs>:"Q*g&mHMlHTi^$9/lU>kV.Pf!V*MaLGJEZ)o5=.Et@K&\A#MKE@3e;SoAj]SbLhf-9_D%_3,[-gF;\I=#Lp,XhZO3ZKit0]so"J4a\a):?_g=8m02+M9N?kKY(7rKm:d3ET4"8aYOA9L@)/DCh,Bg;B.t?3ENXb,K7-_)sm(8%/rI75K,kF3fp(/]!(D-TC;$P;4$:o,+2#p6ESko8]]m$`gYo+>8r,'mVe*WZhif84b21!c$Z7X[3^';\[=rFq1bDEZ$>o#%<;]kS%1WBCI(o()uWn;0Gb:$YsZGLrce#LTMK%;Fe2uQZpgNsnLaD((ST&Q^h@<@W2;[i<ieC3c37S4\Qb=5aVR1<NJ$0$+[j0+*13B4_`%igFsdZs#Wsd8s5)k-Qa+Sq>DSoSKk0TZF[hB\H6YU7_qZPOVZ'9[\5V!BfFXmn#!Wd;p]PQ*jX7ENU]]W*Q*C6,8/+jGg3n:rVjh%0$9_O"E3<Cj!)IOS:\93AP#H1Bd2u\C*H<qT2Lse[HJ3E^mqZ[<YaH[Td]m*+XNAe*khjX:kehH882?kM:.<br]M7$.SB.'3DG28%.!5V$!QVMHZRY"oW/K#$@U!ge)Q3uc759[si_#IM`'sjJf6,i?l\qS$>1U?aFbBFW-F/*)'MuI6e58j,W?tVB\S2FA=p$p`MFY)>%A6sMJ.jtdj:B\>[fljZ6+K#PiPeO.hkpi9ifWGlNe&<DW.@NMW"`dGk+Prc>;!A#b4cFgOkiJqTj?lf1lItSV>ClfjA@+<fQ&jgA%O@jXRhk5Y2/:.^BNsD%6]RL9YgiqEQ\5lT%7)=6;W%M<l4r$(iR4V?58aI8#B_BGS-t2!@/ND9e>ARkI9$0rnnMiN=qh_r?O#h5E%oV"277ZW"_iB978K?$Ec+/bg1aQeKGOgs>P.U7.'p[BA?*T3R(JWO`^XRQPD<3'uD2UG8fgLc5NVt?H2d@sb%b^f@&!W?i)Wgs^q%/WN`)E;RZL)H]cl?Bg0K8e9`&2Gb3WFU0d`.oLa<3^"h%/ENk*Y%5F="iXCEGjt$j&A))ef8LD6=Z/7'%A['%]-\utThYaT@o]nh%,I&21.2*jC@JjZ`nWBc3F>[\66B+Ypd[H=tK79%o*>N<Vf'!tWY1&6o^mD[WH9dt\5`l\l1g&>39E^d_%]3V59\aPTUU$/#N6]lH%_8e$nO%>0q87!f.Cbr!iFWn&uZhG(Yg9gQ6Yt-R#3o;2[ZQbIg>gZjdU4CBj;1B==27Q,%.3gR\CIj"fVXFgCSs0TRh1#pTUQU'r%6:ZpY8K:YLX^iL1-E;I!UVqC9,<W+eFd>^,jC+^QSXuQ2*B6%(!0:d62\pP.;V"r4'mQO<2%o&8#a($*)-A*5,)^F&b(bfbkmRqY%*jMZF.mL-t)45-OOk,@OLmD?4KajB9O2sO)p]ieDc5%IQJTb;RIh9.R+mr_,#ru+Eju>5+de&SGo,4j?nO"N?[U)selmW@?F<^$r%6<ft0q7TU/3Kbl_\\om@-)rNhO<Q'h..Wt47!^>g%@-lS;Y[q>`VfC'9gKk8U#B3Qql3(GpGCM*1s@/IoTeWs[1"/pbDh`iFr.Z3%'9jh%FR2pSK[RZ9!$s+3\f$)n;\]gX.9^pq[F4$TOIM2W_j1gU3T0CHUF,A'T7T!i'm`C7["k4$[#A0\>8OSLihl[9;/i*\%C%-e%Y/*c\J\tLugn.)9.8fJTE%Af^m@Q/i59?)iJ\;r_S-rr]"L//9gm!N@3p\+SeN0sE!k&:=l5oOX;]s'4PV_0]?.AEcNjc1#Gj&Rb%7>_n,*)An&<I@9L@\(SC:ddPc"`;;?\=bZl3M83'O\sJOjRZkW`R>jW5,$tCi@%S4Q/YMrNCW4P7;^K]5#>dh.((bcT$iJ[,O_H4%N<df$F)"lI6cW96/@FXf<=/q/Rg1c5'd\n,/Z_DI)'s_bg<m#TMpe'(%>p0A#rbkt%"qI-^3=L4EE;.A7Z1jmFKVLbBV9;Q&=snj%"*fRG5)@Z_VTMEJWWh.Y/!9grLJ*0`(G.WhrtOk=8<X\ggC/i;'QFf;:]Snl8>2`F-sQ>:Li?8?HWk=ZfCpr8ofr_5&&RY%;6&[c%aD(:OP!T1Rj"&cRYR3`LLPY54m"2Fc&_r4JfHIAkTa/O:[]S!3:1QGI8F3Bq<!S'g%<36hCKqXCASMoB+h$ee*"pA@U`e%E(AED_%\/q+]H;"S,[TKoN<5l38,!^+S`<"FVNNjlnmQI/R7)>IS$W1DJdSl"5[%0bbE<\hUZRg70P.qAM0>8YgWk4p9INj$A0mZ4"o;^e_%O1;J$a[_*EckgKS5C'46.\br'@Lp)\/#_dNRY?eR-]g(B[6uO1CIX1A=R-Nr(kebeUQcI<XY$R>.9Ap"?E'u.%U]l;XnPOcM%%-I%P`%fDQ/DjPls*KdSnge2"WF4'V")BT5Tb7s:gY&9.So",R`%IS@gSp*4l*_O&Jd+U9&*H(qb<nb[hUIa_In>NhH3Qc;buZ&-I<ZB%h6bejkHr<L)4NnO`c12=Af%CP(e)&*Vhi`0>6nuCelk,)^]FR/F`bcWs4ICSX)d#3Z*YoC`/aAL..O+3D[/=+,Pl<ZI1$5pF=VZh%8m#YiCat997#FOY8;YejqlWod5o)+;K_1l3A&_7JNf/Y=.-V-)+bBO_6V`N-0[4^0o<&j%;g0:-Ibj^^fTRp+!@<)*:IT.d:LW-Y%:Vl4/NkD8Y;+?mhhbp49TN)js8kn?Wmo4T]FkdlR+'jaoYo2gjg5cb:;jW_,f_5;bL@;Ef2^tC9HRhcN4V]EJ*'S/;Ve"g_1iMsh%j0t6J.QRj?rd.8"JSVI;;e\(%aYsIuNXmA$"`Ho*c;>,N5XHE)hpZah=qn^@A:PA@6E_A#?:d3&rL4f/Y[L(\cQsU"k4a5N\fuqS%/F!HE?albQ;kqG_b#NSiNE46(6bH"3,#3SUJd=oBCo'uZ@:ss+G1+)q"0^h1Hsg$HpfWh.h%q`#d5W#NTKo1sRSt\YDY:AE7L%pi%+VU"7+)U8RVeceY,TFV)Y<*Bdj*$CQ7i6q.WpdkV_B%$T0+k;t[HdPM%bLbPp6$S1p*qiD8:Y+`Pp#L&%jo_LM-rEm'msPTZIk9@%s%$Zl)B+2Ck"(>@;'W5JkZg*b*fa'P2=s2q5ubuLC'$InFWa'm<Wk0KoMC,T$;@jA0q^pgc=N6?&49+I9=0_"-rM&%j1^Df0lXc^%]$p,O(t0##L#Fi[Q&nm0??g5*,Xc4hl.?%O!.6=ME6"o+'fWaHM;&9(D`g\VF]WjdNl?6n4&/&*#k5m7Je(I!GWO18:][D0]$B;i%d1AVTU2!n1;5CbkTjse8$6TP/&^N-fG9:K45Z&tn=FSa;7)/K'JE#UFNmOE[UT"jeWe>f63)4l!DVSq3Z,2fblf6s?_rk2?Qr+Ls%_'9<WMXa^#oVBTEEEQT&g7WPY067KUpg'Z`-!JnXoms1j04#iO0:GM/E5<gD9QBF`re0NlEH2Xp(ch+D&!(^0!2K?22j5.3;+6"<%i9A44IT+en>#aEC>U?&->uWdHJsK/@N`?WTC6ZZrhh)r%0"Fkr/6EH(3uM,-D<Sl)`%`;HCu3fT"1:A=Xom.m&W:t)UOGWHfTuct%KM\l1?hZO[SN==iY;6/N"6#-8*KG4=+gO#oYS,5C*lLD>F8V_GZ/g9Pg2[%admo:ql87oPRTG9P^r_7DLSpf2Q]?MDBPC;?]1,a9%nS?]%'Q^$0`WVu!GAsdO6UK7ZncN&!G15E/Ha3+Z7G-S2N;JSj0FID3&>34O?#BX%E?a$+n0;BG3ZN.<UCPFe<;*&X2kjNaFQ2QT%*E\'bF=*\JJ0Zl"W3K>.Lk67Y$DAS3"46cVCs%!]R^s]F.3c7#b\m#Sk%LkOk1k8Zi/)/Y<ru"s#E^B1WG*V5%4<YS&u4eB2%VA9%=s?tK2GQ2aVd*fk['42-Jk0JsFuj>3=_jh!5oCaT>?/Q0_\rY*'^piuW452\BLG6iYQ:GfHCe<o$P<$cF,l<]FK!j8+N?u0"aPnd%>^;"g<5Qd&o84KX&=ZS1FuY.D&6T-<!IGO,)JpC3q#I4YB+tOGS1hhmnaOr5&gT``"6Q_h)R3&tN/V-aH,MQWHn"$)`<maA<g;C<%-+nA^=@ND3_`\H$d>4D/!Dq\t8>F6-'/(I`.g$:BPk[eK5uFJ0]u!VRnQE+uOhj!G%J8P1GsuWgBVBDW>*WL=qJQ"[V?(I/!WkJZ%!`'rX<>I#YKH[tW_#OkF301o(,.HXR)RV+>C8r3?b!s9KSq+=?>u7aq4YR[X0GcNJ51[&*1`+Fg7jS0go85Hapi4PPPlgXu/54T0%":Z6p\F7A`^k(G=I`Q4LikBtg0K:d8NZ7I`lmB5r&d>nHP0[`93>Is16]"\ehU'a2%gAI>I7kV>>:\S58gdI=[O.QNL\cI(6[M:h%Cmau6!Y&$t4t*P!h*Jl;:XHTTV%^pQ)Rr[Ui:IOm:H8a"YpDr+N%u6[dc.ECjO=f!L)I&pB-NgX;InS:.=8':N&J%UFNK+8g8G:O%J!I.2m7'!1]:QHpe"Vj89!>V[FRaVBG;scnPk'#KEB9,f#Fkg%7A0*4+!Y4uZq<T5&DaI3)qs"r&s$F5dp;9*O*X4=VaSM@_E2G3%J6=$$O=4?/d$;$q@60Q+dn]u!Lk6C.X#Qi1-D4"dQ4o6V;L3btW!APZU4>"V7$G,+>&qc0,(Is<L=gF=C^h28[%.MOSRp"Fk0nX$%ZD*XZ.)cG>,RiZU3$9o+1nr.uOBZtc#F)0>:h&Ro!cj^2GD,S-h+=CU?ptJQq\3$6:!Bt8.nXKS[@*g#nf4=F3jQL%lB(<7Uo;YF%<Z^N/T`eF1*'UX$-:#dE8mKJAN/3AJ(",FB_]puM'Y9ucV-(9u'&Y7kpP_Rt*%94mCkU]`IV01A_PCaEM"6SA$6qcST/1QhpKppX%9isEo/mp1p8cc,S:bQ,_Z3*XMBoQ9c5sW[/g*"aV#sqXh\V)<o'BIDW>d,as8D(90FS\J?>Reu9RNMW.#cZC?c5ufeMEn::<M"8h%!M"KTi:UF5'3AkCKEg.H"ihRJfG>0kP4rWYF4h/)#;h%42KWP)'HoU"`h9[O[_i][Yj?UoOg93O,"qL4n$lsE[$3n3(Y&td\uM")%'Sj_r+=ONpPle+/8n?8nhD6(f+D<p<7=gY-;=DJT,dJap1^K$2:@f2aIPcb=Qh6IRV@H*qji!PGP![iM7F[LgC8_#a@V,G>K7,*Y%&hf[Y'h"V;cHB,f",iC?Bb-_UI!jIE9dhi<j.1pcpj$7d9&NN2,JQjX*RY;3'o[kQ)'b9:0R1U))'RtQ(&]1C,:m97#6=Te%)d]S%n.9^TirMU.`P+/+)PVRaXcf7_1FUtgDBD[XLk\ljMEhEn,_d?I0nZJ/Y6"lt!?kO$('d]tpg+n`DC+k<\iA]T`'AT:@t@O$J>N*;%_U\2q,<Qe`&=nV&G*U?#i=1`;+qP#P&EjS`NNLJQPZ/:V">q+("3$P"Vq1uR+AGt;qJ/Z2HnMF`gpI5Vm0(+ldho88"dZdqBRjP^%2]6r96$Ag3f2YRZS9p8tNZPhb^ainq(lCW=7H#2V'o<k*+OP/RAlT-nK6:E2#8`&d;.hE\;6b'QH&[eBV=I%-.Te`dAoN>I&;Bcd%SMB5\$XVB+'BoMZ7Nm]k]KOpHdKtuYK^@8)MS=r^KZpu()*3?+6=^^ZECD7\X?k3pB8,Oi?g(^j`m,THqh?26V<478;i@>':kWu&%Q:UM(d"q-l?;!-;$BP=Q&SSRAim"<mhBP>\(-`"8l@SLYSoKLT*$U)mQM$dOPX;&FV9#9"U6,ld,M3.9JWYL]&Ntj+5;n8/`Y7:C%i79nY(%H@j^]X).^t4>QH=[a]\21B"fN><'/`RDqj+`L4JGjHh!gZ9U3SD[aPSOs:H(]-Q,=-R^&nG@kEECSKCf%'tdZC&)>p;cM%-4$S^#2\E'#SSJ>TbDpB,d@@I^m0W7,HMchjsiB@[11D3<W_%qAi5mm5mYA$-4nKoWIa^Uc^AT.LGObr:l.C:b=r@b5\Q_agPj(p%*YR[HEj`tO2GDH&X4&C!NV:#;*/WI8?"/K?BsJ;^c*IT]GbGO@JhboA?tpZ63OPnV@0T/>4d!TE+n'\`aF!PMJKc`G\DK_RX:,;D%'R<L85lR!an(80_\QgN8hR.TbAaP.HU$Em,@$e>X(uJ:%.B_-n&BZ3c#u8gsU/lmjnLkk9)."O'$eGmc1?Y2fFI6P.:5Tmd3)+9X%<stk34Vep1W5:in>3(T0g1'dZ+[iq7c5]haGqDYb>#05dCeu7dBF*QM*Yog.+;e*=;3DQE?4%aQ;f"#*U11R9?;b'qpB5Sn=X!YF%`Klm:GGGA49s74p1gMRX/./*!^!c-ONZ)aZ>S!c@I?!7(-,HJd+t1;oqJJ3GN8sC59a'akoJ/NVXb/-gdS`pXU0l?%P1cq)qroua%Lgj,dnT&.o,0B\Ub1V'rRZcOk<7g(MpR+q#e%us5(RmZ#?:.XVOhs5b6u[IVM'0jOLAR!/h7eUlTpK/K!(T9taqZr>/?GqL<ogpa%#9jqWO:[5cUL/gLVVeFK(j5rid=]^nJD*sPpCkI_r%ea?i5"oJ_:f[C.VR?+@(HEFbCdk6M_%=0fqtDrB1htlP?r$emE$[4kicD&%<C_ZsK%-j$9R7\\<7'\G[!g\7=-pJsV\If5_P*(F-0cQL_/.p-;UA@UF\/7GP\o2=aH3JjXn&ZYd>:5Z:;KC\m^gQ:X`HN?Q(-8Y%,a5RpX<9\n_Z`V@L,]97Wg*mfY)HbGW+;Su1R0XK\etj5#;bF--jg_co^GEA61jCO=bf@:+ec-17PeOe87Qfi^IVZ5SK90tp<*$l%+s[VMpfsc;#X!/^@Y(tNJ@!iIGpVm<BXC`N^/P'O*./k\EfNm0C#[SQU4nS]QmE/M=K]%M?.@PX\V_'CZjbZCi!XL+Ls`%O2c.Z*%'f22^<cEDcgF+hH!)'4&O]b*Q:R9/bH+NKKUZS9Q.M\G9qHFN&:.--7SmBa#DT0g?6%,&P7=aM7;(3k4/HMOkW(Z7;[.+9/.F8pA%StS5sihYV*!?@(#L'DoOmjS^K+mOSQ!&X=-O>ikMp'EX.=SANsEt#pV">%Y(!C_^"EhYAsg=OeWZ)EHqos-q76K,RP\5=L]feK&#%Ik&`B/XqKH&Hl`)(KFh19SPCGp>fH_"bD4k^g:1I5l'aLQstf#$#Mdg`C[&r`!$J-F-"uu:^p?uK;KMfW"KW0DM(>+AG>;77\`J2%'`*,]-bpTt&@A/td=4q3&AS=14eeQ:@0.t'>n5Q3IIC&_");B;9V=:tbo.i2LWDL]qmDU.Am0dU!lpOdJg$F*EZDNnP#G1=[E?]q%7LBZW<j_[SS/t0gNt8\4T]4QU*FCsO"T$!TFcAY$]2GbBa7\ls/Q&GO!<u]%@SRV$9W2c5o0o>L`-Hs23'"(&VYib@*k;GQ._up`%"9G)l&RB8g_/W)U62qXDDQUQ-*8&HM1?K>dW"8\64oPOTJcbRJ,_Gj09d(Q(JHZ0NB7YW8LX@>87?e@l";E?'oq9YlL?QA?S/T0-%3+9a4]k,^QJI<&j;"1j-1XRYhTO\eUCW-uW3"5&n`DIh8(t1d:c;Ro&k#<iQKe%nnI7u5b_U)CM!uld!DGOt823mp#eu8HH@aL$V%?44[eZHK5U.`aEmA1"!qbMZRK)ur?CF\[0N5Z%Y%TYZR:M@GB:kUhQ'L80,,X9S)==/DYt[tcrQj8=(j(,)Nk.:0g@9hCPB1?S_o%KZl\QcT'`XBUUEY\f5>s(I:HW;f"B8qVY*k0WWZ:Sgu6Xi^.umd6_YI-(8h"W\k)R7h3qhZ<p8`./Gr9L+tI!M6fGUp-A"M:8pY7%Q1koN\LjV![HoTi(`>pn'Nug::Tn*[)R4Y_W`7<(Y^]>O-!nkl2i@?uL'QoV"Z7]]6=Z\iY9LF2lf$GV([Mi79?]7qZ-c%*0F=)]%REEF.h'g=22!2)0H)"!m/NYn)Je'8m(IjZcCj")1DhDdq$&J$N.7E879'q-Ae6NAV[$:MSh#R4#dXmoCh!_.74bdaS..`4%MeYV2%FcK[2;D5hKeGb>H-H`+W!/0([Y2oK"AM=5UNQ?+)jJl`F@-CoK%:I)pjFS9uQ5tMef<oog=Z8Y.,qY[N[11..,rd?*T&`,qrFj.n%o78aOZf!+7f-@+)!_rOXpS8uOWU![kfaqX,U,06(bTU_[AMb2#.0LFT/Y*TWN`l70c7qE0.)K\G<O]lDHA,<X'O3bkL>14aK]E:K%0nn?MTTHET[WU\nP&WCR@5)"*)tBX>DlF0XPsRp4&-j2&_^nX$]O&YGUO:<Cc(:Y<,(7^LU71j\[<-BPNr)"[er\NIorD8E&I;ot%+t-Q>`3?#@27XI[!UE\f6JjDKk'a#A%(d[H'92,tTqB?[=p`i$1q(?Z`i#jk^;7&H.Y\'Ud;FdVq*:CUL0(n^C$'Nsp1MZ!HI7WK%d`3'K=&U'.0[rQe/`[a#6g2m;+M-Xpa$^Jr#&T!YW38'd"pRTh!LlrtU_K6X\dlW5!]+T)6KgrPS#R->UH;MnCL,ZXOu/):PN*uV%*tHG-3gA9?WMdGWDmcVF\]S6YM53e%&@V['/Qt^jHcCu40CLcmPq%ap>p!NL"d:8Z&A0rL5*'[3Lb_d+]?GcZk+=GH.2#fI)cj-E%)M(SOE=A4'n7kc9nj1,FQ.Pr+cIUGAVc\0-5bfLh4km$h*._Jt4LO.*og(]*OsF)a#P!=SQ;EDAnNs!2Xso0^_I"k-PcYkH.PZi8%.F(=oG-Z$414t`a`A!#_ibXOABed7s>N6L:$QA*O6?p<r`2!rNW"m+?6?iMpZaLg+n03k7<XRdh.g;5*Gc8ng2.:IZ!q9l7*lABT%Zdrl5;HF024;N2N&%"YNP;0_#H7=j?A;T8r_M%h<L)2,leVEXG<(Z=!GT"?CG".Yi*=0H6p@14da1R3D^Z.R/[3-=$_dJmhPN$d0%N9'd,iB,8HQY.RiLP]OGO@AV)&<D)P^#SI7k!1$%$c)nQ(;0gmXd!ESG__Pq>lkDj"c6a^Yrcb5#s>-<*Hi#8pF18%2kLRQ@s=kQ%`;S*(mR!]!6rN@]T^IJ,iENEX8fkSPXgt2YFr*43?;tRWmWq2A]?=n$]*iHt9p+'K."rQm[]*F<bZO?e=:@"in+pAa_7S'/G#O:T%KiY7VV!&hSgIOHQU3@d",V4=uBk#jZL$q>QaP8=oLZ;1FG)G29phR61,WlQ$Yj?Z5%L^;`:[pMsm]$1gr%?K&A>bLGV6f%!n$!t9%dK4uGAp'LuIKp9GpO3mm$XW..V"e57.Zm[-NY"W,ZYN`FE,$htp`8o2#Z"1b]27`pbMm_3+ZOoJ%b6Ff'INpo!Ca,BS0fCAZrC_?%8j%Zte?su*dU'$Y8)K*k5bZSs6?q]S:L"[P"$3^7fU.I;N4;`e8n)$r\u"j=$fPNs6m]8Q?>uq!VVk]u=q`4jiF1;+)p=gNX5.60%==`QGHksUeY"#NcS;72bQCr4kHMau6Pn(c"GemU^/;+h@l=UI_@K4E/l9ffQIARPsfOq)_=UF&<<t]>2L%%F55$/($[506s/VJmB%blkC)KEkgcfWhTD(R>sPQ3\Ol$W.R?#S.>A4EqXY$WpQC#qUa"NiB_!&7,A7X-3^P&7/1-\.@PL_G%WoKGWpFCInqqPepCK4iJ&r%lU,n>"l0D5plLX,j=+XaWLJ;A%tc$+3ed'r+/h%E&\O3Wl$W[F_M@sa.=qdjf.*;ce4gMAGmOOS">B/['Z.a/(K"fg4Ih]q#i\WI%GW:Wj*2a>hbE<TLTh7ib88%aI+2S+SZrRRnJKbH#L%+r)q@F^^a/M]T]O4Kd'Z*N=p/qZ^>qZEe\^Og-'Z.b=Xhu95a-)i/BTj!6%cs3))KP)c,(;[oaTp/(k4KJRg!\&d-:(A3jG>^\kTT57GGTim&-%sn9IshT`qh!*&$fPNLYu#6Di<@_M;h'^Zn0$VuI8U?31/J(+%RT%XLV:dDQ(TcI_$K2-jOeiU1Upns[Rt^>Sp2pfiJd5R)W-TuaK[;0(22gCH:2:ZA#TbCQ:o4NTJ>2RlS7WAGS0eh1:eJ^]8H]QP%-krRl&\MMZN`$,n$B)^\/;,s"Me#S#Q:9?&$u3>G^hTWrc"K278^SZUJYJk+<^!.=ia!oG.?t-9`?]m,Q?[LJX0"8FR^EH!"f.8N%66k0&NTPbIEJl).Pi.Y34&L3!Qq'NA)UW?Y#Ut?X&@Nto6a/1@.$RN$+:"rUiB9UIUI:ID[Q7u+:$@WeZn(2I.D1sY+Q#N1CCNP5%J.X4%:15/FC7t*c@W*5P?6dpbn/;c>-r/f3N0B>i=Ts8LmM!s#QY:Vt"L1,u?Y7()<a[C);/O;@@RI+u_]HBi%2:t2*(D).Z*Z47%Z;C^XY&hgB'2Pc3@02:bb]$n:=b]L!)mNk*YHa<p+gqURRPstV[7H[j#o7"?[R#MV++1e79i0>^;etD3g(Fp5"4n2P*A0Xc)fqdk%EQnc&;qoY5:X&bt%^TgDW?>f1mZ>H8)25bZbe-ON*h>!gGdaD#1(4#!f="QtKp%Wi\u03j!-p6FLtX&lWR.Q+_R:E&5V^obhd\kg%%>A*)Z@eDk,!5n*T0Xa0]Z3DsW]@.ke?jN';KSERp1gQ4lC:NkC$KLSq.lfF.SLBR"(9AJW;LM$c;MOL=qh:dd-5>IP>)6(4`Z_[%/??gu.>bDk=hTu&PpT!Q]0PlE7ZkA.BAR;`Z<P:^l6LS-7tHpQn3soSO>+c&#J.(t'/b`9oA[\n#/M+863Nr+2bm:7@B4'N5u[%;%JsQ"FTKbCn<>[kg/N+J=OLu$J/IEJ':+Ba%[HAJd9ITOSMNp!>Bqj10_@R&&&=%($ShXo@>4i(V3Z2A+^`HpfC./T_p,tE\0EHdr%1k>.f]I*n="tZ1OJht9F'M`KdXmX8uE^<$"4E@)c7M.&M<eWBBU<P+WSqr!r.7nLZ"^le^;dg6Gd+S.s2.mh1E\"e]nPVS==tgsD%B$puqP=uB6/1!=&61%>`SC\D4/u02G`'n\8\jG+g-t^[ui$Mu7Gh=IR_1JNq@'@A_-\l58D5ReB.O/$kN&p0)&5A]0U2/a:Ztb4)%,KAbAW]e>V"Z]O[T@.GR5*)*KYsI/0jI4fIY1,%(CH]%81F"?>U'+CblPl)H)kGj2hU@ai2.$V'<lW#%?rR[O0.=]C[S@G?5s'cM%._aeT<']55I4q:n'TEQ^W&hp%)AueR"Sup`8Ee\rN4Uio6(u;k.oefi47T_H<XIX@29VsUY&1c^0n#I/Va)Lgf7Ftj!H,\E-`)fI%lo5*'MZUTu$514p:nb$"MJq$AZ0riG?Tjg?;iR\WH\R+C]$4GoP:)",5h.^R9sY)%PGR`I>jN`(hMul^L.Wu/:T>!mCM$#<7N=Ru%;`ZYc)lKO>&='&L%EFK#kY,Z3<Nj#2fls<"V:VMrF^n"k_(t#;H/GTl!`t0B'9kF00;S-2NGARG9F"OSm$*+6(O:RsC_Ulai$$hM%:fHU<_Un&sWOLYG9HG`Q/!d:UX>jEoc?k:GK*be>$Xlq4H#PeWm<,I5&5sjn#7U.ZMBtVYR5YtIWo*ZI&pZ,f>(WJ^j>AZF6X`$#%h#1PRR=]nH7'S"BGq[S/mF`B*Ui&TLRN&tNq%IpD4MdT0:K;'2.Z=$?VcPd@C-<+b2f=F^2@<&QZ<@\8XY&uD5XESrnsS5;ALU'f%"N>qraM5<@$r>KPFLE=Y*(;iGj%@lE$?_1&<6?_W6BHLZrDUch<j"*\-'\6?LgQ8(L\Ig2H=;J$UAUl[7[b*kB1C7IdgDJG=<^0@%J!j%;$3_CIgJYi$1B:T#+%PUBXa)P!<ce[_Kf^=EN<,kUG?%EhNDIDNCB\;o[Iqm)Me&<S/FQ/M?o\+S9&?UO/CmIs5.de?]&%WT%QU5e[1!'e[DuiCu7jW,@"C\asPHb(0<g]Te'8%D]P`cW"=Aa_LCa,5_,R0M`FsDsfh2Y[AOsFhg0pH%-be5&(M<]/Q!4O6_LUD4B%K9B_sH?`3CCb3FH$SHA*l76UJ6>W\;'iA#,e4?iMb)l=`f/lO-$`1?8%MhKEg6Y9kmAq>SSl0Zje\=eu!#41SG$+5sfU2Vg!X4<S%J*_K.*X/oQc4,E"`stPLCqTE:UNhQMN`L<J?:/O2kCBO^'aj\6:%%2MksKTQNNQ8]$^S$h8ZSE1%L,N1ol[90#_gd'j7O_H"iN=d%EYPP%Lt30m^rg;)_c!#;i^G90G(QJ(osuYi1:@#k-t52EpT!W8Q!2oP&0Sss=Iu@Oe&'2DJ5W=6m:fbfO;)]JPS03ngNkW?T;1P=%@&loiI=NMd$_1qbR5otH\M?4rV3,$qUbn3uK)qR.W!8J%UI^.e?&RNmH>H?A@]=+s-7pj+Y-jT`-h%WRb;H$:e?!'\MPq!HWn?87%d4M@T:iti8EIr-C;'d@#86-/<"@\ZVjZ3H>*:Ir'9o0RY!AiPgeW%a+I&\+^?,/D:\(#VeSl3<0.<=3r-/dAjRH"nDA35Z](rrT+%c\hscdjI`IF],_gDLKp4"/h6EX9dZd_;I<QXiur,cS.o&)\"X8Qs+D5\aGjg%guZ/ThZe,ZIEZ0.CDoc7cK(Tq];"sjNrYB(hU1>%6F>?F%]%RcEBs&Y_bSCtJV"rbHcep3!lRr)MoFD`f)5]iaf\J<[CfRClSN0saE+1#+!cK[J]a,^]G,Jl,m^B$L9,?/B=bV&#3?Rb%RL2eA%(/f6XU1=P6)c`i]jBk&9$MtS&:+WR9/WnV"f#0n]Q-@_P2`P+V,/U#QN>&TI-!1J[AE9d6At<,"-dc?>ZYFkKJ('7`t2V5%F>/0B^n\=Uk7)Ac$15+A1XSfgP4FMipco^J6\A$%m1hp]6IdQ=,:]nUV')81ia!DF_N:nb/J>(^!UT=$dKG3lObE*O=[j6@/u\/-%^V>X>ahc?RkDJB=KB2G5VFkhp)$'/rg4Q=-<=#1V<a=X-i0*Y3/,,<>m']oZQ&M3X"k8:$!C8Xgfk-s<)83a3_F1FlM<l]Lo*crL%^?3qOl0MYC3Eju@aHt)[>.&L0FK2.'$.U:9i'Gck=>4Tg<U7`,?Q<"=ZEk</TeL\Majh;P5g:oAXGL-j=niQkKPJ3&e#YAKCd*rV%\a?N]&tl%=Vh$c&CK]"C..DmS8<I7.OUo5hZ&B]bkI'Z!OYj#B-:pmbaCn,Q:+Ot)osl/*rB[12R/F,OIA<bYEGb5lY;^m'L`.r>%J3/fo(RA?-s'B1=PLZkqeX;.)b2TAkib_#ii.Qq4GC(VNP:MWs]2ZXL>S![p#kC&8T5m#g<%7l/i2_KT[<Z7'>@h`ck.BiDbcNO=%WjD"Z]K$IK8i*F1>U^F$@1F&9k)iBLCZe,,BbQRM25V<WHmGpO1m)q5kFM&rQ>$g4`D:8Fb?M#Jdu$44c$ZBYG/;\'7`#+L8.m:c%21\&e;2bTf;m/Fd"p5jg\cqd!61n]?.Aq..aEpP.$UNF.,^X\!X9#0KI+IY2l==h0*$fl+(QrQ5giYo$4+W;f%t@[H/Xg'jFDZ3/%3OE#@JE'*7AJ8=M'eg%grGa("AOV_'.F^GY82>qT[?a#A/;D\hY,8Zih7D0t>>Vh7Vq%Ki_3O&XobHOMg,<DV"U)0l$Ou9m&>LQi%$;)7m3,$B->S<U(3.m3([365W%#'6;Tm)&R8GSQH$aUP$9M;+m,5Xs>9CsYbD_LT_9Yrd@lC"(k3l?P"7ca_&>^&s/=7C$X_YqL8%$)TQo%BUn5F3ZEe'lQr'^EMlV[p:;",H1qL8nD+HXfbpY<okMX-gU&l3b+rD->qlgBM(;oH\hlX`d:k:9a2`%rB^bI0'Xmfi'[,o%UXAI)MPX9E;*7ZS#[>EE6>nOm(OM7iM2Ge?L&n+^R@hn!U*icJFoZbsmU>'SUI'W),,Zte/sSBN8?NF&8J9MA,'O'fRL>o].aHsr%/#qQ,4'MA$BV'XJBY('%V)(^oDA.:KdA-mV>2gG%cQX%Jb'2i'+a]OLU^O%e9'LJPA]g*\8e;_'h\01g@8jPiC4o_R>W>mV'UE>a%$a%M1UkHA9Yf2PO9RK_1FaQTMK;?r*e#^ZcZ;aC%\:]l<BKBl$&9/B9+D?R(%r_\?\9qXl_5-95.%46pU;CW@!`6rg$8$2@f3Ap[%>R5QoTF<#TMUlT*4i]Oq)WP\q?@c0?d=U11-3]:(;:Re1"+pAM17G%h(7jR3"i[G/@2<JMp?\I?oqGK]&&,=9g?8^$OCsjJ&4mQ0%XYLHU45P6gb>f>%Lk+'46Q$S5Y%_dHYt1PGgDbE1l7H,4)@04oW(M7^'t#?K3X*QsCXW70GBP[50g2ao>Uo]'$qVYN4I_qL,P=6)%f99;NPgsd`7fj%hYC""tmqHn/AX<68<#>42k".2k.79^uTg05k,o$uC!_GZ)`cYYKH>\IEH70*f=\rJ?6:jES[G7E#T_Li4W590l%H_Wmk\M>J8CJC(S)@2>"l0F0X?15TSO@3u?/2JOX.FLmVP41A$B6i2J2Cb/>=hZHoXmS-eOc\.=nYji`>T0Wlo#Z2E6BVajPU#EB%97rChd]!8A:_Ir`;'<IfUDU'tm4C$mQW6Q\<Pjo<P+!@a!_Sql8N<uG.!Z.GOic3K>XD#,EMg5[^$QDM0I!,BRODX"-/nDNMIL63%DA$Bt#u)U*8[BOr'.=;7B-of$WB_75QipVrY,+'2M;1`RH"QnV@jQO9Q@q29$4p1A,Z<f/,6/p:H:l&;$trN>W3f6._ig**jnoaW%K\ri<AqFD`H,)M883*N\T*\.WRZq\e/.%'_)+6eh#0U2h7ZSi=?]`XH?qE=RNE2tj4e]60iHd$]B3=*;MBsDbBQ>e`PU>f4#VTQu%/tQP4j^Pr%Jboa"_L9gGB!4ZdqEs.M8[p\gjt:7Zl"mI997hLbjEe0S9*/:17I),:(cS7Ps!a1#/jj>0+^1Na\.;"\jt\IoDb)Ua%YmA<HYB\6p,bW6c0J!MZKnec)&e6=I,oP(JoE*#&"tAe&&6qt^P->>,DqL^.lt2NgrUb0Q!)b3OLR2s!_J(QT?_J_fUmbD/;.s*I%<g,g@3-VLYs3uM?8oa,&8AYZLUjD`rU;Rd;_F65M\cPGgX#l=+8Yr\t;SBl-,[Bi3"&U<M[KZ,r:`p(TC8iMZ3gCKQl=N;ESqe5G%6nTFe1l"D/$58JH*!uG9iT,h?+a\<7r(=C4mMDn1i0iRqG`crVBG28?!?DV>_P8;X1C6R'o2M$5)NietS1mMc&KD)`XaX#b,bR^t%7gkEA@`qCa$*RPcFXi#`RF%iGLrrJMJrgh@-Uf0I"sdX;MLh)r$A)f@.#oS=A\sRKE8k5)*!mpE<$ek$E%u@?>$h=VU%f5DX9(u'%;ME]_&<d?GU(@i2BcPkcU#AOQHT*/%ZmL,[dbjGD/=\\>eL6:X'M0N.'F?3l?o!QD<17Mh7hEQR'W.!3La6aaJOkG%1d[C!np'5d%,p_d=<$!@tM&c"m^g629B0Z^l46!&ZMG?t^$0O_7(lBN",Gtfe6*_d_V2(3&o[nM"Br&qW$q<S_/TCRi,N3&[Lc/<O#oBqiE?pqR%QuF=V01&2h&oKBaljQD$$cP1ri%'h@P"k58.ZQomTC626<2D+G6(jLh;<>RCYuI_^F?1'%2<sF?$$h5e:ti7)OPra/,;cFUMGo/:%Hb22VOatFY0aU?:$?^(#On=kZ7l$_dNatBg#XOlYXU:)A?*J9iR</fclt%j`d>HF%&i$Z3%*:Un#]gaf`6NtXe;C7UO`iX9>nfGY%_SG11"=$Hd\d$/#NJ!0\X^`e,#B!Nk@U7D2-plJMAQPe?<&.PgA=3nVR#=VaM*ZdWQ=PNt^_:#,-R/ocf2Mm(:,$<Pf3Vst<5Ann%GLK_=;(\7gI#H]KAbC9>ITcGIdcd3$A<E<9XX,B`R`8N+g.g2NDN`abH#$l)<f1W[XVCjk/]Tkm7l8Am;f&bed\^0OdM/^O-CN4U%.qFL)&ep^,BgabRe\Pr^3`qYJDtV8*!_c_D.u45c6rNU@*A+R$WPY\J^7a$6;#Wo+*I4Vp.^*P@-$+#Z4k-lSV.c8:R2]<YqOT^h%@&5]7*>W"V1XR!aV-0l6BCCZd8L/n"P,2p[il#dbMI'Jl/B+R:.&1&(%\[%99'm<mXqVc#8[d8%SfTn\Zr7l;a^kL!QV'7`MR&XO%)ZuOBk,jmqY:Ypjl<T!:;m,e7Ju8rjDW$VCWki?qAEmd"M(>b9iXpsA<2`et&$As;.6V?>n\+LbecWdC?l%N+[f*m@rO19$[;?_%%18W9aF1jU`J508s:+.Yt5bgVq=^8V^A]9A%?A/N$f9/I`2e3WUA9.=%[^.+p`au&[8u77W$c:@dd6bHc2&u&a/P8*)A^C^M-m,Ut%KP5;X;^Fq?G'@H*eB%HYV8Ap,;A,!/[h(k<'Zb)#$5=b-=s?t>'eH9<ag+R:>Y_9JB:dSj++ff9f%eZ\;JL>WRpDRW27f$YWR\C%%RBk>&[gLhFblS%b)[4oQ`tAK_ZDjD!+2&%4jl4F0JrXf9+7JQNE1.qJO/e>`H)(2dS8pLH$XG/D$?gKf95+/_\WF)E-Eje<QKtqo%dC-:?Q/]"?`cm^Ylt#*4)N(OrZ6[Fk45!9Cb2r83P_P'^F/,S2T`fWMU=NX1>\3d?(5LT[Jk;Yt;CK/EN*c#p:(b7`%u"ADXDDsW%0iot"A`X*?1m[mGe\k8jMKA6nmYr!B%N6`s_b=BH!BHP]X]m,+AlfqD#`9C;[2(a[Te7ffQ]S:^fabD:&bjhol`RQI"^QPS-rcX.%@\^;QhS2NB.e9$Ala0O5:"(L;U9cZYVf&>7hm2Q0@A6;_d7\=&ROGi&'K`+)bXP0U?1o@W'Q2d-QZ]ka/%NWW<f3-$i<el#8<Fem%AImEmk>!IM]Hp+8]Z(`*9&V0k`KdHgQ8R0LT[^01<<gJ(fe*`(>hI^>L1m_&l`+.%JB1K]P]C/G]2FY;P<!<O<40u-f<S[cCYL;P%L,Op\2Gm=&Y>l*n'UdK\D'E676F#M][8dYl8`XH+`'Vj<#`?s[>h_pS</PFN<.JYUR,Fc#:l0KI357dAd&XWR14U-t$,3-3$UqP&%a=(4?SVg'+g6WFO&V7,1d9\bXP:S:"$"QBL$])O$1)I'E@;2E[FaC&.=c%:Zg6?uX)-F!rA1V6;#cC><FX+nS:*Uk5):Cp0#Gop<%<iPYE%[\`J3T't-$5U2!6S/'7%2@>^#"D-qT.iF[F<G6hEoWckM^Hnd"]f'>jOI`)$-IEHM?GHVZDIOGi.Y*8P<r%$&h"([LrI_E%b6?>JI8-$H"PNg4pPoU/$1G9Z4HrN<Qf9p2g0#8]7KIMi/Nm"%:.5*G>r-n(N71V5f5"E[9fM&sfAN:1`R-Gt<0DOi15hjKAd#.a%26TO8RF$$4b3-_=$fFlYe<jF#`-mJIZIfg@CDP'.K?!gHa08<.4^^ArI=jua$<(ZOlI;oCWENr2;,2&.G#h!;nrtpf:j)<RJ9.mF%/@tguLf0@bW^1ukr.<q8"%dI=-FJGN+$5$>pA1(\Jo(<^HDun5k,pHmQ^-_YV:B@51e0j_OU&D^7n:Y6eAB\(4;?gY84t^!"iqJu%0-nabaQ!n+asfmkc"M.4$RcGE_m1Gs_HG6T-%?k^Xg:R4jo_[%MPVdZJO8n%V3G`B[As_>mBd@3,6>:%Y$3>+]tT_@-@81g)/_^o%;70G1dX,].OTP2(?Y*kB0X9$kNIXcD<^VE&MDrU/(oQrqF?"6)?)LP,3Pi^gV0K-:"1HE?Q%&'KWSC=;I.j!F*=B@/)6XqM$&k8j%KsuE8iH%Nr*)(B`?@`)/@#h:O7IrHi+Y"Fr@72TGMc1#30VVq?'j@0)d7]pml["ROA@*e#cN%H(-nrC6J`G>M<iRnfZWJa9?Polj%Vm:/V^>oJLYE^gO.MqH%,S+l+;6R%<,,KOT_@M/K6QGFD.^e'IM*eH@#]<)O$bbGjQ/'.&-=V@A@j1cCGB)&SLW/mOBTh!#>$9?_%G@)I/M0B.`F_R9roLa!EZrC4k.]a.q.C#V!'UgL``H5G.onk2\eQ]IdBjMD%$@JV2"YF(L2*g`VZ_um`0k]%d3mI]To!>NEj^^("%5qdnCe&sAkW!d\(Bi-7i+H3.r7@7d)>A#RU:;,&V!m-7<-!@_JRc_a1s(A;n"]_q0]I6);@Us;3f#jOnSJ5Mk=%&9qC@#DMU`(E&%)^cVH=u?YVd?E3bh%IDWTh%4*b,KV;IA0M?<"<\@R&X?R1POHX1eWJe[GmA0H^uI!k`(IW8lT/L]I)$:1<<X*;g3n[=N!"u&j+31%(Hs4gI8]Wq(K7Wt3/aOu<1m]$V&)BiEBD2R<[n9kQjUqGf*Pgj'V4&>Ja*^Q#lpVT:pe#++g-9YR$(j,@3q4Fd,Oqu&a"VL3C2aD%%2Y8R$2TItRo"(+eOpnDR9Hk=WIT;E<#*e/Y6fZoYc._^nBa<g4B"K1g?c^`rJWSH%`d'p:g-Tl(2fR>;ut68_QqOuf*ed8)r\BI%g.GhR$<eBN.B/t_kjR@?'stE]pbESkp4A8r)JEtHpE^9UFp^d`1sjt0/Qem$ed*Ja'pkYGes0;&cSX"[Ot<M;"g-892\e/Ij?BV<%"m&J/_8,@r[rnB!^8-A?cKe6K!1O<63X_4B$5sUiRl&K"5i#*973S<jT`Lm=Z;+im1(=p4#\Aqd)CR'c8Kt3LTWGlWq+LlZ\O!-9%"&/k,L2JjX'SXC2.iL_`[,6AH"q"P1VPn1$fXGJbBQ:+C;ZeciPU0.AT;eLIAlE=\-u,`=2n@O*6'D]2\nlJgNGEBICH5<YK8(S5%re^3'EaPI'T/jm_c^`QgT+ligqId$OFK^1kC5tmc7%Y;>:C8M]/JmmK$7M2mW1#1@(F?<n/RBP,-n',<@'>*8<\FbO$7K[aq2d%u%+l2kEX.XU/8DBqmiZ@Ht1RZn;8LQ[nSsU"V:.N_u,DAWI.@3"lKh<jo6#0&im[pb"Dj%3=dH$0t)JEDZSCBCBg8ZYM%?rfpC?\jL%5jJR92&-gi0%W@(Qh'T=!<k,+oJ5=Bl.#[Zodk1*C6J^&=-BAL/"d_XQg:8dAa)%K&Rlq0iN:]r0j1p<a4*=ho8"atZnBT=l4m,H%9l5tm.\LompJ@a5'a@+p(!o!I2/4$XQBXKUBqTfB2l;/#Y(fk,Q6*LpqSnr`UK#X!8hQ:?Brd7D'6HPY6[m#KjO0-32$rQk8F[T3%r[;2PBei,Rl\B3lV8f"CCY7;<7Ed]C`nQ`(95\7m$EbhZ5a#0b"=;m.8+'Z,G&9mV3e!`uZBoTODVaQ:[*CohFf3omE18B)[mjJ)%I+7\;<\"V?.o[95EZp$3n4G2JeGLJhU!4uf97gX@I(tU+*grg,f59YrV`%GNTV%PF_L%9]%&h&$<oh7c6WE>9.5_s8rk]T*q#mgd%_!"h$7D56l]hF)CFI5V$6DZq$j[dm2I#AVs:)SoHTS!<2Y>hBM+r@b9NQpOK[*KC[ZXDIt?'$;?.&X=q]iA+FfkL#?J04&Gd'V`%%F>)6?Im4EqB;/"tIb793Ceth7hl7il;pmD'HN:fgAjL.\U_2cKg6N*U\qKDNc&<(Ns4OGVI@h/*M%o+f[9uaN$nj$Y>5R"FP(9X$%q]p_%oM4W(nD!^ZR6"*+oZF0`Z`oF@PUdL/-rEoVlEpW+dUDiMT+hOEd>FQnK/H\KfW3Ea)CnI^26\l'Q#rLc-Lr7$THnD^=pN'X%=5rK^J:JWPi7pMXVKY:=FV8X.kL:E751Z:d1"R$t:l\E<-00*%2)n&U\q6H[:.ptk1t(F:PSW/bUo6bH$CLrcOl'*-Li/XC7$B;N%CC3'65&r"EN,FTTUQS)TB`NhB[->ku"M8A@>8N"LZpe"#T8qF00O/j`]3u-[Xb/9q:L!I6n-)V8(4@3N`SEAA_I*gsK0glDRdu'B%6$3hkK<KNc-5iT`]4njj%),-,:_5">_,p+1Wnhb8FqR#,.a2P0)jC?&e4jAU)jCZ71ACp_Bpu+35#k)%j\'1SXd`Go:C2k9k-e'i%)c0WU1P=MF-N6E5](fP`CJ`MT:ZtY73DJWVPZ.p\W#KiWd@-5U\nRTs\OKCSWTISTh)&tU#@Ei,B$"g7!A5h`d;+R=M;t@O''$88%k_A\9$VcS.<%4QV."Q9)[P*;PbLU6in;4D`'V(I32qTBV*8_ktfLh<M@#u<A\<3"XKA<]L:FE6\+?(iX@tk!f;Hqj<'F)*6AH=6r%h*Z(Al7\0EKA7U"^CUpH+DqgcQ^SeKqD)e+(g'(glaH/\8fQUkhb*"ZWCu5i>=EAEg[onfGT5-`BJhSA6F*P*+I+AbDo9Cp\5T/m%?j]VB+]18TI49PIqJDqbkmVJ4(?"j`C/OW=!YbVX.Oc3bi,s@U%2Q+p/$L=aM5j'HZ!J1g;Go5sKA31HT>>BK0s)G0^hn#rA=3jD%K7^Yb]"r5[IoM$t#.HmX;?:/EgkOARX<,+0RAb7@Fid([X]9*`\.)'+VK2G=[m?9E]?WoU;bb>khj="t@W7g,-?'p2<9UaQ!k2kV%9VI6rTF\"A^.@.CQ,AsW,pZG#[mBDu7Y=SoM\r[`_\Z8Z.i2snoH^k\1BIu&_m4rab=]U%>,/gu$1aD3Cs/E4+F1iY@%FBLVVuAg%f[S&Tb*bMG3%K_:#QUrOV#sT-%;No9%Gl]G6#G^YSR.lW<5!.Z8),@*RLhDcR"\l!,`!BnbZZ/jL:CsOX;4"[H;1u1b9/ardY2,l%'QVZE,D5RniWe2bNkW$"==#LOCauW&=]%QATLr=ak(4^na>1/mMRYs?0WTm\rXK\R;Zrj<DEqnNWhl<-VX&.P:p$TNXM2MgfT7B`%#jS:l>]W9gJ7+Z3eQ,@llqo^CGGY?D6/=B2@ufOOPNF]JXIu'&6M_"1K69h0nEHU]2R/(FJSrm_9V<?kDUGNoFOS`f+ae@piuCZ6%aA=fT]hWK='os0rLUJWj5YsD4=XAIGD1^U6A?_Q;V&jf4n!/3)OW)S4ms$V*"%V,rCmtIQe6*rB4`mh99oll"lFm\@Jo7$g07tpN%Rg+'SKI-fW,Rl%%h;IYPH`bD>iU@.s!u>5/XjI?bC$_k)"M:?S_4.50G115W4m[pXU+CZD%JEl'K2:,o>KC^+@5ea8;O:9i2jAfL%_\%q7<,!k8Y@]V%X&ZtP`tLir.s<5o%E,]a>+OqaK>=rGpiQF!8)Q-KfF:FuGqCAB\=6#%`-h^DJC:Bb/AR`Caac<1c%%`59n50>%ZB>W@K.[l&^;A=j$b=q;!H4X0"O2uBi6@W(U,L0mNUFTeis-Y)RJjL6C#d:Rlf%Z)O0<b6r+Gcil-gSANnf*RB(t06(]Ss!qfUrD%[ho(NHf2l`O.X/$pqHVcroLqbYIi]+J,6a'i7m!^rsMGH`?%6ajN=UlNW1(MqV62~>%AI9_PrivateDataEnd